/*
 * ----------------------------------------------------------------------------
 *  This file is automatically generated using TTworkbench Language Support ASN.1 Parser
 *  PLEASE DO NOT EDIT! The file will be overwritten when the input file changes.
 *
 *  Source:    AVIAEINumberingAndDataStructures.asn
 *  Generator: TTworkbench ASN.1 Parser 1.1.13.201605251730
 *  Date:      07/06/16 07:50
 *
 * ----------------------------------------------------------------------------
 *  The ASN.1 to TTCN-3 is a proprietary mapping based on the ES 201 873-7 ETSI standard.
 *  Details about the used mapping can be found in the TTworkbench documentation.
 *
 *  TTworkbench is a product of Testing Technologies.
 *  http://www.testingtech.com
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  (C) Copyright Testing Technologies, 2000-2016. All Rights Reserved.
 * ----------------------------------------------------------------------------
 */

module AVIAEINumberingAndDataStructures language "ASN.1:1997" {
  import from ASNAUX all; 

  type record CS1 {
    CountryCode countryCode,
    IssuerIdentifier issuerIdentifier,
    ServiceNumber serviceNumber
  }

  type record CS2 {
    ManufacturerIdentifier manufacturerIdentifier,
    ServiceNumber serviceNumber
  }

  type record CS3 {
    StartTime startTime,
    StopTime stopTime,
    GeoGraphicalLimit geographLimit,
    ServiceApplicationLimit serviceAppLimit
  }

  type record CS4 {
    CountryCode countryCode,
    AlphabetIndicator alphabetIndicator,
    LicPlateNumber licPlateNumber
  }

  type record CS5 {
    ASNAUX.VisibleString vin,
    _0CS5 fill
  }

  type bitstring _0CS5 length (9); 

  type FreightContainerData CS7; 

  type record FreightContainerData {
    _0FreightContainerData ownerCode,
    _0FreightContainerData0 serialNumber,
    _0FreightContainerData1 checkDigit,
    _0FreightContainerData2 length_,
    _0FreightContainerData3 height,
    _0FreightContainerData4 width,
    _0FreightContainerData5 containerTypeCode,
    _0FreightContainerData6 maximumGrossMass,
    _0FreightContainerData7 tareMass,
    _0FreightContainerData8 fill
  }

  type integer _0FreightContainerData0 (0 .. 1000000); 

  type integer _0FreightContainerData7 (0 .. 99); 

  type bitstring _0FreightContainerData length (19); 

  type bitstring _0FreightContainerData8 length (3); 

  type integer _0FreightContainerData5 (0 .. 127); 

  type integer _0FreightContainerData6 (19 .. 500); 

  type integer _0FreightContainerData3 (1 .. 500); 

  type integer _0FreightContainerData4 (200 .. 300); 

  type integer _0FreightContainerData1 (0 .. 10); 

  type integer _0FreightContainerData2 (1 .. 2000); 

  type record CS8 {
    CountryCode countryCode,
    TaxCode taxCode,
    _0CS8 fill
  }

  type bitstring _0CS8 length (6); 

  type bitstring CountryCode length (10); 

  type integer IssuerIdentifier (0 .. 16383); 

  type integer ManufacturerIdentifier (0 .. 65535); 

  type octetstring LicPlateNumber; 

  type bitstring ServiceNumber length (32); 

  type octetstring TaxCode; 

  type integer AlphabetIndicator (0 .. 63); 

  const AlphabetIndicator AlphabetIndicator_latinGreekAlphabet_ := 6; 

  const AlphabetIndicator AlphabetIndicator_latinHebrewAlphabet_ := 7; 

  const AlphabetIndicator AlphabetIndicator_latinArabicAlphabet_ := 5; 

  const AlphabetIndicator AlphabetIndicator_latinAlphabetNo6_ := 9; 

  const AlphabetIndicator AlphabetIndicator_latinAlphabetNo5_ := 8; 

  const AlphabetIndicator AlphabetIndicator_latinAlphabetNo4_ := 3; 

  const AlphabetIndicator AlphabetIndicator_latinAlphabetNo3_ := 2; 

  const AlphabetIndicator AlphabetIndicator_latinAlphabetNo2_ := 1; 

  const AlphabetIndicator AlphabetIndicator_latinAlphabetNo1_ := 0; 

  const AlphabetIndicator AlphabetIndicator_twoOctetBMP_ := 10; 

  const AlphabetIndicator AlphabetIndicator_latinCyrillicAlphabet_ := 4; 

  const AlphabetIndicator AlphabetIndicator_fourOctetCanonical_ := 11; 

  type octetstring AviEriDateTime length (10); 

  type AviEriDateTime StartTime; 

  type AviEriDateTime StopTime; 

  type bitstring GeoGraphicalLimit length (8); 

  const GeoGraphicalLimit GeoGraphicalLimit_district_ := '00010000'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_nationalRestriction_ := '00100000'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_reservedForCEN1_ := '00000100'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_reservedForCEN2_ := '00000010'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_globalRestriction_ := '10000000'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_regionalRestriction_ := '01000000'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_issuerCoverageRestriction_ := '00001000'B; 

  const GeoGraphicalLimit GeoGraphicalLimit_issuerSpecificRestriction_ := '00000001'B; 

  type bitstring ServiceApplicationLimit length (8); 

  const ServiceApplicationLimit ServiceApplicationLimit_issuerSpecificRestriction2_ := '00000100'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_issuerSpecificRestriction3_ := '00000010'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_issuerSpecificRestriction4_ := '00000001'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_notForPostpayment_ := '10000000'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_notForPrepayment_ := '01000000'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_notForVehicleaccess_ := '00100000'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_notForFleetcontrol_ := '00010000'B; 

  const ServiceApplicationLimit ServiceApplicationLimit_issuerSpecificRestriction1_ := '00001000'B; 
}
