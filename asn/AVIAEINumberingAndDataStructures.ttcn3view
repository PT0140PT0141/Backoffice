/*
 * ----------------------------------------------------------------------------
 *  This file is automatically generated using TTworkbench Language Support ASN.1 Parser
 *  PLEASE DO NOT EDIT! The file will be overwritten when the input file changes.
 *
 *  Source:    AVIAEINumberingAndDataStructures.asn
 *  Generator: TTworkbench ASN.1 Parser 1.1.14.201606151123
 *  Date:      9/28/17 4:18 PM
 *
 * ----------------------------------------------------------------------------
 *  The ASN.1 to TTCN-3 is a proprietary mapping based on the ES 201 873-7 ETSI standard.
 *  Details about the used mapping can be found in the TTworkbench documentation.
 *
 *  TTworkbench is a product of Testing Technologies.
 *  http://www.testingtech.com
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  (C) Copyright Testing Technologies, 2000-2017. All Rights Reserved.
 * ----------------------------------------------------------------------------
 */

module AVIAEINumberingAndDataStructures language "ASN.1:1997" {
  import from ASNAUX all; 

  type record CS1 {
    CountryCode countryCode,
    IssuerIdentifier issuerIdentifier,
    ServiceNumber serviceNumber
  }

  type record CS2 {
    ManufacturerIdentifier manufacturerIdentifier,
    ServiceNumber serviceNumber
  }

  type record CS3 {
    StartTime startTime,
    StopTime stopTime,
    GeoGraphicalLimit geographLimit,
    ServiceApplicationLimit serviceAppLimit
  }

  type record CS4 {
    CountryCode countryCode,
    AlphabetIndicator alphabetIndicator,
    LicPlateNumber licPlateNumber
  }

  type record CS5 {
    ASNAUX.VisibleString vin,
    bitstring fill length (9)
  }

  type FreightContainerData CS7; 

  type record FreightContainerData {
    bitstring ownerCode length (19),
    integer serialNumber (0 .. 1000000),
    integer checkDigit (0 .. 10),
    integer length_ (1 .. 2000),
    integer height (1 .. 500),
    integer width (200 .. 300),
    integer containerTypeCode (0 .. 127),
    integer maximumGrossMass (19 .. 500),
    integer tareMass (0 .. 99),
    bitstring fill length (3)
  }

  type record CS8 {
    CountryCode countryCode,
    TaxCode taxCode,
    bitstring fill length (6)
  }

  type bitstring CountryCode length (10); 

  type integer IssuerIdentifier (0 .. 16383); 

  type integer ManufacturerIdentifier (0 .. 65535); 

  type octetstring LicPlateNumber; 

  type bitstring ServiceNumber length (32); 

  type octetstring TaxCode; 

  type integer AlphabetIndicator (0 .. 63); 

  const integer AlphabetIndicator_latinAlphabetNo1_ := 0; 

  const integer AlphabetIndicator_latinAlphabetNo2_ := 1; 

  const integer AlphabetIndicator_latinAlphabetNo3_ := 2; 

  const integer AlphabetIndicator_latinAlphabetNo4_ := 3; 

  const integer AlphabetIndicator_latinCyrillicAlphabet_ := 4; 

  const integer AlphabetIndicator_latinArabicAlphabet_ := 5; 

  const integer AlphabetIndicator_latinGreekAlphabet_ := 6; 

  const integer AlphabetIndicator_latinHebrewAlphabet_ := 7; 

  const integer AlphabetIndicator_latinAlphabetNo5_ := 8; 

  const integer AlphabetIndicator_latinAlphabetNo6_ := 9; 

  const integer AlphabetIndicator_twoOctetBMP_ := 10; 

  const integer AlphabetIndicator_fourOctetCanonical_ := 11; 

  type octetstring AviEriDateTime length (10); 

  type AviEriDateTime StartTime; 

  type AviEriDateTime StopTime; 

  type bitstring GeoGraphicalLimit length (8); 

  const bitstring GeoGraphicalLimit_globalRestriction_ := '10000000'B; 

  const bitstring GeoGraphicalLimit_regionalRestriction_ := '01000000'B; 

  const bitstring GeoGraphicalLimit_nationalRestriction_ := '00100000'B; 

  const bitstring GeoGraphicalLimit_district_ := '00010000'B; 

  const bitstring GeoGraphicalLimit_issuerCoverageRestriction_ := '00001000'B; 

  const bitstring GeoGraphicalLimit_reservedForCEN1_ := '00000100'B; 

  const bitstring GeoGraphicalLimit_reservedForCEN2_ := '00000010'B; 

  const bitstring GeoGraphicalLimit_issuerSpecificRestriction_ := '00000001'B; 

  type bitstring ServiceApplicationLimit length (8); 

  const bitstring ServiceApplicationLimit_notForPostpayment_ := '10000000'B; 

  const bitstring ServiceApplicationLimit_notForPrepayment_ := '01000000'B; 

  const bitstring ServiceApplicationLimit_notForVehicleaccess_ := '00100000'B; 

  const bitstring ServiceApplicationLimit_notForFleetcontrol_ := '00010000'B; 

  const bitstring ServiceApplicationLimit_issuerSpecificRestriction1_ := '00001000'B; 

  const bitstring ServiceApplicationLimit_issuerSpecificRestriction2_ := '00000100'B; 

  const bitstring ServiceApplicationLimit_issuerSpecificRestriction3_ := '00000010'B; 

  const bitstring ServiceApplicationLimit_issuerSpecificRestriction4_ := '00000001'B; 
}
