/*
 * ----------------------------------------------------------------------------
 *  This file is automatically generated using TTworkbench Language Support ASN.1 Parser
 *  PLEASE DO NOT EDIT! The file will be overwritten when the input file changes.
 *
 *  Source:    EfcAutonomousContextData.asn
 *  Generator: TTworkbench ASN.1 Parser 2.25.0.201711292344
 *  Date:      5/30/18 2:41 PM
 *
 * ----------------------------------------------------------------------------
 *  The ASN.1 to TTCN-3 is a proprietary mapping based on the ES 201 873-7 ETSI standard.
 *  Details about the used mapping can be found in the TTworkbench documentation.
 *
 *  TTworkbench is a product of Spirent Communications.
 *  https://www.spirent.com/TTworkbench
 *
 *  SPIRENT COMMUNICATIONS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL SPIRENT COMMUNICATIONS BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  (C) Copyright Spirent Communications, 2000-2018. All Rights Reserved.
 * ----------------------------------------------------------------------------
 */

module EfcAutonomousContextData language "ASN.1:1997" {
  import from ASNAUX all; 

  import from EfcDsrcApplication language "ASN.1:1997" all; 

  import from AVIAEINumberingAndDataStructures language "ASN.1:1997" all; 

  import from EfcDsrcGeneric language "ASN.1:1997" all; 

  import from EfcCcc language "ASN.1:1997" all; 

  import from EfcAutonomousCharging language "ASN.1:1997" all; 

  type record AuthenticatedIso17575_3Adu {
    bitstring iso17575_3AduPer,
    EfcAutonomousCharging.MessageAuthenticator messageAuthenticator
  }

  type record Iso17575_3AduHeader {
    AidIdentifier protocolVersion,
    EfcDsrcApplication.Provider informationSender,
    EfcDsrcApplication.Provider informationOriginator,
    EfcDsrcApplication.Provider tollContext,
    Int4 aduSequenceNumber,
    ASNAUX.GeneralizedTime messageDate
  }

  type record TollContextOverview {
    EfcDsrcApplication.Provider tollContext,
    record of TollContextPartitionId tollContextPartitions,
    ASNAUX.UTF8String tollSchemeName optional,
    record of SphericalBox tollContextBoundingBoxes optional,
    VersionAndValidity tollContextOverviewVersion
  }

  type record TollContextPartitionOverview {
    TollContextPartitionId tollContextPartitionId,
    ASNAUX.UTF8String tollContextPartitionName optional,
    TollSchemeType tollContextPartitionType,
    OperationalStatus operationalStatus,
    integer timeZone (-720 .. 720),
    integer dstOffset (-120 .. 120) optional,
    Polygon tollContextPartitionBoundingPolygon optional,
    boolean sendChargeReportIfEntering optional,
    Int1 precedenceLevel optional,
    EfcDsrcApplication.Provider chargeReportFinalRecipient optional,
    VersionAndValidity tollContextPartitionOverviewVersion
  }

  type record TariffTable {
    record of TollContextPartitionId applicablePartitions,
    record of Tariff tariffs,
    EfcDsrcApplication.PayUnit standardCurrency,
    TypeOfFee typeOfFee optional,
    VersionAndValidity tariffTableVersion
  }

  type record CurrencyConversionTable {
    record of record {
      Currency alternativeCurrency,
      Int4 conversionRate
    } conversions,
    VersionAndValidity currencyConversionTableVersion
  }

  type record TariffClassDefinition {
    record of TariffClass tariffClasses,
    VersionAndValidity tariffClassDefinitionVersion
  }

  type record LocalVehicleClassDefinition {
    record of LocalVehicleClass localVehicleClasses,
    VersionAndValidity localVehicleClassVersion optional
  }

  type record TimeClassDefinition {
    record of TimeClass timeClasses,
    VersionAndValidity timeClassDefinitionVersion optional
  }

  type record UserClassDefinition {
    record of UserClass userClasses,
    VersionAndValidity userClassDefinitionVersion optional
  }

  type record TollContextPartitionLayout {
    TollContextPartitionId tollContextPartitionId,
    Layout layoutDescription,
    Point geoRefPoint optional,
    VersionAndValidity tollContextPartitionVersion
  }

  type record ChargeReportingEvents {
    record of TollContextPartitionId applicablePartitions,
    record of AbsoluteTimeEvent absoluteTimeEvents optional,
    RelativeTimeEvent relativeTimeEvents optional,
    EfcAutonomousCharging.Distance travelledDistanceEvents optional,
    record of LocationEvent locationEvents optional,
    FeeLimit feeLimitEvents optional,
    VersionAndValidity chargeReportingEventsVersion
  }

  type record ChargeReportConfiguration {
    record of TollContextPartitionId applicablePartitions,
    ChargeReportContent chargeReportContent,
    UsageStatementContent usageStatementContent,
    CccAttributesContent cccAttributesContent optional,
    AggregatedSingleTariffClassSessionContent aggregatedSingleTariffClassSessionContent optional,
    DetectedChargeObjectContent detectedChargeObjectContent optional,
    ListOfRawUsageDataContent listOfRawUsageDataContent optional,
    ListOfDsrcUsageDataContent listOfDsrcUsageDateContent optional,
    AggregatedFeeContent aggregatedFeeContent optional,
    MeasuredRawDataContent measuredRawDataContent optional,
    NmeaDataContent nmeaDataContent optional,
    VersionAndValidity chargeReportConfigurationVersion
  }

  type record AbsolutePointCoordinates {
    EfcCcc.Longitude longitude,
    EfcCcc.Latitude latitude,
    Int2Signed altitude optional
  }

  type record AbsoluteTimeEvent {
    Time timesDuringDay,
    Int3 randomDelay optional
  }

  type Int1 ActualNumberOfPassengers; 

  type record AggregatedFeeContent {
    boolean sumVat
  }

  type record AggregatedSingleTariffClassSessionContent {
    boolean timePeriodCovered,
    boolean currentTariffClass,
    TariffClassDescriptionContent tariffClassDescriptionContent optional,
    boolean vehicleDescription,
    VehicleDescriptionContent vehicleDescriptionContent optional,
    boolean totalDistanceCovered,
    boolean numberOfDetectedEvents,
    boolean obeStatus,
    boolean feeExclVat,
    boolean sumVat
  }

  type integer AidIdentifier (0 .. 255); 

  const integer AidIdentifier_iso17575_3_2010_ := 0; 

  const integer AidIdentifier_iso17575_3_2016_ := 1; 

  type Int1 AreaId; 

  type record AreaLayout {
    AreaId areaId,
    Polygon areaBorder,
    LocationClassId locationClass optional,
    record of TimeClassId applicableTimeClasses optional,
    record of RoadNetwork roadNetworks optional
  }

  type record CccAttributesContent {
    boolean timeOfCCCRecord,
    boolean axlesHistory,
    boolean commStatus,
    boolean gnssStatus,
    boolean distRecStatus,
    boolean activeContexts,
    boolean obeHistory
  }

  type union ChargeDistance {
    EfcAutonomousCharging.Distance predefinedDistance,
    record {
      record of EntryDependingDistanceData entryDependingDistance,
      EfcAutonomousCharging.Distance missingEntryInformation
    } entryDependingDistance
  }

  type Int4 ChargeObjectDesignation; 

  type record ChargeObjectIdContent {
    boolean chargeReportFinalRecipient
  }

  type record ChargeReportContent {
    boolean useOfCrAuthentication,
    boolean obeId,
    boolean vehicleLPNr,
    boolean paymentMeans,
    boolean tollContext,
    boolean chargeReportFinalRecipient,
    boolean timeOfReport,
    boolean reportPeriod,
    boolean versionInfo,
    boolean sumVatForThisSession,
    boolean accountStatus,
    boolean chargeReportCounter,
    boolean mileage,
    boolean listOfCCCAttributes
  }

  type union ChargeUnit {
    EfcAutonomousCharging.Distance distance,
    EfcAutonomousCharging.Duration time,
    Int1 event
  }

  type Int2 CO2EmissionValue; 

  type record CO2EmissionValueRange {
    CO2EmissionValue lowerLimit,
    CO2EmissionValue upperLimit
  }

  type Int2 ContextId; 

  type record ContractTypes {
    EfcDsrcApplication.Provider contractProvider,
    octetstring typeOfContract length (2)
  }

  type record CopValueRange {
    EfcDsrcApplication.CopValue lowerLimit,
    EfcDsrcApplication.CopValue upperLimit
  }

  type record CordonBorderSegment {
    CordonSegmentId cordonSegmentId,
    Point startPoint,
    CordonEntryLocation cordonEntryLocation optional,
    CordonExitLocation cordonExitLocation optional
  }

  type record CordonEntryLocation {
    ChargeObjectDesignation entryLocationId,
    LocationClassId entryLocationClass,
    record of TimeClassId applicableTimeClasses optional
  }

  type record CordonExitLocation {
    ChargeObjectDesignation exitLocationId,
    record of record {
      LocationClassId locationClass,
      record of EntryLocationId entryLocation optional
    } exitLocationClass,
    record of TimeClassId applicableTimeClasses optional
  }

  type Int1 CordonId; 

  type record CordonLayout {
    CordonId cordonId,
    record of CordonBorderSegment cordonBorderPolygon
  }

  type Int4 CordonSegmentId; 

  type integer Currency (1 .. 999); 

  type record DetectedChargeObjectContent {
    ChargeObjectIdContent chargeObjectIdContent,
    boolean subObjectNumber,
    boolean timeWhenUsed,
    boolean mileageWhenUsed,
    boolean currentTariffClass,
    TariffClassDescriptionContent tariffClassDescriptionContent optional,
    boolean vehicleDescription,
    VehicleDescriptionContent vehicleDescriptionContent optional,
    boolean obeStatus,
    boolean feeExclVat,
    boolean sumVat,
    boolean chargeObjDetectionMode
  }

  type record DieselEmissionValueRange {
    record {
      EfcDsrcApplication.UnitType unitType,
      record {
        integer lowerLimit (0 .. 32767),
        integer upperLimit (0 .. 32767)
      } valueRange
    } particulate optional,
    record {
      Int2 lowerLimit,
      Int2 upperLimit
    } absorptionCoeffRange
  }

  type record EfcLayer {
    integer efcLayerId,
    ASNAUX.UTF8String tollContextName optional,
    record of GdfChargeObject chargeObjects,
    GdfSource referencedGdfSource,
    VersionAndValidity efcLayerVersion
  }

  type record EfcNodeId {
    integer efcContextSpecificId,
    ASNAUX.UTF8String sectionName optional,
    GdfReference gdfSpecificId optional
  }

  type EfcDsrcApplication.Provider EntityId; 

  type record EntryDependingDistanceData {
    ChargeObjectDesignation chargeObjectAtEntry,
    EfcAutonomousCharging.Distance definedDistance
  }

  type Int4 EntryLocationId; 

  type record EuroValueRange {
    EfcDsrcApplication.EuroValue lowerLimit,
    EfcDsrcApplication.EuroValue upperLimit
  }

  type record ExhaustEmissionValueRange {
    EfcDsrcApplication.UnitType unitType,
    record {
      integer lowerLimit (0 .. 32767),
      integer upperLimit (0 .. 32767)
    } emissionCORange optional,
    record {
      Int2 lowerLimit,
      Int2 upperLimit
    } emissionHCRange optional,
    record {
      Int2 lowerLimit,
      Int2 upperLimit
    } emissionNOXRange optional,
    record {
      Int2 lowerLimit,
      Int2 upperLimit
    } emissionHCNOXRange optional
  }

  type EfcDsrcApplication.PaymentFee FeeLimit; 

  type record GdfChargeObject {
    ChargeObjectDesignation chargeObjectDesignation,
    EfcDsrcApplication.Provider roadOperatorId optional,
    integer applicableLocationClass optional,
    record of TimeClassId applicableTimeClasses optional,
    EfcAutonomousCharging.Distance tollRelevantLength,
    EfcAutonomousCharging.Distance equivalentMeasuredLength optional,
    TollRoad tollRoad,
    union {
      GdfReference tollPoint,
      record {
        GdfReference firstPoint,
        GdfReference secondPoint
      } minTollPath,
      integer minimumUsage (1 .. 1000)
    } liabilityRules
  }

  type record GdfReference {
    integer datasetId,
    integer layerId,
    integer sectionId,
    integer objectId
  }

  type record GdfSource {
    ASNAUX.UTF8String dataProvider,
    integer typeId,
    integer versionNumberId
  }

  type integer Int1 (0 .. 255); 

  type integer Int2 (0 .. 65535); 

  type integer Int2Signed (-32768 .. 32767); 

  type integer Int3 (0 .. 16777215); 

  type integer Int4 (0 .. 4294967295); 

  type record IntervalScaleParameter {
    record {
      Int2Signed zeroOffset,
      VehicleMaxLadenWeight resolution,
      VehicleMaxLadenWeight max
    } vehicleMaxLadenWeightIntervals optional,
    record {
      Int2Signed zeroOffset,
      VehicleLengthOverall resolution,
      VehicleLengthOverall max
    } vehicleLengthOverallIntervals optional
  }

  type union Layout {
    union {
      record of SectionLayout sectionLayoutDescription,
      SectionLayoutGdf sectionLayoutDescriptionGdf
    } sectionPricingLayout,
    record of AreaLayout areaPricingLayout,
    record of CordonLayout cordonPricingLayout
  }

  type union LiabilityRules {
    record length (1 .. 2) of Point tollPoints,
    Link minTollPath,
    integer minimumUsage (0 .. 1000)
  }

  type record Line {
    Point point1,
    Point point2
  }

  type record Link {
    LinkId linkId,
    Point startPoint,
    Point endPoint,
    record of Point intermediatePoints optional
  }

  type Int4 LinkId; 

  type record ListOfDsrcUsageDataContent {
    boolean data14906,
    boolean data12813,
    boolean data13141
  }

  type record ListOfRawUsageDataContent {
    boolean currentTariffClass,
    TariffClassDescriptionContent tariffClassDescriptionContent optional,
    boolean vehicleDescription,
    VehicleDescriptionContent vehicleDescriptionContent optional
  }

  type record LocalVehicleClass {
    LocalVehicleClassId localVehicleClassId,
    NominalVehicleParameters nominalElements,
    OrdinalVehicleParameters ordinalElements optional,
    Int1 priorityValue optional
  }

  type Int2 LocalVehicleClassId; 

  type Int4 LocationClassId; 

  type record LocationEvent {
    ChargeObjectDesignation chargeObject optional,
    record {
      Line lineDescription,
      boolean crossingDirection1,
      boolean crossingDirection2
    } line optional,
    record {
      Polygon areaDescription,
      boolean atEntry,
      boolean atExit
    } area optional
  }

  type record MaxFee {
    Int4 perDay optional,
    Int4 perWeek optional,
    Int4 perMonth optional,
    Int4 perYear optional
  }

  type record MeasuredRawDataContent {
    boolean measuredPosition,
    boolean timeWhenMeasured,
    boolean nMEAData,
    boolean additionalGNSSData
  }

  type record NmeaDataContent {
    boolean time,
    boolean status,
    boolean latitude,
    boolean latNS,
    boolean longitude,
    boolean longEW,
    boolean speed,
    boolean heading,
    boolean date,
    boolean signalIntegrity,
    boolean altitude,
    boolean usedSatellites,
    boolean hdop
  }

  type record NominalTimeParameters {
    record of Weekday weekdays optional,
    record of EfcDsrcApplication.DateCompact dates optional,
    record of integer classesSetExternally optional
  }

  const integer NominalTimeParameters_classesSetExternally__COMP_reserved_ := 0; 

  const integer NominalTimeParameters_classesSetExternally__COMP_congestionChargeLevel1_ := 1; 

  const integer NominalTimeParameters_classesSetExternally__COMP_congestionChargeLevel2_ := 2; 

  type record NominalVehicleParameters {
    record of EfcDsrcApplication.VehicleClass vehicleClasses,
    record of integer vehicleTrainAxlesNumbers optional,
    record of EfcDsrcApplication.EuroValue euroValues optional,
    record of EfcDsrcApplication.CopValue copValues optional
  }

  type record OperationalStatus {
    ASNAUX.GeneralizedTime startsOperationAt,
    ASNAUX.GeneralizedTime stopsOperationAt optional
  }

  type record OrdinalTimeParameters {
    record of record {
      Weekday startDay,
      Weekday endDay
    } weekdays optional,
    record of record {
      Time startTime,
      Time endTime
    } absoluteTimeOfDay optional,
    record of record {
      Int2 minPeriod optional,
      Int2 maxPeriod optional
    } relativeTimePeriods optional,
    record of record {
      EfcDsrcApplication.DateCompact startDay,
      EfcDsrcApplication.DateCompact endDay
    } periodsInYear optional
  }

  type record OrdinalVehicleParameters {
    record of VehicleLengthOverallRange vehicleLengthOverall optional,
    record of VehicleHeightOverallRange vehicleHeightOverall optional,
    record of VehicleWidthOverallRange vehicleWidthOverall optional,
    record of VehicleFirstAxleHeightRange vehicleFirstAxleHeight optional,
    record of VehicleTractorAxlesNumberRange vehicleTractorAxlesNumber optional,
    record of VehicleTrailerAxlesNumberRange vehicleTrailerAxlesNumber optional,
    record of VehicleMaxLadenWeightRange vehicleMaxLadenWeight optional,
    record of VehicleTrainMaximumWeightRange vehicleTrainMaximumWeight optional,
    record of VehicleWeightUnladenRange vehicleWeightUnladen optional,
    record of VehicleWeightLadenRange vehicleWeightLaden optional,
    record of EuroValueRange euroValue optional,
    record of CopValueRange copValue optional,
    record of VehicleClassRange vehicleClass optional,
    record of CO2EmissionValueRange co2EmissionValue optional,
    record of DieselEmissionValueRange dieselEmissionValue optional,
    record of ExhaustEmissionValueRange exhaustEmissionValue optional
  }

  type union Point {
    PointId pointIdentifier,
    AbsolutePointCoordinates absolutePointCoordinates,
    RelativePointCoordinates relativePointCoordinates
  }

  type Int4 PointId; 

  type record PointIdDefinition {
    PointId pointId,
    AbsolutePointCoordinates pointCoordinates
  }

  type record of Point Polygon; 

  type record RelativePointCoordinates {
    Int2Signed longitude,
    Int2Signed latitude,
    Int2Signed altitude optional
  }

  type record RelativeTimeEvent {
    Int3 timeDuration,
    Int3 randomDelay optional
  }

  type record RoadElementsTowardChargePoint {
    GdfReference junctionIdFrom,
    GdfReference gdfRoadElement
  }

  type record RoadNetwork {
    Int1 networkId,
    LocationClassId locationClass,
    record of RoadNetworkObject roadNetworkObjects
  }

  type record RoadNetworkObject {
    ChargeObjectDesignation chargeObjectId,
    ASNAUX.UTF8String chargeObjectName optional,
    Point chargeObjectRefPoint optional,
    record of Point networkPoints optional,
    Link tollPath,
    record of SupportingPoint supportingInformation optional,
    record of TimeClassId applicableTimeClasses optional
  }

  type integer RoundingRule (0 .. 255); 

  const integer RoundingRule_no_ := 0; 

  const integer RoundingRule_up_ := 1; 

  const integer RoundingRule_down_ := 2; 

  const integer RoundingRule_accounting_ := 3; 

  type record SectionLayout {
    ChargeObjectDesignation chargeObjectId,
    ASNAUX.UTF8String chargeObjectName optional,
    Point chargeObjectRefPoint optional,
    record of PointIdDefinition networkPoints optional,
    Link tollPath,
    LiabilityRules liabilityRules,
    record of Link pathStructureTowards optional,
    record of Link pathStructureOnwards optional,
    record of SupportingPoint supportingInformation optional,
    ChargeDistance chargeDistance,
    EfcAutonomousCharging.Distance realDistance optional,
    record of TimeClassId applicableTimeClasses optional,
    LocationClassId locationClass,
    boolean storageRequired optional,
    SupplementaryInvoicingData invoicingRelatedData optional
  }

  type record SectionLayoutGdf {
    EfcLayer efcLayer
  }

  type record SphericalBox {
    EfcCcc.Latitude southernLatitude,
    EfcCcc.Latitude northernLatitude,
    EfcCcc.Longitude westernLongitude,
    EfcCcc.Longitude easternLongitude
  }

  type record SupplementaryInvoicingData {
    ASNAUX.UTF8String countryCode optional,
    ASNAUX.UTF8String description optional,
    ASNAUX.UTF8String networkName optional,
    ASNAUX.UTF8String roadNumber optional,
    integer sectionNumber optional,
    ASNAUX.UTF8String directionCode optional,
    ASNAUX.UTF8String directionDescription optional,
    ASNAUX.UTF8String laneNumber optional,
    TypeOfSection typeOfSection optional
  }

  type record SupportingPoint {
    Point supportPoint,
    EfcAutonomousCharging.Distance distanceToNextRoad optional
  }

  type record Tariff {
    TariffClassId tariffClass,
    ChargeUnit chargeUnit,
    RoundingRule roundingRuleForChargeUnitsUsed,
    Int4 basicFeePerChargeUnit,
    RoundingRule roundingRuleForFee,
    Int4 vat optional,
    RoundingRule roundingRuleForVat optional,
    record of IntervalScaleParameter intervalScaleParameters optional,
    Int4 offsetFee optional,
    Int4 minFee optional,
    Int4 thresholdFee optional,
    MaxFee maxFee optional,
    Currency alternativeCurrency optional
  }

  type record TariffClass {
    TariffClassId tariffClassId,
    record of LocalVehicleClassId localVehicleClasses,
    record of TimeClassId timeClasses optional,
    record of LocationClassId locationClasses optional,
    record of UserClassId userClasses optional
  }

  type record TariffClassDescriptionContent {
    boolean tariffClassId,
    boolean localVehicleClasses,
    boolean timeClasses,
    boolean locationClasses,
    boolean userClasses
  }

  type Int4 TariffClassId; 

  type record Time {
    integer hours (0 .. 23),
    integer mins (0 .. 59),
    integer secs (0 .. 59)
  }

  type record TimeClass {
    TimeClassId timeClassId,
    NominalTimeParameters nominalElements optional,
    record of OrdinalTimeParameters ordinalElements optional,
    Int1 priorityValue optional
  }

  type Int2 TimeClassId; 

  type Int1 TollContextPartitionId; 

  type record TollRoad {
    EfcNodeId efcNodeFrom,
    record {
      record of RoadElementsTowardChargePoint roadElementsTowardChargePoint,
      GdfReference junctionIdTo
    } efcLink,
    EfcNodeId efcNnodeTo
  }

  type integer TollSchemeType (0 .. 255); 

  const integer TollSchemeType_roadSectionPricing_ := 0; 

  const integer TollSchemeType_areaPricingDistance_ := 1; 

  const integer TollSchemeType_areaPricingTime_ := 2; 

  const integer TollSchemeType_cordonPricing_ := 3; 

  type integer TypeOfFee (0 .. 255); 

  const integer TypeOfFee_reserved_ := 0; 

  const integer TypeOfFee_fee_ := 1; 

  const integer TypeOfFee_tax_ := 2; 

  const integer TypeOfFee_custom_ := 3; 

  type integer TypeOfSection (0 .. 255); 

  const integer TypeOfSection_reserved_ := 0; 

  const integer TypeOfSection_manual_ := 1; 

  const integer TypeOfSection_closedEntry_ := 2; 

  const integer TypeOfSection_closedExit_ := 3; 

  const integer TypeOfSection_checkpoint_ := 4; 

  const integer TypeOfSection_openRoadTolling_ := 5; 

  const integer TypeOfSection_distanceBasedFreeFlowPhysical_ := 6; 

  const integer TypeOfSection_distanceBasedFreeFlowVirtual_ := 7; 

  const integer TypeOfSection_aggregatedTrx_ := 8; 

  type record UsageStatementContent {
    boolean useOfUsageStatementAuthentication,
    boolean usageStatementId,
    boolean tollContext,
    boolean chargeReportFinalRecipient,
    boolean aggregatedFee,
    boolean sumVat,
    boolean aggregatedSingleTariffClassSession,
    boolean listOfChargeObjects,
    boolean listOfDSRCUsageData,
    boolean listOfRawUsageData,
    boolean noUsage,
    boolean additionalUsageInformation
  }

  type record UserClass {
    UserClassId userClassId,
    record of ContractTypes contractTypes optional,
    record of ActualNumberOfPassengers actualNumberOfPassengers optional,
    Int1 priorityValue optional
  }

  type Int1 UserClassId; 

  type record VehicleClassRange {
    EfcDsrcApplication.VehicleClass lowerLimit,
    EfcDsrcApplication.VehicleClass upperLimit
  }

  type record VehicleDescriptionContent {
    boolean vehicleLPNr,
    boolean axles,
    boolean class,
    boolean dimensions,
    boolean specificCharacteristics,
    boolean ladenWeight,
    boolean weightLimits,
    boolean trailerCharacteristics
  }

  type Int1 VehicleFirstAxleHeight; 

  type record VehicleFirstAxleHeightRange {
    VehicleFirstAxleHeight lowerLimit,
    VehicleFirstAxleHeight upperLimit
  }

  type Int1 VehicleHeightOverall; 

  type record VehicleHeightOverallRange {
    VehicleHeightOverall lowerLimit,
    VehicleHeightOverall upperLimit
  }

  type Int1 VehicleLengthOverall; 

  type record VehicleLengthOverallRange {
    VehicleLengthOverall lowerLimit,
    VehicleLengthOverall upperLimit
  }

  type Int2 VehicleMaxLadenWeight; 

  type record VehicleMaxLadenWeightRange {
    VehicleMaxLadenWeight lowerLimit,
    VehicleMaxLadenWeight upperLImit
  }

  type record VehicleTractorAxlesNumberRange {
    EfcDsrcApplication.TractorAxles lowerLimit,
    EfcDsrcApplication.TractorAxles upperLimit
  }

  type record VehicleTrailerAxlesNumberRange {
    EfcDsrcApplication.TrailerAxles lowerLimit,
    EfcDsrcApplication.TrailerAxles upperLimit
  }

  type Int2 VehicleTrainMaximumWeight; 

  type record VehicleTrainMaximumWeightRange {
    VehicleTrainMaximumWeight lowerLimit,
    VehicleTrainMaximumWeight upperLimit
  }

  type record VehicleWeightLadenRange {
    EfcDsrcApplication.VehicleWeightLaden lowerLimit,
    EfcDsrcApplication.VehicleWeightLaden upperLimit
  }

  type Int1 VehicleWidthOverall; 

  type record VehicleWidthOverallRange {
    VehicleWidthOverall lowerLimit,
    VehicleWidthOverall upperLimit
  }

  type Int2 VehicleWeightUnladen; 

  type record VehicleWeightUnladenRange {
    VehicleWeightUnladen lowerLimit,
    VehicleWeightUnladen upperLimit
  }

  type record VersionAndValidity {
    EfcAutonomousCharging.VersionId version,
    ASNAUX.GeneralizedTime validFrom
  }

  type integer Weekday; 

  const Weekday Weekday_reserved_ := 0; 

  const Weekday Weekday_monday_ := 1; 

  const Weekday Weekday_tuesday_ := 2; 

  const Weekday Weekday_wednesday_ := 3; 

  const Weekday Weekday_thursday_ := 4; 

  const Weekday Weekday_friday_ := 5; 

  const Weekday Weekday_saturday_ := 6; 

  const Weekday Weekday_sunday_ := 7; 
}
