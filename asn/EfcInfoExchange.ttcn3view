/*
 * ----------------------------------------------------------------------------
 *  This file is automatically generated using TTworkbench Language Support ASN.1 Parser
 *  PLEASE DO NOT EDIT! The file will be overwritten when the input file changes.
 *
 *  Source:    EfcInfoExchange.asn
 *  Generator: TTworkbench ASN.1 Parser 2.25.0.201711292344
 *  Date:      9/17/18 10:38 AM
 *
 * ----------------------------------------------------------------------------
 *  The ASN.1 to TTCN-3 is a proprietary mapping based on the ES 201 873-7 ETSI standard.
 *  Details about the used mapping can be found in the TTworkbench documentation.
 *
 *  TTworkbench is a product of Spirent Communications.
 *  https://www.spirent.com/TTworkbench
 *
 *  SPIRENT COMMUNICATIONS DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL SPIRENT COMMUNICATIONS BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  (C) Copyright Spirent Communications, 2000-2018. All Rights Reserved.
 * ----------------------------------------------------------------------------
 */

module EfcInfoExchange language "ASN.1:1997" {
  import from ASNAUX all; 

  import from EfcDsrcApplication language "ASN.1:1997" all; 

  import from AVIAEINumberingAndDataStructures language "ASN.1:1997" all; 

  import from EfcDsrcGeneric language "ASN.1:1997" all; 

  import from AuthenticationFramework language "ASN.1:1997" all; 

  import from ExtendedSecurityServices_2006 language "ASN.1:1997" all; 

  import from EfcAutonomousContextData language "ASN.1:1997" all; 

  import from EfcCcc language "ASN.1:1997" all; 

  import from EfcAutonomousCharging language "ASN.1:1997" all; 

  type record ApciFields {
    integer aidIdentifier (0 .. 255),
    EfcDsrcApplication.Provider apduOriginator,
    EfcDsrcApplication.Provider informationSenderID,
    EfcDsrcApplication.Provider informationrecipientID,
    ApduIdentifier apduIdentifier,
    RelatedApduId previousApduId optional,
    RelatedApduId nextApduId optional,
    RelatedApduId inResponseToApduId optional,
    ASNAUX.GeneralizedTime apduDate
  }

  type record RelatedApduId {
    EfcDsrcApplication.Provider apduOriginator,
    ApduIdentifier apduIdentifier
  }

  type union RequestADU {
    record {
      AduType requestedADUType optional,
      ApduIdentifier apduIdentifier optional,
      record of NumberOfADUStruct numberOfADUStruct optional
    } genericRequest,
    record {
      integer requestedADUType (5),
      EfcAutonomousCharging.Period period optional,
      ExceptionListType exceptionListType optional
    } exceptionListRequest,
    record {
      integer requestedADUType (3),
      union {
        integer trustObjectId,
        TrustObjectSpec trustObjectSpec
      } requestedTrustObject
    } trustObjectRequest,
    record {
      integer requestedADUType (7),
      UserId userId optional,
      ASNAUX.GeneralizedTime startTime optional,
      ASNAUX.GeneralizedTime endTime optional
    } tollDeclarationRequest,
    record {
      integer requestedADUType (12),
      UserId userId,
      record of UserParameterRequest listOfParametersRequested optional,
      UserDetailsRequestReason userDetailsRequestReason optional,
      EfcAutonomousCharging.Period userInfoValidityPeriod optional
    } userDetailsRequest,
    record {
      integer requestedADUType (13),
      UserId userId optional,
      ASNAUX.GeneralizedTime startTime optional,
      ASNAUX.GeneralizedTime endTime optional
    } cccEventRequest,
    record {
      integer requestedADUType (14),
      UserIdRequestType userIdRequestType,
      UserId userId optional,
      ASNAUX.GeneralizedTime userIdRequestTime optional
    } userListRequest
  }

  type record TrustObjectSpec {
    TrustObjectTypes typeOfTrustObject,
    record of TrustObjectPurposes purposesOfTrustObject optional
  }

  type record AckADU {
    ApduIdentifier apduIdentifier,
    record of NumberOfADUStruct explicitlyAckedAdus optional,
    ApduReasonCode apduAckCode,
    ASNAUX.UTF8String apduAckText length (0 .. 1024) optional,
    record of record {
      NumberOfADUStruct issueADUStruct,
      ASNAUX.UTF8String issueLocation length (0 .. 512) optional,
      ASNAUX.UTF8String issueContent length (0 .. 1024) optional,
      AduReasonCode issueCode,
      ASNAUX.UTF8String issueText length (0 .. 1024) optional
    } issues optional
  }

  type record StatusADU {
    GeneralStatusCode generalStatusCode,
    record {
      ApduIdentifier apdu,
      record of record {
        NumberOfADUStruct numberOfADUStruct,
        AduReasonCode reason
      } reasonOfADUStruct
    } apduStatusCode optional
  }

  type record TrustObjectADU {
    integer trustObjectID,
    record of TrustObjectPurposes purposesOfTrustObject,
    ASNAUX.GeneralizedTime startValidity optional,
    ASNAUX.GeneralizedTime endValidity optional,
    TrustObjectStatus trustObjectStatus,
    TrustObjectCode trustObject
  }

  type record ReportQAADU {
    integer qualityParameterID,
    ASNAUX.UTF8String qualityParameterName optional,
    float qualityParameterValue optional,
    QualityParameterStatus qualityParameterStatus
  }

  type record ExceptionListADU {
    ExceptionListVersion exceptionListVersion,
    ExceptionListType exceptionListType,
    ASNAUX.GeneralizedTime exceptionValidityStart optional,
    ASNAUX.GeneralizedTime exceptionValidityEnd optional,
    record of ExceptionListEntry exceptionListEntries
  }

  type record ReportAbnormalOBEADU {
    UserId userId,
    ASNAUX.GeneralizedTime dateAndTime,
    EfcDsrcApplication.EFC_ContextMark efcContextMark optional,
    record of AbnormalOBEReasonCode abnormalOBEReasonCode
  }

  type record PaymentClaimADU {
    integer paymentClaimId,
    ASNAUX.GeneralizedTime startDateTime,
    ASNAUX.GeneralizedTime endDateTime optional,
    UserId userId optional,
    ExtendedPaymentAmount paymentClaimAmount,
    PaymentClaimStatus paymentClaimStatus,
    TypeOfFee typeOfFee optional,
    record of union {
      record of BillingDetailsId billingDetailsList,
      record of TollDeclarationId tollDeclarationList,
      record of TollEventId tollEventList
    } referenceDetailsList optional,
    ActionCode actionCode optional,
    ASNAUX.UTF8String paymentReference optional
  }

  type record EntityOverview {
    EfcDsrcApplication.Provider entityID,
    EntityType entityType,
    record of RelatedEntityID relatedEntityID optional,
    ASNAUX.UTF8String entityClass optional,
    ASNAUX.UTF8String nameLine1,
    ASNAUX.UTF8String nameLine2,
    ASNAUX.UTF8String addressLine1,
    ASNAUX.UTF8String addressLine2,
    ASNAUX.UTF8String poBox optional,
    ASNAUX.UTF8String zip,
    ASNAUX.UTF8String city,
    ASNAUX.UTF8String country,
    ASNAUX.UTF8String countryCode,
    ASNAUX.UTF8String description optional,
    EntityContact mainContact,
    EntityContact customerServiceContact optional,
    EntityContact itContact,
    EntityContact operationalContact,
    EntityContact commercialContact,
    ASNAUX.UTF8String webSite optional,
    ASNAUX.UTF8String companyRegistrationNumber optional,
    ASNAUX.UTF8String companyRegistrationRegistrar optional,
    ASNAUX.GeneralizedTime established optional,
    record of BankDetails bankDetails
  }

  type record RelatedEntityID {
    EfcDsrcApplication.Provider entityID,
    EntityType entityType
  }

  type integer EntityType; 

  const EntityType EntityType_tc_ := 1; 

  const EntityType EntityType_tsp_ := 2; 

  const EntityType EntityType_centralHUB_ := 3; 

  const EntityType EntityType_localHUB_ := 4; 

  type record EntityContact {
    ASNAUX.UTF8String contact,
    ASNAUX.UTF8String telWorkingTime,
    ASNAUX.UTF8String telOutsideWorkingTime,
    ASNAUX.UTF8String email,
    ASNAUX.UTF8String mobile optional,
    ASNAUX.UTF8String telFax optional,
    record of WorkingTime workingTime
  }

  type record WorkingTime {
    ASNAUX.GeneralizedTime wtStart,
    ASNAUX.GeneralizedTime wtEnd,
    integer timeZone (-720 .. 720)
  }

  type record BankDetails {
    ASNAUX.UTF8String bankAccount optional,
    ASNAUX.UTF8String sortCode optional,
    ASNAUX.UTF8String bic optional,
    ASNAUX.UTF8String iban optional,
    ASNAUX.UTF8String currencyCode,
    ASNAUX.UTF8String vatID optional
  }

  type record ClosedContextDefinition {
    ClosedContextType closedContextType,
    ClosedSystem closedSystem
  }

  type integer ClosedContextType (0 .. 255); 

  const integer ClosedContextType_standAloneClosedSysytem_ := 1; 

  const integer ClosedContextType_interconnectedClosedSysytem_ := 2; 

  type record ClosedSystem {
    EfcAutonomousContextData.TollContextOverview tollContextOverview optional,
    EfcAutonomousContextData.TariffClassDefinition tariffClassDefinition optional,
    EfcAutonomousContextData.LocalVehicleClassDefinition localVehicleClassDefinition optional,
    EfcAutonomousContextData.TimeClassDefinition timeClassDefinition optional,
    EfcAutonomousContextData.UserClassDefinition userClassDefinition optional,
    FeeDefinition feeDefinition optional
  }

  type union FeeDefinition {
    record {
      EfcAutonomousContextData.TariffTable tariffTable optional,
      ClosedContextLayout closedContextLayout optional
    } actualPath,
    record {
      TollDefinition tollDefinition optional,
      PathDefinition pathDefinition optional
    } predefinedPath
  }

  type record ClosedContextLayout {
    record of TollOperator tollOperators optional,
    record of DSRCChargeObject dsrcChargeObjects,
    record of InternalPoint internalPoints optional,
    record of InterconnectionPoint interconnectionPoints optional,
    record of ClosedSection closedSections optional,
    EfcAutonomousContextData.VersionAndValidity tollContextLayoutVersion,
    AuthenticatorEfc tollContextAuthenticator optional
  }

  type record TollOperator {
    EfcDsrcApplication.Provider tollOperatorId,
    ASNAUX.UTF8String tollOperatorDescription optional
  }

  type EfcAutonomousCharging.ChargeObjectId DSRCChargeObjectId; 

  type record InternalPoint {
    EfcAutonomousCharging.ChargeObjectId pointId,
    ASNAUX.UTF8String pointDescription optional,
    TollOperator tollOperator optional
  }

  type record InterconnectionPoint {
    EfcAutonomousCharging.ChargeObjectId pointId,
    ASNAUX.UTF8String pointDescription optional
  }

  type record ClosedSection {
    record of ClosedSegment segments,
    TollOperator operatedBy optional,
    record of EfcAutonomousContextData.TimeClassId applicableTimeClasses optional,
    EfcAutonomousContextData.LocationClassId locationClass
  }

  type record ClosedSegment {
    SegmentId segmentId,
    LimitOfSegment startOfSegment,
    LimitOfSegment endOfSegment,
    EfcAutonomousContextData.ChargeDistance chargeDistance,
    EfcAutonomousCharging.Distance realDistance optional
  }

  type Int4 SegmentId; 

  type union LimitOfSegment {
    record of SegmentId segments,
    union {
      EfcAutonomousCharging.ChargeObjectId dSRCChargeObjectId,
      EfcAutonomousCharging.ChargeObjectId interconnectionPoint,
      EfcAutonomousCharging.ChargeObjectId internalPoint
    } point
  }

  type record TollDefinition {
    record of record {
      record {
        DSRCChargeObjectId entryDSRCChargeObject,
        InternalPathId internalPathId,
        DSRCChargeObjectId exitDSRCChargeObject
      } tollPath,
      EfcAutonomousContextData.TariffClassId tariffClassId,
      ExtendedPaymentAmount fee
    } tollTable,
    EfcAutonomousContextData.VersionAndValidity tollDefinitionVersion,
    AuthenticatorEfc tollDefinitionAuthenticator optional
  }

  type record PathDefinition {
    record of record {
      PathComposition pathComposition,
      ASNAUX.UTF8String pathDescription optional
    } pathTable,
    EfcAutonomousContextData.VersionAndValidity pathDefinitionVersion,
    AuthenticatorEfc pathDefinitionAuthenticator optional
  }

  type record PathComposition {
    DSRCChargeObjectId entryDSRCChargeObject,
    record {
      InternalPathId internalPathId,
      record of DSRCChargeObjectId dSRCChargeObjects optional
    } internalPath,
    DSRCChargeObjectId exitDSRCChargeObject
  }

  type EfcAutonomousCharging.ChargeObjectId InternalPathId; 

  type record ProvideUserDetailsADU {
    UserId originaluserIdRequest,
    UserId userId,
    UserStatus statusFlag optional,
    record of UserParameterResponse listOfUserParameters optional
  }

  type record ContractIssuerListADU {
    EfcDsrcApplication.EFC_ContextMark efcContextMark,
    Int2 equipmentClass,
    integer manufacturerID (0 .. 65535),
    ASNAUX.UTF8String uniquePartOfPAN,
    ASNAUX.UTF8String typeOfEFCApplication,
    ASNAUX.UTF8String securityLevel,
    Int2 acCrKeyReference,
    integer authKeyReference,
    ASNAUX.GeneralizedTime validFrom
  }

  type record PaymentAnnouncementADU {
    integer paymentAnnouncementID,
    ASNAUX.GeneralizedTime dueDate,
    ExtendedPaymentAmount totalamount,
    PaymentStatus paymentStatus,
    integer numberOfItems optional,
    record of record {
      union {
        record of BillingDetailsId billingDetailsList,
        record of TollDeclarationId tollDeclarationList,
        record of TollEventId tollEventList
      } referenceDetail,
      ExtendedPaymentAmount amount,
      integer paymentMeansType (0 .. 255) optional,
      ASNAUX.GeneralizedTime valueDate optional,
      ExtendedPaymentAmount interestAmount optional
    } referenceDetailsList optional,
    octetstring attachment optional,
    ActionCode actionCode optional,
    ASNAUX.UTF8String paymentReference optional
  }

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_cash_ := 0; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_prepaid_ := 1; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_ec_creditcard_ := 2; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_fleet_card_ := 3; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_non_euro_currency_cash_ := 4; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_non_euro_currency_prepaid_ := 5; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_non_euro_currency_ec_creditcard_ := 6; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_non_euro_currency_fleet_card_ := 7; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_advance_payment_provider_ := 8; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_debitcard_ := 9; 

  const integer PaymentAnnouncementADU_referenceDetailsList__COMP_paymentMeansType_non_euro_currency_creditcard_ := 10; 

  type integer PaymentStatus (0 .. 255); 

  const integer PaymentStatus_paid_ := 0; 

  const integer PaymentStatus_new_overdue_ := 1; 

  const integer PaymentStatus_not_yet_due_ := 2; 

  const integer PaymentStatus_reserved_ := 3; 

  const integer PaymentStatus_due_ := 4; 

  const integer PaymentStatus_reserved2_ := 5; 

  const integer PaymentStatus_reserved3_ := 6; 

  type record DSRCChargeObject {
    EfcAutonomousCharging.ChargeObjectId chargeObjectId,
    ASNAUX.UTF8String chargeObjectDescription,
    ChargeObjectType chargeObjectType,
    EfcDsrcApplication.Provider tollContext,
    ASNAUX.GeneralizedTime chargeObjectValidityStart optional,
    ASNAUX.GeneralizedTime chargeObjectValidityEnd optional
  }

  type integer ChargeObjectType (0 .. 255); 

  const integer ChargeObjectType_entry_ := 1; 

  const integer ChargeObjectType_exit_ := 2; 

  const integer ChargeObjectType_entryAndExit_ := 3; 

  const integer ChargeObjectType_inItinere_ := 4; 

  type record ProvideUserIdListADU {
    UserIdRequestType originalUserIdRequestType,
    UserId originalUserId optional,
    record of UserId userIdList optional
  }

  type integer UserIdRequestType (0 .. 255); 

  const integer UserIdRequestType_allUserIdsToGivenCustomer_ := 0; 

  type record BillingDetailsId {
    EfcDsrcApplication.Provider issuerId,
    integer billingDetailsNum,
    ASNAUX.GeneralizedTime dateOfService optional
  }

  type integer ModeOfOperation (0 .. 255); 

  const integer ModeOfOperation_normal_ := 1; 

  const integer ModeOfOperation_degraded_ := 2; 

  const integer ModeOfOperation_virtual_ := 3; 

  type record Section {
    EfcDsrcApplication.Provider tollContext optional,
    EfcAutonomousCharging.ChargeObjectId chargeObjectId,
    ASNAUX.UTF8String chargeObjectName optional,
    TollEventId tollEventId optional,
    ASNAUX.GeneralizedTime tollEventTime optional,
    ModeOfOperation modeOfOperation optional
  }

  type integer FeeQualifier (0 .. 255); 

  const integer FeeQualifier_standardCharge_ := 0; 

  const integer FeeQualifier_tollSubstitute_ := 1; 

  const integer FeeQualifier_belatedPayment_ := 2; 

  const integer FeeQualifier_reimbursement_ := 3; 

  type record ExternalCosts {
    ExtendedPaymentAmount externalCostsAIR optional,
    ExtendedPaymentAmount externalCostsNOISE optional
  }

  type ASNAUX.UTF8String LanguageID; 

  type integer DiscountQualifier (0 .. 255); 

  const integer DiscountQualifier_noDiscount_ := 0; 

  const integer DiscountQualifier_timeDiscount_ := 1; 

  const integer DiscountQualifier_vehicleDiscount_ := 2; 

  const integer DiscountQualifier_tripDiscount_ := 3; 

  const integer DiscountQualifier_userDiscount_ := 4; 

  type integer AduType; 

  const AduType AduType_requestADU_ := 1; 

  const AduType AduType_ackADU_ := 2; 

  const AduType AduType_trustObjectADU_ := 3; 

  const AduType AduType_efcContextDataADU_ := 4; 

  const AduType AduType_exceptionListADU_ := 5; 

  const AduType AduType_reportAbnormalOBEADU_ := 6; 

  const AduType AduType_tollDeclarationADU_ := 7; 

  const AduType AduType_billingDetailsADU_ := 8; 

  const AduType AduType_paymentClaimADU_ := 9; 

  const AduType AduType_reportQAADU_ := 10; 

  const AduType AduType_statusADU_ := 11; 

  const AduType AduType_provideUserDetailsADU_ := 12; 

  const AduType AduType_reportCCCEventADU_ := 13; 

  const AduType AduType_provideUserIdListADU_ := 14; 

  const AduType AduType_paymentAnnouncementADU_ := 15; 

  const AduType AduType_contractIssuerListADU_ := 16; 

  type integer GeneralStatusCode (0 .. 255); 

  const integer GeneralStatusCode_notReadyToReceive_ := 1; 

  const integer GeneralStatusCode_readyToReceive_ := 2; 

  type integer ApduReasonCode (0 .. 255); 

  const integer ApduReasonCode_obsoleteAPDU_ := 1; 

  const integer ApduReasonCode_apduOK_ := 2; 

  const integer ApduReasonCode_apduNotOK_ := 3; 

  type integer AduReasonCode; 

  const AduReasonCode AduReasonCode_invalidADU_ := 0; 

  const AduReasonCode AduReasonCode_notSupportedADU_ := 1; 

  const AduReasonCode AduReasonCode_trustObjectExpired_ := 100; 

  const AduReasonCode AduReasonCode_trustObjectUnreadable_ := 101; 

  const AduReasonCode AduReasonCode_contextDataChargeObjectIdRejected_ := 200; 

  const AduReasonCode AduReasonCode_contextDataChargeObjectDescriptionRejected_ := 201; 

  const AduReasonCode AduReasonCode_contextDataSystemTypeRejected_ := 202; 

  const AduReasonCode AduReasonCode_contextDataChargeObjectTypeRejected_ := 203; 

  const AduReasonCode AduReasonCode_contextDataTollChargerRejected_ := 204; 

  const AduReasonCode AduReasonCode_contextDataChargeObjectValidityStartRejected_ := 205; 

  const AduReasonCode AduReasonCode_contextDataChargeObjectValidityEndRejected_ := 206; 

  const AduReasonCode AduReasonCode_exceptionListsVersionRejected_ := 400; 

  const AduReasonCode AduReasonCode_exceptionListsTypeRejected_ := 401; 

  const AduReasonCode AduReasonCode_exceptionListsUserIdRejected_ := 402; 

  const AduReasonCode AduReasonCode_exceptionListsBlockTypeRejected_ := 403; 

  const AduReasonCode AduReasonCode_exceptionListsReasonCodeRejected_ := 404; 

  const AduReasonCode AduReasonCode_exceptionListsDateAndTimeRejected_ := 405; 

  const AduReasonCode AduReasonCode_abnormalObeUserIdRejected_ := 500; 

  const AduReasonCode AduReasonCode_abnormalObeDateAndTimeRejected_ := 501; 

  const AduReasonCode AduReasonCode_abnormalObeReasonCodeRejected_ := 502; 

  const AduReasonCode AduReasonCode_billingDetailsIssuerIdRejected_ := 700; 

  const AduReasonCode AduReasonCode_billingDetailsClaimIdRejected_ := 701; 

  const AduReasonCode AduReasonCode_billingDetailsTollChargerIdRejected_ := 702; 

  const AduReasonCode AduReasonCode_billingDetailsContextIdRejected_ := 703; 

  const AduReasonCode AduReasonCode_billingDetailsUserIdRejected_ := 704; 

  const AduReasonCode AduReasonCode_billingDetailsPeriodRejected_ := 705; 

  const AduReasonCode AduReasonCode_billingDetailsAmountRejected_ := 706; 

  const AduReasonCode AduReasonCode_billingDetailsContextNameRejected_ := 707; 

  const AduReasonCode AduReasonCode_billingDetailsAppliedUserClassRejected_ := 708; 

  const AduReasonCode AduReasonCode_billingDetailsDeclaredVehicleClassRejected_ := 709; 

  const AduReasonCode AduReasonCode_billingDetailsAppliedTimeClassRejected_ := 710; 

  const AduReasonCode AduReasonCode_billingDetailsEntranceTimeRejected_ := 711; 

  const AduReasonCode AduReasonCode_billingDetailsEntranceChargeObjectRejected_ := 712; 

  const AduReasonCode AduReasonCode_billingDetailsIntermediateSectionRejected_ := 713; 

  const AduReasonCode AduReasonCode_billingDetailsExitChargeObjectRejected_ := 714; 

  const AduReasonCode AduReasonCode_billingDetailsExitTimeRejected_ := 715; 

  const AduReasonCode AduReasonCode_claimRejectedByTSP_ := 800; 

  const AduReasonCode AduReasonCode_claimApprovedByTSP_ := 801; 

  const AduReasonCode AduReasonCode_paymentClaimIdRejected_ := 802; 

  const AduReasonCode AduReasonCode_paymentClaimStartDateTimeRejected_ := 803; 

  const AduReasonCode AduReasonCode_paymentClaimEndDateTimeRejected_ := 804; 

  const AduReasonCode AduReasonCode_paymentClaimUserIdRejected_ := 805; 

  const AduReasonCode AduReasonCode_paymentClaimAmountRejected_ := 806; 

  const AduReasonCode AduReasonCode_paymentClaimStatusRejected_ := 807; 

  const AduReasonCode AduReasonCode_paymentClaimTypeOfFeeRejected_ := 808; 

  const AduReasonCode AduReasonCode_paymentClaimRelatedApduIdRejected_ := 809; 

  const AduReasonCode AduReasonCode_reportQAAccepted_ := 1200; 

  const AduReasonCode AduReasonCode_reportQANotAccepted_ := 1201; 

  const AduReasonCode AduReasonCode_paymentGuaranteeAccepted_ := 1202; 

  const AduReasonCode AduReasonCode_smCCBackEndDataCheckingThresholdExceeded_ := 1203; 

  type record Amount {
    EfcDsrcApplication.PaymentFee netPaymentFee,
    integer vatRate
  }

  type record ImageRecord {
    record {
      RecordId imageRecordId,
      ASNAUX.GeneralizedTime imageDateTime,
      ASNAUX.UTF8String imageCameraId,
      integer imageReference optional,
      octetstring imageData optional
    } imageToBeSigned,
    AuthenticatorEfc subRecordAuthenticator optional
  }

  type record AnprRecord {
    record {
      RecordId anprRecordId,
      record of record {
        RecordId anprImage,
        RecordId contextImage
      } associatedImages,
      ASNAUX.GeneralizedTime imageDateTime,
      ASNAUX.UTF8String imageCameraId,
      record {
        octetstring anprResult length (14),
        integer anprConfidence (0 .. 100),
        octetstring secondaryAnprResult length (14) optional,
        octetstring manualResult length (14) optional,
        Int4 operatorId
      } determinedVRM,
      record {
        ASNAUX.UTF8String vehicleMake optional,
        ASNAUX.UTF8String vehicleModel optional,
        ASNAUX.UTF8String vehicleColour optional
      } vehicleDetails
    } anprToBeSigned,
    AuthenticatorEfc subRecordAuthenticator optional
  }

  type record ClassificationRecord {
    record {
      RecordId classificationRecordId,
      integer derivedLocalClass (0 .. 255),
      VehicleParameters vehicleParameters optional
    } classificationToBeSigned,
    AuthenticatorEfc subRecordAuthenticator optional
  }

  type record VehicleParameters {
    ASNAUX.GeneralizedTime dateAndTime,
    ASNAUX.UTF8String vehicleClass optional,
    Int4 vehicleLength optional,
    Int4 vehicleWidth optional,
    Int4 vehicleHeight optional,
    Int4 heightAbove1stAxle optional,
    integer vehicleAxles (0 .. 15) optional,
    integer trailerAxles (0 .. 7) optional,
    boolean trailerPresence optional
  }

  type record OperatorRecord {
    record {
      RecordId operatorRecordId,
      record {
        ASNAUX.GeneralizedTime operatorTime,
        integer operatorClass (0 .. 255) optional,
        Int4 operatorId optional,
        octetstring operatorVRM length (14) optional,
        ASNAUX.UTF8String operatorPAN optional,
        ASNAUX.UTF8String operatorOBUId optional,
        ASNAUX.UTF8String machineReadPAN optional,
        ASNAUX.UTF8String machineReadOBUId optional
      } operatorData
    } operatorToBeSigned,
    AuthenticatorEfc subRecordAuthenticator optional
  }

  type integer UserStatus (0 .. 255); 

  const integer UserStatus_noContractualRelation_ := 0; 

  const integer UserStatus_standardPrivateUserContract_ := 1; 

  const integer UserStatus_standardCommercialUserContract_ := 2; 

  const integer UserStatus_tempExceptionListed_ := 3; 

  const integer UserStatus_permanentExceptionListed_ := 4; 

  const integer UserStatus_contractClosed_ := 5; 

  const integer UserStatus_noStatus_ := 6; 

  type integer UserParameterRequest (0 .. 255); 

  const integer UserParameterRequest_userPostalAddress_ := 0; 

  const integer UserParameterRequest_contractSerialNumber_ := 1; 

  const integer UserParameterRequest_contractValidity_ := 2; 

  const integer UserParameterRequest_driverCharacteristics_ := 3; 

  const integer UserParameterRequest_eFC_ContextMark_ := 4; 

  const integer UserParameterRequest_environmentalCharacteristics_ := 5; 

  const integer UserParameterRequest_engineCharacteristics_ := 6; 

  const integer UserParameterRequest_equipmentOBUId_ := 7; 

  const integer UserParameterRequest_equipmentStatus_ := 8; 

  const integer UserParameterRequest_paymentMeans_ := 9; 

  const integer UserParameterRequest_paymentMeansBalance_ := 10; 

  const integer UserParameterRequest_paymentMeansUnit_ := 11; 

  const integer UserParameterRequest_personalAccountNumber_ := 12; 

  const integer UserParameterRequest_provider_ := 13; 

  const integer UserParameterRequest_receiptContract_ := 14; 

  const integer UserParameterRequest_validityOfContract_ := 15; 

  const integer UserParameterRequest_vehicleAuthenticator_ := 16; 

  const integer UserParameterRequest_vehicleClass_ := 17; 

  const integer UserParameterRequest_vehicleDimensions_ := 18; 

  const integer UserParameterRequest_vehicleLicencePlateNumber_ := 19; 

  const integer UserParameterRequest_vehicleIdentificationNumber_ := 20; 

  const integer UserParameterRequest_vehicleWeightLaden_ := 21; 

  const integer UserParameterRequest_vehicleWeightLimits_ := 22; 

  const integer UserParameterRequest_vehicleAxles_ := 23; 

  const integer UserParameterRequest_exhaustEmissionValues_ := 24; 

  const integer UserParameterRequest_dieselEmissionValues_ := 25; 

  const integer UserParameterRequest_extendedUserPostalAddress_ := 26; 

  const integer UserParameterRequest_preferredUserLanguage_ := 27; 

  type integer UserDetailsRequestReason (0 .. 255); 

  const integer UserDetailsRequestReason_generalInterest_ := 0; 

  const integer UserDetailsRequestReason_allowingCalculatingFee_ := 1; 

  const integer UserDetailsRequestReason_incompleteCCCreadout_ := 2; 

  const integer UserDetailsRequestReason_forwardingEnforcementTicket_ := 3; 

  type record UserParameterResponse {
    UserParameterRequest requestedUserParameter optional,
    UserParameterResponseDetails userParameterResponse optional,
    UserParameterStatus userParameterStatus optional,
    EfcAutonomousCharging.Period userInfoValidityPeriod optional
  }

  type union UserParameterResponseDetails {
    UserPostalAddress userPostalAddress,
    EfcDsrcApplication.ContractSerialNumber contractSerialNumber,
    EfcDsrcApplication.ContractValidity contractValidity,
    EfcDsrcApplication.DriverCharacteristics driverCharacteristics,
    EfcDsrcApplication.EFC_ContextMark eFC_ContextMark,
    EfcDsrcApplication.EnvironmentalCharacteristics environmentalCharacteristics,
    EfcDsrcApplication.EngineCharacteristics engineCharacteristics,
    EfcDsrcApplication.EquipmentOBUId equipmentOBUId,
    EfcDsrcApplication.EquipmentStatus equipmentStatus,
    EfcDsrcApplication.PaymentMeans paymentMeans,
    EfcDsrcApplication.PaymentMeansBalance paymentMeansBalance,
    EfcDsrcApplication.PaymentMeansUnit paymentMeansUnit,
    EfcDsrcApplication.PersonalAccountNumber personalAccountNumber,
    EfcDsrcApplication.Provider provider,
    EfcDsrcApplication.ReceiptContract receiptContract,
    EfcDsrcApplication.ValidityOfContract validityOfContract,
    EfcDsrcApplication.VehicleAuthenticator vehicleAuthenticator,
    EfcDsrcApplication.VehicleClass vehicleClass,
    EfcDsrcApplication.VehicleDimensions vehicleDimensions,
    EfcDsrcApplication.VehicleLicencePlateNumber vehicleLicencePlateNumber,
    EfcDsrcApplication.VehicleIdentificationNumber vehicleIdentificationNumber,
    EfcDsrcApplication.VehicleWeightLaden vehicleWeightLaden,
    EfcDsrcApplication.VehicleWeightLimits vehicleWeightLimits,
    EfcDsrcApplication.VehicleAxles vehicleAxles,
    EfcDsrcApplication.ExhaustEmissionValues exhaustEmissionValues,
    EfcDsrcApplication.DieselEmissionValues dieselEmissionValues,
    ExtendedUserPostalAddress extendedUserPostalAddress,
    ASNAUX.UTF8String preferredUserLanguage
  }

  type record UserPostalAddress {
    ASNAUX.UTF8String name length (1 .. 60),
    ASNAUX.UTF8String company length (1 .. 60) optional,
    ASNAUX.UTF8String street length (1 .. 60) optional,
    ASNAUX.UTF8String postcode length (6),
    ASNAUX.UTF8String town length (1 .. 60) optional,
    ASNAUX.UTF8String country length (1 .. 40),
    ASNAUX.UTF8String companyTaxIdentifier optional
  }

  type record ExtendedUserPostalAddress {
    ASNAUX.UTF8String addresseeRoleDescriptor length (1 .. 10) optional,
    ASNAUX.UTF8String organisationName length (1 .. 256) optional,
    ASNAUX.UTF8String organisationUnit length (1 .. 256) optional,
    ASNAUX.UTF8String function_ length (1 .. 256) optional,
    ASNAUX.UTF8String formOfAddress length (1 .. 50) optional,
    ASNAUX.UTF8String qualification length (1 .. 50) optional,
    ASNAUX.UTF8String surname length (1 .. 256) optional,
    ASNAUX.UTF8String givenName length (1 .. 256) optional,
    ASNAUX.UTF8String deliveryServicePoint length (1 .. 256) optional,
    ASNAUX.UTF8String thoroughfare length (1 .. 256) optional,
    ASNAUX.UTF8String postCode length (1 .. 10) optional,
    ASNAUX.UTF8String town length (1 .. 256) optional,
    ASNAUX.UTF8String region length (1 .. 256) optional,
    ASNAUX.UTF8String country length (1 .. 256) optional,
    ASNAUX.UTF8String phoneInternationalDiallingCode length (1 .. 5) optional,
    ASNAUX.UTF8String phoneDiallingCode length (1 .. 10) optional,
    ASNAUX.UTF8String phoneSubscriberNumber length (1 .. 20) optional,
    ASNAUX.UTF8String mobileInternationalDiallingCode length (1 .. 5) optional,
    ASNAUX.UTF8String mobileDiallingCode length (1 .. 10) optional,
    ASNAUX.UTF8String mobileSubscriberNumber length (1 .. 20) optional,
    ASNAUX.UTF8String faxInternationalDiallingCode length (1 .. 5) optional,
    ASNAUX.UTF8String faxDiallingCode length (1 .. 10) optional,
    ASNAUX.UTF8String faxSubscriberNumber length (1 .. 20) optional,
    ASNAUX.UTF8String email length (1 .. 256) optional
  }

  type integer UserParameterStatus (0 .. 255); 

  const integer UserParameterStatus_userParameterAvailable_ := 0; 

  const integer UserParameterStatus_notAvailable_ := 1; 

  const integer UserParameterStatus_localPrivacyRules_ := 2; 

  const integer UserParameterStatus_missingContractualAgreement_ := 3; 

  type integer InitiatedAction (0 .. 255); 

  const integer InitiatedAction_vehicleWasStopped_ := 0; 

  const integer InitiatedAction_violationCaseIndicated_ := 1; 

  const integer InitiatedAction_evidenceDataGathered_ := 2; 

  const integer InitiatedAction_putOnTSPExceptionList_ := 3; 

  const integer InitiatedAction_putOnTCExceptionList_ := 4; 

  type record Location {
    EfcAutonomousContextData.Point positionOfLocation optional,
    record {
      LocationProviderId locationProviderId,
      integer locationID
    } location optional
  }

  type integer LocationProviderId (0 .. 255); 

  const integer LocationProviderId_galileo_ := 1; 

  const integer LocationProviderId_gps_ := 2; 

  const integer LocationProviderId_glonass_ := 3; 

  type record DsrcRSEData {
    integer transactionId,
    ASNAUX.GeneralizedTime rSEDateTime,
    EfcDsrcApplication.ResultOp transactionResult,
    TransactionStatus transactionStatus,
    record {
      EfcDsrcApplication.Provider originTSP,
      ExceptionListVersion matchVersion,
      ExceptionListType matchType,
      ExceptionListEntry matchEntry optional
    } exceptionListMatch optional,
    EfcAutonomousContextData.TariffClassId tariffID optional,
    Amount fee optional,
    FeeQualifier feeQualifier optional,
    integer tollStationID optional,
    EfcDsrcApplication.SessionLocation laneDirectionNumber optional,
    EfcDsrcApplication.StationType typeOfTransaction optional,
    EfcDsrcGeneric.ObeConfiguration vstData optional
  }

  type record of record {
    bitstring attrOrigEncoding,
    octetstring rndRSE,
    integer keyRef,
    octetstring authCode,
    AuthCheckResult result
  } DsrcAttrAuth; 

  type integer TransactionStatus (0 .. 255); 

  const integer TransactionStatus_completed_ := 1; 

  const integer TransactionStatus_abortedAfterFirstPhase_ := 2; 

  const integer TransactionStatus_abortedAfterSecondPhase_ := 3; 

  type integer AuthCheckResult (0 .. 255); 

  const integer AuthCheckResult_notChecked_ := 1; 

  const integer AuthCheckResult_ok_ := 2; 

  const integer AuthCheckResult_nok_ := 3; 

  type integer TrustObjectTypes (0 .. 255); 

  const integer TrustObjectTypes_certificate_ := 0; 

  const integer TrustObjectTypes_symmetricKey_ := 1; 

  const integer TrustObjectTypes_crl_ := 2; 

  const integer TrustObjectTypes_cdp_ := 3; 

  const integer TrustObjectTypes_ocsp_ := 4; 

  const integer TrustObjectTypes_encryptedSymmetricKey_ := 5; 

  const integer TrustObjectTypes_publicKey_ := 6; 

  const integer TrustObjectTypes_otherTrustObject_ := 7; 

  type integer TrustObjectPurposes (0 .. 255); 

  const integer TrustObjectPurposes_trustObjects_ := 0; 

  const integer TrustObjectPurposes_dSRCCharging_ := 1; 

  const integer TrustObjectPurposes_dSRCAC_ := 2; 

  const integer TrustObjectPurposes_oBEInterrogation_ := 3; 

  const integer TrustObjectPurposes_oBEInterrogationAC_ := 4; 

  const integer TrustObjectPurposes_sIGExceptionList_ := 5; 

  const integer TrustObjectPurposes_sIGContextData_ := 6; 

  const integer TrustObjectPurposes_sIGBillingDetails_ := 7; 

  const integer TrustObjectPurposes_sIGFiscalObjects_ := 8; 

  const integer TrustObjectPurposes_sIGCommunication_ := 9; 

  const integer TrustObjectPurposes_eNCCommunication_ := 10; 

  const integer TrustObjectPurposes_dSRCKeyEncryption_ := 11; 

  const integer TrustObjectPurposes_secChannelEstablishment_ := 12; 

  const integer TrustObjectPurposes_certIssuing_ := 13; 

  const integer TrustObjectPurposes_sIGUserCommunication_ := 14; 

  const integer TrustObjectPurposes_certRevocationListing_ := 15; 

  const integer TrustObjectPurposes_siGChargeReport_ := 16; 

  type integer TrustObjectStatus (0 .. 255); 

  const integer TrustObjectStatus_valid_ := 0; 

  const integer TrustObjectStatus_expired_ := 1; 

  const integer TrustObjectStatus_revoked_ := 2; 

  type integer QualityParameterStatus (0 .. 255); 

  const integer QualityParameterStatus_accordingToAgreedMeasureMethodology_ := 0; 

  const integer QualityParameterStatus_measuredAsShortTermSample_ := 1; 

  const integer QualityParameterStatus_longTermAverage_ := 2; 

  const integer QualityParameterStatus_singleWorstValue_ := 3; 

  const integer QualityParameterStatus_trendWarning_ := 4; 

  const integer QualityParameterStatus_initiateActions_ := 5; 

  const integer QualityParameterStatus_escalationWarning_ := 6; 

  const integer QualityParameterStatus_escalationWasActivated_ := 7; 

  type integer ExceptionListType (0 .. 255); 

  const integer ExceptionListType_blackList_ := 1; 

  const integer ExceptionListType_whiteList_ := 2; 

  const integer ExceptionListType_discountedList_ := 3; 

  const integer ExceptionListType_otherListType2_ := 4; 

  const integer ExceptionListType_otherListType3_ := 5; 

  const integer ExceptionListType_otherListType4_ := 6; 

  const integer ExceptionListType_otherListType5_ := 7; 

  const integer ExceptionListType_otherListType6_ := 8; 

  type record ExceptionListEntry {
    UserId userId,
    ExceptionListStatusType statusType,
    ExceptionListReasonType reasonCode,
    ASNAUX.GeneralizedTime entryValidityStart optional,
    ASNAUX.GeneralizedTime entryValidityEnd optional,
    VehicleParameters vehicleParameters optional,
    ExceptionListActionType actionRequested optional,
    EfcDsrcApplication.EFC_ContextMark efcContextMark optional,
    ASNAUX.UTF8String vatId optional
  }

  type integer ExceptionListStatusType (0 .. 255); 

  const integer ExceptionListStatusType_allApplications_ := 0; 

  const integer ExceptionListStatusType_locallyBlocked_ := 1; 

  const integer ExceptionListStatusType_blockedForSchemesRequiringOdometer_ := 2; 

  const integer ExceptionListStatusType_noLimits_ := 3; 

  type integer ExceptionListReasonType (0 .. 255); 

  const integer ExceptionListReasonType_notToBeDisclosed_ := 0; 

  const integer ExceptionListReasonType_obeDeactivated_ := 1; 

  const integer ExceptionListReasonType_obeIsStolen_ := 2; 

  const integer ExceptionListReasonType_temporaryTechnicalProblem_ := 3; 

  const integer ExceptionListReasonType_suspicionOnTechnicalManipulation_ := 4; 

  const integer ExceptionListReasonType_latePayment_ := 5; 

  const integer ExceptionListReasonType_noPayment_ := 6; 

  const integer ExceptionListReasonType_contractHolderInsolvent_ := 7; 

  const integer ExceptionListReasonType_whiteListedUser_ := 8; 

  const integer ExceptionListReasonType_suOptOut_ := 9; 

  const integer ExceptionListReasonType_suTemporalSuspension_ := 10; 

  const integer ExceptionListReasonType_contractClosedByTSP_ := 11; 

  const integer ExceptionListReasonType_contractClosedBySU_ := 12; 

  const integer ExceptionListReasonType_obeNotValid_ := 13; 

  const integer ExceptionListReasonType_obeIsLost_ := 14; 

  const integer ExceptionListReasonType_obeNonExistent_ := 15; 

  const integer ExceptionListReasonType_obeOnStock_ := 16; 

  const integer ExceptionListReasonType_obeReturnedEndOfContract_ := 17; 

  const integer ExceptionListReasonType_obeReturnedMalfunction_ := 18; 

  type integer ExceptionListActionType (0 .. 255); 

  const integer ExceptionListActionType_rejectOBE_ := 1; 

  const integer ExceptionListActionType_invalidateOBE_ := 2; 

  const integer ExceptionListActionType_acceptOBE_ := 3; 

  const integer ExceptionListActionType_removeOBE_ := 4; 

  type integer AbnormalOBEReasonCode (0 .. 255); 

  const integer AbnormalOBEReasonCode_reasonNotToBeDisclosed_ := 0; 

  const integer AbnormalOBEReasonCode_obeIsDefect_ := 1; 

  const integer AbnormalOBEReasonCode_obeIsNotWorkingProperly_ := 2; 

  const integer AbnormalOBEReasonCode_userShowsFraudBehaviour_ := 3; 

  const integer AbnormalOBEReasonCode_userShowsViolatingBehaviour_ := 4; 

  type integer PaymentClaimStatus (0 .. 255); 

  const integer PaymentClaimStatus_firstVersion_ := 0; 

  const integer PaymentClaimStatus_amendedVersion_ := 1; 

  type integer TypeOfFee (0 .. 255); 

  const integer TypeOfFee_toll_ := 0; 

  const integer TypeOfFee_discount_ := 1; 

  const integer TypeOfFee_creditnote_ := 2; 

  const integer TypeOfFee_penalty_ := 3; 

  const integer TypeOfFee_processingFee_ := 4; 

  type record ChargeLocation {
    ASNAUX.UTF8String description optional,
    LocationOfStation chargePointId,
    EfcAutonomousContextData.AbsolutePointCoordinates chargePoint optional,
    EfcDsrcApplication.SessionLocation cpLocation,
    SessionType eventType
  }

  type integer LocationOfStation; 

  type integer SessionType (0 .. 255); 

  const integer SessionType_accessClosedSystem_ := 0; 

  const integer SessionType_exitClosedSystem_ := 1; 

  const integer SessionType_openSystem_ := 2; 

  const integer SessionType_checkPoint_ := 3; 

  type record FeeModifiers {
    record of ExemptedVehicleClasses typeOfUsage optional,
    record of record {
      TimeInterval timeInterval optional,
      record of ForVehicleClass forVehicleClasses optional
    } volumeDiscounts optional
  }

  type integer ExemptedVehicleClasses (0 .. 255); 

  const integer ExemptedVehicleClasses_handicappedPeople_ := 1; 

  const integer ExemptedVehicleClasses_military_ := 2; 

  const integer ExemptedVehicleClasses_police_ := 3; 

  const integer ExemptedVehicleClasses_roadMaintenance_ := 4; 

  const integer ExemptedVehicleClasses_circusTruck_ := 5; 

  const integer ExemptedVehicleClasses_mobileShopTruck_ := 6; 

  const integer ExemptedVehicleClasses_truckCarryingMilk_ := 7; 

  const integer ExemptedVehicleClasses_truckCarryingTimber_ := 8; 

  const integer ExemptedVehicleClasses_publicTransportBus_ := 9; 

  type integer TimeInterval (0 .. 255); 

  const integer TimeInterval_day_ := 1; 

  const integer TimeInterval_week_ := 2; 

  const integer TimeInterval_month_ := 3; 

  const integer TimeInterval_year_ := 4; 

  type record ForVehicleClass {
    integer vehicleClass,
    record {
      ExtendedPaymentAmount amount,
      TimeInterval timeInterval optional
    } activationFee optional,
    ExtendedPaymentAmount minAmountOfFee optional,
    record {
      EfcAutonomousCharging.ChargeObjectId fromChargeObject,
      EfcAutonomousCharging.ChargeObjectId toChargeObject,
      boolean perTimeClass optional,
      boolean pervehicleClass optional,
      record of NumberOfTripsDiscount numberOfTripsDiscounts
    } numberOfTrips optional
  }

  type record NumberOfTripsDiscount {
    integer minNumberOfTrips,
    integer discount,
    boolean onlyForAmountAboveLimit optional
  }

  type integer ActionCode (0 .. 255); 

  const integer ActionCode_send_ := 0; 

  const integer ActionCode_revoke_ := 1; 

  const integer ActionCode_credit_ := 2; 

  const integer ActionCode_adjust_ := 3; 

  const integer ActionCode_resend_ := 4; 

  type record UserId {
    EfcDsrcApplication.PersonalAccountNumber pan optional,
    EfcDsrcApplication.ContractSerialNumber contractSerialNumber optional,
    EfcDsrcApplication.LPN licencePlateNumber optional,
    EfcAutonomousCharging.ObeId obeID optional
  }

  type record RecordId {
    EfcDsrcApplication.Provider providerId optional,
    RecordType recordType optional,
    integer uniqueId
  }

  type integer RecordType (0 .. 255); 

  const integer RecordType_cCCRecord_ := 1; 

  const integer RecordType_imageRecord_ := 2; 

  const integer RecordType_anprRecord_ := 3; 

  const integer RecordType_classificationRecord_ := 4; 

  const integer RecordType_operatorRecord_ := 5; 

  const integer RecordType_dsrcData_ := 6; 

  type record TollDeclarationId {
    EfcDsrcApplication.Provider issuerId,
    integer declarationId
  }

  type record ExtendedPaymentAmount {
    Int8Signed paymentFeeAmount,
    EfcDsrcApplication.PayUnit paymentFeeUnit,
    integer vatRate (0 .. 10000) optional
  }

  type record TollEventId {
    union {
      integer chargeReportCounter (0 .. 4294967295),
      integer transactionCounter (0 .. 4095)
    } counterType,
    Int4 usageStatementID
  }

  type union TrustObjectCode {
    CertificateObject certificate,
    PublicKeyObject publicKey,
    DsrcKeyObject dsrcMasterKeys,
    MacKeyObject macMasterKey,
    DsrcKeyRef dsrcKeyRef,
    GenericTrustObject otherTrustObject
  }

  type record CertificateObject {
    CertificateType certificateType,
    octetstring certificate
  }

  type integer CertificateType (0 .. 255); 

  const integer CertificateType_certTcHTTPS_ := 0; 

  const integer CertificateType_certTcMAIL_ := 1; 

  const integer CertificateType_certTcNSIG_ := 2; 

  const integer CertificateType_certTcTA_ := 3; 

  const integer CertificateType_certTcpRoot_ := 4; 

  const integer CertificateType_certTspHTTPS_ := 5; 

  const integer CertificateType_certTspMAIL_ := 6; 

  const integer CertificateType_certTspNSIG_ := 7; 

  const integer CertificateType_certTspTA_ := 8; 

  const integer CertificateType_certTspRoot_ := 9; 

  const integer CertificateType_certTspCR_ := 10; 

  type record PublicKeyObject {
    PublicKeyType publicKeyType,
    integer serialNumber,
    EfcDsrcApplication.Provider issuer,
    AuthenticationFramework.AlgorithmIdentifier algorithmIdentifier,
    octetstring publicKey
  }

  type integer PublicKeyType (0 .. 255); 

  const integer PublicKeyType_kpupTcSignature_ := 0; 

  const integer PublicKeyType_kpupTcEncrypt_ := 1; 

  const integer PublicKeyType_kpupTspSignature_ := 2; 

  const integer PublicKeyType_kpupTspEncrypt_ := 3; 

  type record DsrcKeyObject {
    EncryptionKeyId encryptionKeyId,
    ASNAUX.UTCTime timestamp,
    record of record {
      EFCCM eFCCM,
      EncrKey key
    } dsrcKeys
  }

  type union EncryptionKeyId {
    record {
      AuthenticationFramework.CertificateSerialNumber serialNumber,
      AuthenticationFramework.Name issuer
    } certificate,
    record {
      integer serialNumber,
      EfcDsrcApplication.Provider issuer
    } publicKey
  }

  type record MacKeyObject {
    AuthenticationFramework.CertificateSerialNumber serialNumber,
    AuthenticationFramework.Name issuer,
    ASNAUX.UTCTime timestamp,
    AuthenticationFramework.AlgorithmIdentifier algorithmIdentifier,
    integer masterKeyRef,
    octetstring encrKey,
    octetstring kVC length (3)
  }

  type record DsrcKeyRef {
    EfcDsrcApplication.EFC_ContextMark eFCContextMark,
    integer keyRef (0 .. 255),
    ReferenceType referenceType
  }

  type integer ReferenceType (0 .. 255); 

  const integer ReferenceType_cCCNonRepKeyRef_ := 0; 

  const integer ReferenceType_cCCAuthenticationKeyRef_ := 1; 

  const integer ReferenceType_lACAuthenticationKeyRef_ := 2; 

  type record GenericTrustObject {
    TrustObjectTypes typeOfTrustObject,
    octetstring genericTrustObject
  }

  type record EFCCM {
    EfcDsrcApplication.EFC_ContextMark eFCCM,
    octetstring bitmask length (3)
  }

  type record EncrKey {
    KeyType keyType,
    integer keyRef,
    octetstring encrKey,
    octetstring kVC length (3),
    ASNAUX.PrintableString keyDescription optional
  }

  type record KeyType {
    union {
      objid a,
      ASNAUX.UTF8String b
    } normativeReference optional,
    KeyUsage keyUsage
  }

  type integer KeyUsage; 

  const KeyUsage KeyUsage_authentication_ := 0; 

  const KeyUsage KeyUsage_accessCredentials_ := 1; 

  const KeyUsage KeyUsage_encryption_ := 3; 

  const KeyUsage KeyUsage_otherUsage_ := 4; 

  type record KeySet {
    AuthenticationFramework.CertificateSerialNumber serialNumber,
    AuthenticationFramework.Name issuer,
    ASNAUX.UTCTime timestamp,
    record of EFCCM eFCCMs,
    record of EncrKey keys
  }

  type integer Int8Signed (-562949953421312 .. 562949953421311); 

  type integer NumberOfADUStruct; 

  type record ApduAuthenticator {
    AuthenticatorEfc authenticatorEfc,
    AuthenticatorEfc ackAuthenticatorEfc optional
  }

  type record AuthenticatorEfc {
    TbsAuthenticatorEfc tbsAuthenticatorEfc,
    AuthenticationFramework.AlgorithmIdentifier signatureAlgorithm optional,
    octetstring signatureValue
  }

  type record TbsAuthenticatorEfc {
    integer version optional,
    AuthenticationFramework.AlgorithmIdentifier signatureAlgorithm,
    AuthenticationFramework.Name issuer,
    AuthenticationFramework.CertificateSerialNumber serialNumber,
    ApduContentDigest apduContentDigest,
    ASNAUX.GeneralizedTime signatureDate,
    record of AuthenticationFramework.Certificate certificates optional,
    ExtendedSecurityServices_2006.SigningCertificateV2 signingCertificate optional
  }

  type record ApduContentDigest {
    AuthenticationFramework.AlgorithmIdentifier hashAlgorithm,
    octetstring hashedMessageContent
  }

  type integer ApduIdentifier; 

  type integer ExceptionListVersion; 

  type integer Int4 (0 .. 65535); 

  type integer Int2 (0 .. 32767); 
}
