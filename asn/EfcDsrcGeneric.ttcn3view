/*
 * ----------------------------------------------------------------------------
 *  This file is automatically generated using TTworkbench Language Support ASN.1 Parser
 *  PLEASE DO NOT EDIT! The file will be overwritten when the input file changes.
 *
 *  Source:    EfcDsrcGeneric.asn
 *  Generator: TTworkbench ASN.1 Parser 1.1.14.201606151123
 *  Date:      7/6/17 9:35 AM
 *
 * ----------------------------------------------------------------------------
 *  The ASN.1 to TTCN-3 is a proprietary mapping based on the ES 201 873-7 ETSI standard.
 *  Details about the used mapping can be found in the TTworkbench documentation.
 *
 *  TTworkbench is a product of Testing Technologies.
 *  http://www.testingtech.com
 *
 *  TESTING TECHNOLOGIES DISCLAIMS ALL WARRANTIES WITH REGARD TO THIS
 *  SOFTWARE. IN NO EVENT SHALL TESTING TECHNOLOGIES BE LIABLE FOR ANY
 *  SPECIAL, DIRECT, INDIRECT OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 *  WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN
 *  AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION,
 *  ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF
 *  THIS SOFTWARE.
 *
 *  THE SOFTWARE IS PROVIDED "AS IS" WITHOUT WARRANTY OF ANY KIND,
 *  EITHER EXPRESSED OR IMPLIED, INCLUDING ANY KIND OF IMPLIED OR
 *  EXPRESSED WARRANTY OF NON-INFRINGEMENT OR THE IMPLIED WARRANTIES
 *  OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.
 *
 *  (C) Copyright Testing Technologies, 2000-2017. All Rights Reserved.
 * ----------------------------------------------------------------------------
 */

module EfcDsrcGeneric language "ASN.1:1997" {
  import from ASNAUX all; 

  import from EfcDsrcApplication language "ASN.1:1997" all; 

  type integer ActionType (
    0 .. 127, 
    ?
  ); 

  type record length (
    0 .. 127, 
    ?
  ) of integer AttributeIdList; 

  type record BeaconID {
    integer manufacturerid (0 .. 65535),
    integer individualid (0 .. 134217727)
  }

  type record BroadcastPool {
    Directory directoryvalue,
    record length (
      0 .. 127, 
      ?
    ) of File content
  }

  type ASNAUX.TYPENULL FileType; 

  type record length (
    0 .. 127, 
    ?
  ) of FileName Directory; 

  type integer Dsrc_EID (
    0 .. 127, 
    ?
  ); 

  type integer DSRCApplicationEntityID (
    0 .. 31, 
    ?
  ); 

  const integer DSRCApplicationEntityID_system_ := 0; 

  const integer DSRCApplicationEntityID_electronic_fee_collection_ := 1; 

  const integer DSRCApplicationEntityID_freight_fleet_management_ := 2; 

  const integer DSRCApplicationEntityID_public_transport_ := 3; 

  const integer DSRCApplicationEntityID_traffic_traveller_information_ := 4; 

  const integer DSRCApplicationEntityID_traffic_control_ := 5; 

  const integer DSRCApplicationEntityID_parking_management_ := 6; 

  const integer DSRCApplicationEntityID_geographic_road_database_ := 7; 

  const integer DSRCApplicationEntityID_medium_range_preinformation_ := 8; 

  const integer DSRCApplicationEntityID_man_machine_interface_ := 9; 

  const integer DSRCApplicationEntityID_intersystem_interface_ := 10; 

  const integer DSRCApplicationEntityID_automatic_vehicle_identification_ := 11; 

  const integer DSRCApplicationEntityID_emergency_warning_ := 12; 

  const integer DSRCApplicationEntityID_private_ := 13; 

  const integer DSRCApplicationEntityID_multi_purpose_payment_ := 14; 

  const integer DSRCApplicationEntityID_dsrc_resource_manager_ := 15; 

  const integer DSRCApplicationEntityID_after_theft_systems_ := 16; 

  const integer DSRCApplicationEntityID_ccc_ := 20; 

  const integer DSRCApplicationEntityID_lac_ := 21; 

  type record Event_Report_Response {
    bitstring fill length (2),
    Dsrc_EID eid,
    Dsrc_EID iid optional,
    ReturnStatus ret optional
  }

  type integer EventType (
    0 .. 127, 
    ?
  ); 

  const integer EventType_release_ := 0; 

  type record length (
    0 .. 127, 
    ?
  ) of Record File; 

  type record FileName {
    Dsrc_EID aseID,
    integer fileID (
      0 .. 127, 
      ?
    )
  }

  type record Get_Request {
    bitstring fill length (1),
    Dsrc_EID eid,
    octetstring accessCredentials length (
      0 .. 127, 
      ?
    ) optional,
    Dsrc_EID iid optional,
    AttributeIdList attrIdList optional
  }

  type record ObeConfiguration {
    integer equipmentClass (0 .. 32767),
    integer manufacturerID (0 .. 65535),
    integer obeStatus (0 .. 65535) optional
  }

  type integer Profile (
    0 .. 127, 
    ?
  ); 

  const integer Profile_profile0_ := 0; 

  const integer Profile_profile1_ := 1; 

  type union Record {
    ASNAUX.VisibleString simple
  }

  type integer ReturnStatus (
    0 .. 127, 
    ?
  ); 

  const integer ReturnStatus_noError_ := 0; 

  const integer ReturnStatus_accessDenied_ := 1; 

  const integer ReturnStatus_argumentError_ := 2; 

  const integer ReturnStatus_complexityLimitation_ := 3; 

  const integer ReturnStatus_processingFailure_ := 4; 

  const integer ReturnStatus_processing_ := 5; 

  const integer ReturnStatus_chainingError_ := 6; 

  type record Set_Response {
    bitstring fill length (2),
    Dsrc_EID eid,
    Dsrc_EID iid optional,
    ReturnStatus ret optional
  }

  type integer Time (0 .. 4294967295); 
}
