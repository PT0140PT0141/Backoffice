/**
 * @author  PT0140 
 * @desc    This module provides test cases based on TS 16986 TPs
 * @see     [xxxx-1:2017]: Test suite structure and test purpose
 * @see     [xxxx-1:2016], Clause 5.2.1  Namimg conventions
 * @version $id$
 */
module Backoffice_TestCases_TSP {
    /**
     * @desc    [12855:2015]: 
     * @see     Annex A (normative)  data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    import from EfcDsrcApplication language "ASN.1:1997" all;
    import from EfcInfoExchange language "ASN.1:1997" all;
    
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parameterised_Asn1_Data TTCN-3 module is a workaround
     */
    import from Common_Parameterised_Asn1_Data all;
    import from Backoffice_Interfaces all;
    import from Backoffice_Functions all;
    import from Backoffice_Pixits all;
    import from Backoffice_Pics all;
    import from Backoffice_Templates all;
	
    /**
     /**
      * @desc    These Test Cases apply to Toll Service Provider claiming conformance to [16986:2016] and applying Test Purposes as from TS xxxxx:2018 Annex B
      * @remark  nn TCs
      */
    group Base {
         /**
          * @desc    Test subgroup objective:
          * - to test IUT with respect to the correctness of base and general functionalities that are required in many or all transaction types;
          */
     	group Valid_Behaviour {
             /**
              * @desc    TP_TSP_Base_BV_01: Verify that a TC validates correct infoExchanceAuthenticators in received APDUs and generates correct infoExchangeAuthenticators 
              * @remark  [16986:2016], Clause 6.2.2 and Table A.1/2 
              */
             testcase TP_TSP_Base_BV_01() runs on IutComp system TestAdapter {
                 
             } // TP_TSP_Base_BV_01
        } // End of group Valid_Behaviour
         
        group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour
        
    } // End of group Base
    
    group LISTOFUSERS {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour
        
    } // End of group LISTOFUSERS

    group USERDETAILS {
    
          group Valid_Behaviour {

             testcase TP_TSP_USERDETAILS_BV_01() runs on IutComp system TestAdapter {
             
                  /**
                  * @desc    TP_TSP_USERDETAILS_BV_01: Verify that the TSP correctly receives an APDU containing valid RequestADUs and provides valid ProvideUserDetailsADUs 
                  * @remark  [16986:2016], Clause 6.4 and Table A.1/2 AND Table A.7/1  
                  */
                  
                 // Local variables
                var infoExchangeContent v_infoExchangeContent;
//              var userDetails v_userDetails;
				var integer v_numStruct;
				var boolean v_MatchResult;
				var ApduIdentifier v_receivedAPDUIdentifier;
                    
                 // Repetitions
                 // insert loop statement in case multiple APDUs are sent according to TP
                   
                 // Preamble - Initial Conditions
//                 f_Backoffice_Preamble();
                 // Front End shall initially receive a Request
                 // named as Transaction sequence #1
//                 f_SendAPDU(m_user_Details_Request);
    
                 // Preamble done
    
                 // Test body start
//                 t_UserDetails_Time1.start;
                 // Transaction sequence #2: Wait for UserDetails message
/*
				 f_receiveAPDUs(pco, v_infoExchangeContent, v_numStruct);
					// Save APDU Identifier for later use
					v_receivedAPDUIdentifier := v_infoExchangeContent.apci.apduIdentifier
// here loop to extract all ADUs from received InfoExchange and process them one by one (if more than one)
// loop to be made according to the value of v_numStruct
                 alt {
                      [] f_matchInADUs(mw_userDetails) -> value v_userDetails {
                      		
							// User Details ADU arrived. Stop timer
                        	t_UserDetails_Time1.stop;
                            
                        // Transaction sequence #3: Send DefaultACK with correct identifier and set verdict
                        
						f_SendAPDU(pco, m_defaultAck(defaultAck.apduIdentifier := v_receivedAPDUIdentifier));
                        
						setverdict(pass);
                      }
                    } // End of alt statement
*/                    // Test body done

             } // End of TP_TSP_USERDETAILS_BV_01
            
            testcase TP_TSP_USERDETAILS_BV_02() runs on IutComp system TestAdapter {
             
              /**
              * @desc    TP_TSP_USERDETAILS_BV_02: Verify that the TSP correctly receives a RequestADUs of type userDetailsRequest with listOfUsersParametersRequested containing user details that cannot be provided because of data privacy issues 
              * @remark  [16986:2016], Clause 6.4 and Table A.1/2 AND Table A.7/1  
              */
              
/*
             // Local variables
                //var userDetails v_userDetails;
                
                // Repetitions
                // insert loop statement in case multiple APDUs are sent according to TP
                
                // Preamble - Initial Conditions
                //f_Backoffice_Preamble();
                // Front End shall already received Context Data
                //f_SendRequestAPDU(m_user_Details_PrivacyBound_Request);

                // Preamble done

                // Test body start
                //t_UserDetails_Time1.start;
                // transaction sequence #1: Wait for UserDetails message
<<<<<<< HEAD
                //alt {
                //    [] pco.receive(mw_userDetailsPrivacy_apduIdentifier) -> value v_apduIdentifier { // No specific test was requiered
=======
                alt {
                    [] pco.receive(mw_userDetailsPrivacy.apduIdentifier) -> value v_apduIdentifier { // No specific test was requiered
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
                        // Stop timer
                //        t_UserDetails_Time1.stop;
                        
                 // Transaction sequence #2: Send DefaultACK
                //        pco.send(m_defaultAck_apduIdentifier(v_defaultAck.apduIdentifier));
                        //  Set verdict pass
                 //       setverdict(pass);
               //     }
                //} // End of alt statement
                // Test body done

             } // End of TP_TSP_USERDETAILS_BV_02
                         
 		} // End of group Valid_Behaviour
         
        group Invalid_Behaviour {

            testcase TP_TSP_USERDETAILS_BI_01() runs on IutComp system TestAdapter {
             
              /**
              * @desc    TP_TSP_USERDETAILS_BI_01: Verify that the TSP correctly responds to an incorrect RequestADUs of type userDetailsRequest 
              * @remark  [16986:2016], Clause 6.4 and Table A.1/2 AND Table A.7/1  
              */
    /*          
             // Local variables
<<<<<<< HEAD
                //var userDetails v_userDetails;
=======
//                var userDetails v_userDetails;
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
                
                // Repetitions
                // insert loop statement in case multiple APDUs are sent according to TP
                
                // Preamble - Initial Conditions
<<<<<<< HEAD
                
=======
//                f_Backoffice_Preamble();
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
                // Front End shall already received Context Data
<<<<<<< HEAD
                //f_SendRequestAPDU(m_user_Details_Invalid_Request);
=======
//                f_SendRequestAPDU(m_user_Details_Invalid_Request);
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice

                // Preamble done

                // Test body start
<<<<<<< HEAD
                //t_UserDetails_Time1.start;
=======
//                t_UserDetails_Time1.start;
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
                // transaction sequence #1: Wait for Nack message
                /*
                alt {
//                    [] pco.receive(mw_nack_SemanticError)  { // No specific test was requiered
                        // Stop timer
//                        t_UserDetails_Time1.stop;
                       //  Set verdict pass
//                        setverdict(pass);
                    }
                } // End of alt statement
                */
                // Test body done

<<<<<<< HEAD
=======
                // Postamble - Final Conditions
//                f_Backoffice_Postamble();
 */
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
             } // End of TP_TSP_USERDETAILS_BI_01
                         
            testcase TP_TSP_USERDETAILS_BI_02() runs on IutComp system TestAdapter {
             
              /**
              * @desc    TP_TSP_USERDETAILS_BI_02: Verify that the TSP correctly receives a RequestADUs of type userDetailsRequest with listOfUsersParametersRequested containing non-supported user details
              * @remark  [16986:2016], Clause 6.4 and Table A.1/2 AND Table A.7/1  
              */
   /*           
             // Local variables
//                var userDetails v_userDetails;
                
                // Repetitions
                // insert loop statement in case multiple APDUs are sent according to TP
                
                // Preamble - Initial Conditions
//                f_Backoffice_Preamble();
                // Front End shall already received Context Data
                //f_SendRequestAPDU(m_user_Details_NotSupportedDetails);

                // Preamble done

                // Test body start
//                t_UserDetails_Time1.start;
                // transaction sequence #1: Wait for Nack message
 /*
                alt {
                    [] pco.receive(mw_userDetailsAttrNotAvailable_apduIdentifier) -> value v_apduIdentifier { // No specific test was requiered
                        // Stop timer
                        t_UserDetails_Time1.stop;
                        
                 // Transaction sequence #2: Send DefaultACK
                        pco.send(m_defaultAck_apduIdentifier(v_defaultAck.apduIdentifier));
                        //  Set verdict pass
                        setverdict(pass);
                    }
                } // End of alt statement
                // Test body done
<<<<<<< HEAD
=======

                // Postamble - Final Conditions
                f_Backoffice_Postamble();
                
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
*/
             } // End of TP_TSP_USERDETAILS_BI_02

            testcase TP_TSP_USERDETAILS_BI_03() runs on IutComp system TestAdapter {
             
              /**
              * @desc    TP_TSP_USERDETAILS_BI_02: Verify that the TSP correctly receives a RequestADUs of type userDetailsRequest with listOfUsersParametersRequested containing user details that cannot be provided because of missing agreement
              * @remark  [16986:2016], Clause 6.4 and Table A.1/2 AND Table A.7/1  
              */
              
/*
             // Local variables
 //               var userDetails v_userDetails;
                
                // Repetitions
                // insert loop statement in case multiple APDUs are sent according to TP
                
                // Preamble - Initial Conditions
//                f_Backoffice_Preamble();
                // Front End shall already received Context Data
//                f_SendRequestAPDU(m_user_Details_MissingAgreement);

                // Preamble done

                // Test body start
 //               t_UserDetails_Time1.start;
                // transaction sequence #1: Wait for Nack message
/*                
                alt {
                    [] pco.receive(mw_userDetailsMissingAgreement_apduIdentifier) -> value v_apduIdentifier { // No specific test was requiered
                        // Stop timer
                        t_UserDetails_Time1.stop;
                        
                 // Transaction sequence #2: Send DefaultACK
                        pco.send(m_defaultAck_apduIdentifier(v_defaultAck.apduIdentifier));
                        //  Set verdict pass
                        setverdict(pass);
                    }
                } // End of alt statement
*/
                // Test body done
<<<<<<< HEAD

=======
*/
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
             } // End of TP_TSP_USERDETAILS_BI_03

<<<<<<< HEAD
            testcase TP_TSP_USERDETAILS_BI_04() runs on IutComp system TestAdapter {
=======
             testcase TP_TSP_USERDETAILS_BI_04() runs on IutComp system TestAdapter {
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
             
              /**
              * @desc    TP_TSP_USERDETAILS_BI_04: Verify that a TSP responds correctly to a RequestADU sent earlier than allowed 
              * @remark  [16986:2016], Clause 6.4 and Table A.1/2 AND Table A.7/1  
              */
<<<<<<< HEAD
              
            // Local variables
//                var userDetails v_userDetails;
=======
/*              
             // Local variables
                var userDetails v_userDetails;
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
                
                // Repetitions
                // insert loop statement in case multiple APDUs are sent according to TP
                
                // Preamble - Initial Conditions
//                f_Backoffice_Preamble();
                // Front End shall already received Context Data
//                f_SendRequestAPDU(m_user_Details_Request);
                
                // Preamble done

                // Test body start
                // transaction sequence #1: Send a second request immediately
//                f_SendRequestAPDU(m_user_Details_Request);

//                t_UserDetails_Time1.start;
                // transaction sequence #2: Wait for Nack message
/*                alt {
                    [] pco.receive(mw_mw_nack_TooOften)  {
                        // Stop timer
                        t_UserDetails_Time1.stop;

                        //  Set verdict pass
                        setverdict(pass);
                    }
                } // End of alt statement
<<<<<<< HEAD
*/                // Test body done
        	} // End of TP_TSP_USERDETAILS_BI_04

=======
                // Test body done
*/
             } // End of TP_TSP_USERDETAILS_BI_04             		
>>>>>>> branch 'master' of https://github.com/PT0140PT0141/Backoffice
        } // End of group Invalid_Behaviour
 
    } // End of group USERDETAILS
    
    group EXCEPTIONLIST {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group EXCEPTIONLIST
    
    group TRUSTOBJECTS {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group TRUSTOBJECTS
    
    group PAYMENTCLAIM {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group PAYMENTCLAIM
    
    group DSRC_CONTRACTISSUERLIST {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group DSRC.CONTRACTISSUERLIST
    
    group DSRC_EFCCONTEXTDATA {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group DSRC.EFCCONTEXTDATA
    
    group DSRC_BILLINGDETAILS {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group DSRC.BILLINGDETAILS
    
    group DSRC_REPORTABNORMALOBE {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group DSRC.REPORTABNORMALOBE
    
    group GNSS_TOLLDECLARATION {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group GNSS.TOLLDECLARATION
    group GNSS_BILLINGDETAILS_TSP {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group GNSS.BILLINGDETAILS_TSP
    
    group GNSS_BILLINGDETAILS_TC {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group GNSS.BILLINGDETAILS.TC
    
    group GNSS_PAYMENTANNOUNCEMENT {
         group Valid_Behaviour {
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {		
        } // End of group Invalid_Behaviour

    } // End of group GNSS.PAYMENTANNOUNCEMENT
} // End of module Toll_Service_Provider
