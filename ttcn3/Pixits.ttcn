/**
 * @author   PT0140  
 * @desc     This module describes the common parameters for TCs execution. To be provided by the IUT implementer
 * @version    $id$
 */
module EfcInfoExchange_Pixits {
	//TODO Prefix every modulepar with "PX" and add tags for semantic definitions in comments
	//importing other modules
	
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;
	import from EfcDsrcApplication language "ASN.1:1997" all;

	//importing ASN.1 data manually translated into TTCN-3

	// Toll Context ID and Toll Context Name of the Toll Context managed by the
	// IUT in case it is a Toll Charger
	modulepar Provider TOLL_CONTEXT_ID_IUT; 
	modulepar ASNAUX.UTF8String TOLL_CONTEXT_NAME_IUT;
	
    modulepar float INITIALISE_TRANSACTION_TIMEOUT := 10.0;
    
    modulepar ExtendedPaymentAmount MAX_ACCEPTED_BILLINGDETAILS_AMOUNT;
    
	//For APDUs sent from the IUT...
    modulepar Provider APDU_ORIGINATOR_FOR_IUT; //value of the InfoExchange.infoExchangeContent.apci.apduOriginator
    modulepar Provider INFORMATION_SENDER_ID_FOR_IUT;	//value of the InfoExchange.infoExchangeContent.apci.informationSenderID

    modulepar UserId PX_EXISTING_USER_ID; // Valid user, associated with other UserIds for LISTOFUSERS transactions
    modulepar UserId PX_EMPTYLIST_USER_ID; // Valid user, with no other associated UserIds for LISTOFUSERS transactions
    modulepar UserId PX_WRONG_USER_ID; // Wrong (not existing) user
    
    modulepar Provider MANUFACTURERID1; // Valid ManufacturerID for ContractIssuerList transactions
    modulepar Provider MANUFACTURERID2; // Valid ManufacturerID for ContractIssuerList transactions
    modulepar Provider MANUFACTURERID3; // Valid ManufacturerID for ContractIssuerList transactions
  
    
    type record of UserParameterRequest RecordOfUserParameterRequest;
    
 	type record of integer RecordOfInteger;
    modulepar RecordOfInteger USERDETAILS_SUPPORTED_LIST_OF_PARAMETERS;
    template integer mw_userDetailsSupportedListOfParameters :=(all from USERDETAILS_SUPPORTED_LIST_OF_PARAMETERS);
    modulepar RecordOfInteger USERDETAILS_PRIVACYBOUND_LIST_OF_PARAMETERS;  
    modulepar RecordOfInteger USERDETAILS_NOT_AGREED_LIST;
    
    type record TrustObjectTypePurposePair{
		integer trustObjectType,
        integer trustObjectPurpose
    }
	type record of TrustObjectTypePurposePair RecordOfTrustObjectTypePurposePair;
	modulepar RecordOfTrustObjectTypePurposePair RECEIVED_TRUST_OBJECTS_SUPPORTED;	//Should contain all the allowed pairs {TrustObjectType,TrustObjectPurpose} pairs accepted by the IUT for receiving 
	modulepar RecordOfTrustObjectTypePurposePair SENT_TRUST_OBJECTS_SUPPORTED;		//Should contain all the allowed pairs {TrustObjectType,TrustObjectPurpose} pairs accepted by the IUT for sending
	 	
        
}
