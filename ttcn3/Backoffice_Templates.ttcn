/**
 * @author  PT0140  
 * @desc    This module provides common templates for both Toll Charger and Toll Service Provider TCs. Most of these templates shall be used to modify the new ones.
 * @see     [17154-1:2017]: Test suite structure and test purpose
 * @see     Electronic fee collection — Evaluation of implementation for conformity to CEN/TS 16986 — Part 1: Test suite structure and purposes
 * @remark  See Annex C - Data structures
 * @version $id$
 */
module Backoffice_Templates language "TTCN-3:2010 Advanced Parameterization" {
	
    /**
     * @desc    [17575-1:2016], Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    [17575-3:2016], Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 4: Roaming
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcDsrcApplication language "ASN.1:1997" all;
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parameterised_Asn1_Data TTCN-3 module is a workaround
     */
    import from Common_Parameterised_Asn1_Data all;
    
    import from Backoffice_TypesAndValues all;
    import from Backoffice_Pixits all;
    import from Backoffice_Pics all;
    import from Backoffice_Functions all;
	

	/**
     * @desc    Main send template for any unsecured ADU
     * @param   p_notAuthenticatedInfoExchangeAdu Unsecured ADU (of data type InfoExchange)
     * @see     [12855:2016], Clause xx Message authentication
     */
            template (value) InfoExchange m_InfoExchange_unsecured(
            	in template (value) InfoExchange p_notAuthenticatedInfoExchange
           		)
            := {
                notAuthenticatedInfoExchange := p_notAuthenticatedInfoExchange            
            } // End of template m_InfoExchange_unsecured
	
     /**
      * @desc    Main send template for any secured ADU
      * @param   p_notAuthenticatedInfoExchangeAdu Secured ADU (of data type InfoExchange)
      * @see     [12855:2016], Clause xx Message authentication
      */
            template (value) InfoExchange m_InfoExchange_secured(
                in template (value) InfoExchange p_authenticatedInfoExchange
            ) := {
                authenticatedInfoExchange := p_authenticatedInfoExchange
            } // End of template m_InfoExchange_secured


	template RequestADU m_user_Details_Request := {
	  	requestedADUType := provideUserDetailsADU,
	  	userId := definedUserid,
		listOfParametersRequested := omit,
		userDetailsRequestReason := omit,
		userInfoValidityPeriod := omit
	}

	template RequestADU m_user_Details_Invalid_Request := {
	  
	}

	template RequestADU m_user_Details_NotSupportedDetails := {
	  
	}

	template RequestADU m_user_Details_PrivacyBound_Request := {
	  
	}
	
	template AckADU m_defaultAck := {
	  
	}

	template AckADU mw_nack_SemanticError := {
	  
	}

	template AckADU mw_userDetailsAttrNotAvailable := {
	  
	}
	
	template ProvideUserDetailsADU mw_userDetailsPrivacy_apduIdentifier := {
	  
	}
	
	template ProvideUserDetailsADU mw_userDetails := {
	  originaluserIdRequest := ?,
	  userId := ?,
	  statusFlag := optional ,
	  listOfUserParameters := optional
	}
	         
} // End of module Backoffice_Templates
