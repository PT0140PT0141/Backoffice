/**
 * @author  PT0140  
 * @desc    This module provides common templates for both Toll Charger and Toll Service Provider TCs. Most of these templates shall be used to modify the new ones.
 * @see     [17154-1:2017]: Test suite structure and test purpose
 * @see     Electronic fee collection — Evaluation of implementation for conformity to CEN/TS 16986 — Part 1: Test suite structure and purposes
 * @remark  See Annex C - Data structures
 * @version $id$
 */
module Backoffice_Templates language "TTCN-3:2010 Advanced Parameterization" {
	
	//importing other modules
	import from Backoffice_Pixits all;
	import from Backoffice_Ics all;
	import from Backoffice_Functions all;
	
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;
	/**
     * @desc    [17575-1:2016], Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    [17575-3:2016], Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 4: Roaming
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcDsrcApplication language "ASN.1:1997" all;
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parametrised_Asn1_Data TTCN-3 module is a workaround
     */

	//importing ASN.1 data manually translated into TTCN-3
	import from Backoffice_Parameterised_Asn1_Data all;  
    import from Common_Parametrised_Asn1_Data all;
    
	//NEW TEMPLATE STRUCTURE---------------------------------------------------------------

    /**
     * @desc    Generic template for InfoExchange structure, without authentication     
     */
	
	template InfoExchange m_infoExchangeNoSec(InfoExchangeContent p_infoExchangeContent):={
	  infoExchangeContent:=p_infoExchangeContent,
	  infoExchangeAuthenticator := omit
	}
	
    /**
     * @desc    Generic template for InfoExchangeContent structure    
     */
	template InfoExchangeContent mw_infoExchangeContent(in Adus p_adus) := {
		apci:={
    		aidIdentifier := 1, // 12855 Protocol Version number 
    		apduOriginator := ?, // Source of the content of the APDU 
    		informationSenderID := ?, // Sender of this content 
    		informationrecipientID := ?,  
    		apduIdentifier := ?,
    		previousApduId := *,
    		nextApduId := omit,
    		inResponseToApduId := *, 
    		apduDate :=  ?
		},
		adus:= p_adus
	}

	
	/**
     * @desc Generic template for InfoExchangeContent SENT BY THE Tester     
     */
	template InfoExchangeContent mw_infoExchangeContentSend(in Adus p_adus) modifies mw_infoExchangeContent := {			
		apduOriginator := APDU_ORIGINATOR_FOR_TESTER,  
		informationSenderID := INFORMATION_SENDER_ID_FOR_TESTER, 
		informationRecipientID := INFORMATION_SENDER_ID_FOR_IUT,
		//apduIdentifier shall be a unique identifier for each given apduOriginator that is assigned by the apduOriginator. 
		//It is used to either acknowledge or request retransmission of a previously issued APDU.
		apci.apduIdentifier := float2int(rnd()) * 65535
	}
	
	/**
	 * 
	 * @desc Corresponds to the event Initiating_Apdu desribed in test purposes.
	 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier and apduDate = valid date, 
	 * @desc optional fields on all levels not present" 
	 */ 
	template InfoExchangeContent mw_infoExchangeContentSendInit(in Adus p_adus) modifies mw_infoExchangeContentSend := {
    		inResponseToApduId := omit
	}
	
	//def event Initiating_Apdu "An APDU with the APCI-fields set to informationRecipientId = Tester identifier and apduDate = valid date, optional fields on all levels not present"
	//def event Default_Apdu "An APDU with the APCI-fields set to informationRecipientId = Tester identifier, inResponseToApduId = the apduId of the APDU carrying the ADU that is being responded to and apduDate = valid date, other optional fields on all levels not present"
	//def event Default_Ack_Apdu "Default_Apdu containing one AckADU containing {apduAckCode =: apduOK(2)}, with issues being not present"
	//def event NAck_Apdu(zero or more sets of Param defined as {aduPosition, aduReasonCode}) "Default_Apdu containing one AckADU containing {apduAckCode= apduOK(2), issues containing one element for each Param set containing {issueADUStruct=aduPosition, issueCode = aduReasonCode }}"
	//NOTE	the NAck_Apdu definition assumes that there are some valid ADUs in the APDU it is responding to (otherwise an apduAckCode  = apduNotOK(3) might have been a feasible answer
	//def event NAck_requestSentTooOften "Default_Apdu containing one AckADU containing {apduAckCode= requestSentTooOften(10)}"
	
	//END OF NEW TEMPLATE STRUCTURE---------------------------------------------------------------
	

	/**
     * @desc    Main send template for any unsecured ADU
     * @param   p_notAuthenticatedInfoExchangeAdu Unsecured ADU (of data type InfoExchange)
     * @see     [12855:2016], Clause xx Message authentication
     */
    template (value) InfoExchange m_infoExchangeUnsecured(in template (value) InfoExchange p_notAuthenticatedInfoExchange) := {
    	notAuthenticatedInfoExchange := p_notAuthenticatedInfoExchange            
    } 
	
     /**
      * @desc    Main send template for any secured ADU
      * @param   p_notAuthenticatedInfoExchangeAdu Secured ADU (of data type InfoExchange)
      * @see     [12855:2016], Clause xx Message authentication
      */
    template (value) InfoExchange m_infoExchangeSecured(in template (value) InfoExchange p_authenticatedInfoExchange) := 
    {
        authenticatedInfoExchange := p_authenticatedInfoExchange
    } // End of template m_InfoExchange_secured

	template ApciFields m_apciFields := { 

		aidIdentifier := 1, // 12855 Protocol Version number 
		apduOriginator := *, // Source of the content of the APDU 
		informationSenderID := *, // Sender of this content 
		informationrecipientID := *,  
		apduIdentifier := *,
		previousApduId := *,
		nextApduId := omit,
		inResponseToApduId := *, 
		apduDate :=  *
	} 

	template RequestADU mw_userDetailsRequest := {
	  	requestedADUType := AduType_provideUserDetailsADU_,
	  	userId := DEFINED_USERID,
		listOfParametersRequested := ?,
		userDetailsRequestReason := omit,
		userInfoValidityPeriod := omit
	}


	template AckADU m_defaultAck := {
	  ApduIdentifier := ?,
	  explicitlyAckedAdus := omit,
	  apduAckCode := ?,
	  apduAckText := omit,
	  issues := *
	}

	
//	template ProvideUserDetailsADU mw_userDetailsPrivacy_apduIdentifier := {
//        originaluserIdRequest := DEFINED_USERID,
//        userId := *,
//        statusFlag := * ,
//        listOfUserParameters.UserParameterResponse := omit,
//        listOfUserParameters.userParameterResponse := *,
//        listOfUserParameters.userParameterStatus := 2,
//        listOfUserParameters.userInfoValidityPeriod := omit
//	}
	
	template ProvideUserDetailsADU mw_userDetails := {
	  originaluserIdRequest := DEFINED_USERID,
	  userId := *,
	  statusFlag := * ,
	  listOfUserParameters := *
	}
	
    modulepar Provider TESTER_ID := *;
    
    modulepar integer semanticError := 3000;
 	
 	modulepar integer actionCodeNotSupported := 3010;
 
	modulepar integer acceptedWithWarning := 4000;
	
	modulepar integer sequenceError := 4;

	modulepar integer otherReason := 5;

	modulepar integer protocolVersionError := 6;
  
	modulepar integer originatorRejected := 7;
  
	modulepar integer recipientUnknown := 8;

	modulepar integer relatedApduUnknown := 9;
   
    modulepar integer NAck_requestSentTooOften := 10 ;
    	         
} // End of module Backoffice_Templates
