/**
 * @desc    This module provides common templates for both Toll Charger and Toll Service Provider TCs. Most of these templates shall be used to modify the new ones.
 * @see     [17154-1:2017]: Test suite structure and test purpose
 * @see     Electronic fee collection â€” Evaluation of implementation for conformity to CEN/TS 16986 â€” Part 1: Test suite structure and purposes
 * @remark  See Annex C - Data structures
 * @version $id$
 */
module EfcInfoExchange_Templates language "TTCN-3:2010 Advanced Parameterization" {

	//importing other modules
	import from EfcInfoExchange_Pixits all;
//	import from EfcInfoExchange_Ics all;
	import from EfcInfoExchange_Functions all;
	import from EfcInfoExchange_TesterData all;
	
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;
	/**
     * @desc    [17575-1:2016], Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    [17575-3:2016], Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) â€” Application interface definition for autonomous systems â€” Part 4: Roaming
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcDsrcApplication language "ASN.1:1997" all;
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parametrised_Asn1_Data TTCN-3 module is a workaround
     */

	//importing ASN.1 data manually translated into TTCN-3
	import from EfcInfoExchange_ParameterisedAsn1Data all;  
    import from LibEfc_Common_Parameterised_Asn1_Data all;
	import from EfcInfoExchangeProfile all;
    
    group ApduTemplates {
    	
    	/* Underlaying definitions for APCI and security*/

    	/**
         * @desc Generic template for ApciFields 
         */
    	template ApciFields mw_apci := { 
    		aidIdentifier := 1, // 12855 Protocol Version number 
    		apduOriginator := ?, // Source of the content of the APDU 
    		informationSenderID := ?, // Sender of this content 
    		informationrecipientID := ?,  
    		apduIdentifier := ?,
    		previousApduId := *,
    		nextApduId := omit,
    		inResponseToApduId := *, 
    		apduDate :=  ?
    	}

		template (value) ApciFields m_apciInitTester modifies mw_apci :={
    		apduOriginator := TD_APDU_ORIGINATOR_FOR_TESTER,  
    		informationSenderID := TD_INFORMATION_SENDER_ID_FOR_TESTER, 
    		informationrecipientID := INFORMATION_SENDER_ID_FOR_IUT,
			apduIdentifier := float2int(rnd()) * 65535,
    		previousApduId := omit,
    		inResponseToApduId := omit, 
    		apduDate:=fx_getUtc()			
		}
		
		template (value) ApciFields m_apciRespTester(in InfoExchange p_apduBeingRespondedTo) modifies m_apciInitTester :={
			inResponseToApduId:=p_apduBeingRespondedTo.infoExchangeContent.apci.apduIdentifier
		}
    	
		template ApciFields mw_apciInitIut modifies mw_apci :={
			apduOriginator := APDU_ORIGINATOR_FOR_IUT,  
			informationSenderID := INFORMATION_SENDER_ID_FOR_IUT, 
			informationrecipientID := TD_INFORMATION_SENDER_ID_FOR_TESTER,
			inResponseToApduId := omit
		}
		
		template ApciFields mw_apciRespIut(in InfoExchange p_apduBeingRespondedTo) modifies mw_apciInitIut :={
			inResponseToApduId:=p_apduBeingRespondedTo.infoExchangeContent.apci.apduIdentifier		
		} 
		
    	  	
        /**
         * @desc    Generic template for InfoExchange structure, without authentication     
         */
    	template (value) InfoExchange m_apduNoAuth(in template ApciFields p_apci, in template Adus p_adus):={
    	  infoExchangeContent:={
    	  	apci:=p_apci,
    	  	adus:=p_adus
    	  },
    	  infoExchangeAuthenticator := omit
    	}
    	
        
        /**
         * @desc    Generic template for InfoExchange structure, with authentication     
         */
		template InfoExchange mw_apduAuth(in template ApciFields p_apci, in template Adus p_adus):={
		  infoExchangeContent:={
			apci:=p_apci,
			adus:=p_adus
		  },
		  infoExchangeAuthenticator := ?
		}

    	template InfoExchange m_apduAuth(in template ApciFields p_apci, in template Adus p_adus):={
    	  infoExchangeContent:={
    	  	apci:=p_apci,
    	  	adus:=p_adus
    	  },
    	  infoExchangeAuthenticator := fx_computeAuthenticator(InfoExchangeContent:{p_apci,p_adus})
    	}
    	
		/**
		 * 
		 * @desc Corresponds to the event Initiating_Apdu described in test purposes in the cases where the Tester is the initiator of the transaction 
		 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier and apduDate = valid date, 
		 * @desc optional fields on all levels not present" 
		 */ 
		template (value) InfoExchange m_apduNoAuthInitTester(in Adus p_adus) := m_apduNoAuth(
			m_apciInitTester, 
			p_adus
		);

		template (value) InfoExchange m_apduAuthInitTester(in Adus p_adus) := m_apduAuth(
			m_apciInitTester, 
			p_adus
		);

    	/**
    	 * 
    	 * @desc Corresponds to the event Default_Apdu described in test purposes in the cases where the Tester is the respondant of the transaction.
		 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier, 
		 * @desc inResponseToApduId = the apduId of the APDU carrying the ADU that is being responded to and 
		 * @desc apduDate = valid date, other optional fields on all levels not present" 
    	 */ 
		template (value) InfoExchange m_apduNoAuthRespTester(in InfoExchange p_apduBeingRespondedTo, in Adus p_adus) := m_apduNoAuth(
			m_apciRespTester(p_apduBeingRespondedTo), 
			p_adus
		);

		template (value) InfoExchange m_apduAuthRespTester(in InfoExchange p_apduBeingRespondedTo, in Adus p_adus) := m_apduAuth(
			m_apciRespTester(p_apduBeingRespondedTo), 
			p_adus
		);


    	/**
    	 * 
    	 * @desc Corresponds to the event Initiating_Apdu described in test purposes in the cases where the IUT is the initiator of the transaction
    	 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier and apduDate = valid date, 
    	 * @desc optional fields on all levels not present" 
    	 */ 
    	template InfoExchange mw_apduNoAuthInitIut(in Adus p_adus) := m_apduNoAuth(
     		mw_apciInitIut, 
     		p_adus
     	);


    	template InfoExchange mw_apduAuthInitIut(in Adus p_adus) := mw_apduAuth(
     		mw_apciInitIut, 
     		p_adus
     	);


    	/**
    	 * 
    	 * @desc Corresponds to the event Default_Apdu described in test purposes in the cases where the IUT is the respondant of the transaction.
		 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier, 
		 * @desc inResponseToApduId = the apduId of the APDU carrying the ADU that is being responded to and 
		 * @desc apduDate = valid date, other optional fields on all levels not present" 
    	 */ 
		template InfoExchange mw_apduNoAuthRespIut(in InfoExchange p_apduBeingRespondedTo, in Adus p_adus) := m_apduNoAuth(
			mw_apciRespIut(p_apduBeingRespondedTo), 
			p_adus
		);

		template InfoExchange mw_apduAuthRespIut(in InfoExchange p_apduBeingRespondedTo, in Adus p_adus) := mw_apduAuth(
			mw_apciRespIut(p_apduBeingRespondedTo), 
			p_adus
		);

		template InfoExchange mw_apduRequest := mw_apduNoAuthInitIut(Adus:{requestAdus:=?});
			
		template InfoExchange mw_apduAuthRequest := mw_apduAuthInitIut(Adus:{requestAdus:=?});

		template (value) Adus m_oneAckInAdusStruct(in AckADU p_ackADU):={ackAdus:={p_ackADU}};
		
		/**
		 * 
		 * @desc Corresponds to the event Default_Ack_Apdu described in test purposes in the case where the Tester is the sender.
		 * @desc Definition: "Default_Apdu containing one AckADU containing {apduAckCode =: apduOK(2)}, with issues being not present" 
		 */ 
		template (value) InfoExchange m_apduDefaultAckTester(in InfoExchange p_apduToAck) := m_apduNoAuthRespTester(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduDefaultAck(p_apduToAck))
		);

		/**
		 * 
		 * @desc Corresponds to the event Default_Ack_Apdu described in test purposes in the case where the Tester is the receiver.
		 * @desc Definition: "Default_Apdu containing one AckADU containing {apduAckCode =: apduOK(2)}, with issues being not present" 
		 *
		 */ 
		template (value) InfoExchange mw_apduDefaultAckIut(in InfoExchange p_apduToAck) := mw_apduNoAuthRespIut(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduDefaultAck(p_apduToAck))
		);

		 /**
		  * @desc Corresponds to the event NAck_Protocol_Apdu in the case where the tester is the sender
		 * @desc Definition: NAck_Protocol_Apdu(apduAckCode excluding the values 2 and 5) "Default_Apdu 
		 * @desc containing one AckADU containing {apduAckCode =: specified apduAckCode }, with issues 
		 * @desc being not present"
		 */ 
		 //TODO introduce the exclusion of values 2 and 5
		template (value) InfoExchange m_apduNAckProtocolTester
			(in InfoExchange p_apduToAck, in ApduReasonCode p_apduReasonCode) := m_apduNoAuthRespTester(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduNAckProtocol(p_apduToAck, p_apduReasonCode))
	    );

		/**
		 * @desc Corresponds to the event NAck_Protocol_Apdu in the case where the IUT is the sender
		 * @desc Definition: NAck_Protocol_Apdu(apduAckCode excluding the values 2 and 5) "Default_Apdu 
		 * @desc containing one AckADU containing {apduAckCode =: specified apduAckCode }, with issues 
		 * @desc being not present"
		 */ 
		template (value) InfoExchange mw_apduNAckProtocolIut
			(in InfoExchange p_apduToAck, in ApduReasonCode p_apduReasonCode) := mw_apduNoAuthRespIut(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduNAckProtocol(p_apduToAck, p_apduReasonCode))
	    );

		/**
		* @desc Corresponds to the event NAck_Protocol_Apdu_Sec in the case where the Tester is the sender
		* @desc Definition: NAck_Protocol_Apdu_Sec (apduAckCode excluding the values 2 and 5) 
		* @desc "NAck_Protocol_Apdu( apduAckCode) modified by having infoExchangeAuthenticator present 
		* @desc and calculated according to clause 7.3 of EN ISO 12855â€�
		*/ 

	   template (value) InfoExchange m_apduNAckProtocolAuthTester(
		   in InfoExchange p_apduToAck,
		   in ApduReasonCode p_apduReasonCode 	
	   ):=m_apduAuthRespTester(p_apduToAck, 
		   m_oneAckInAdusStruct(m_aduNAckProtocol(p_apduToAck, p_apduReasonCode))
	   );

 
		/**
		 * @desc Corresponds to the event NAck_Protocol_Apdu_Sec in the case where the Iut is the sender
		 * @desc Definition: NAck_Protocol_Apdu_Sec (apduAckCode excluding the values 2 and 5) 
		 * @desc "NAck_Protocol_Apdu( apduAckCode) modified by having infoExchangeAuthenticator present 
		 * @desc and calculated according to clause 7.3 of EN ISO 12855â€�
		 */ 
		template InfoExchange mw_apduNAckProtocolAuthIut(
			in InfoExchange p_apduToAck,
			in ApduReasonCode p_apduReasonCode 	
		):=mw_apduAuthRespIut(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduNAckProtocol(p_apduToAck, p_apduReasonCode))
		);

		/**
		 * @desc Corresponds to the event NAck_AllAdus_Apdu when the IUT is the sender
		 * @desc Definition: NAck_AllAdus_Apdu(aduReasonCode) "Default_Apdu containing one AckADU containing 
		 * @desc {apduAckCode= apduOK(2), issues containing one element containing {issueADUStruct=0, 
		 * @desc issueCode = aduReasonCode }}"
		 */ 
		template InfoExchange mw_apduNAckAllAdusNoAuthIut(
			in InfoExchange p_apduToAck,
			in AduReasonCode p_aduReasonCode	
		):=mw_apduAuthRespIut(
			p_apduToAck, 
			m_oneAckInAdusStruct(mw_aduNAckWIssues(p_apduToAck, m_nAckParamsSingle(0,p_aduReasonCode)))
		);

		/**
		 * 
		 * @desc Corresponds to the event NAck_IndividualAdus_Apdu when the Tester is sending
		 * @desc Definition: NAck_IndividualAdus_Apdu({one or more sets of Param defined as {aduPosition, 
		 * @desc aduReasonCode}}) "Default_Apdu containing one AckADU containing {apduAckCode= apduOK(2), 
		 * @desc issues containing one element for each Param set containing {issueADUStruct=aduPosition, 
		 * @desc issueCode = aduReasonCode }}"
		 */ 
		template InfoExchange m_apduNackIndividualIssuesTester(
			in InfoExchange p_apduToAck, in NAckParams p_nAckParams
		):=m_apduNoAuthRespTester(p_apduToAck, {m_aduNAck(p_apduToAck, p_nAckParams)});
				
		/**
		 * 
		 * @desc Corresponds to the event NAck_IndividualAdus_Apdu when the IUT is sending
		 * @desc Definition: NAck_IndividualAdus_Apdu({one or more sets of Param defined as {aduPosition, 
		 * @desc aduReasonCode}}) "Default_Apdu containing one AckADU containing {apduAckCode= apduOK(2), 
		 * @desc issues containing one element for each Param set containing {issueADUStruct=aduPosition, 
		 * @desc issueCode = aduReasonCode }}"
		 */ 
		template InfoExchange mw_apduNackIndividualIssuesIut(
			in InfoExchange p_apduToAck,
			in NAckParams p_nAckParams
		):=mw_apduNoAuthRespIut(p_apduToAck, m_oneAckInAdusStruct(mw_aduNAckWIssues(p_apduToAck, p_nAckParams)));

		/**
		 * 
		 * @desc Corresponds to the event NAck_requestSentTooOften when the IUT is the sender
		 * @desc Definition: NAck_requestSentTooOften "NAck_Protocol_Apdu(requestSentTooOften(10)"
		*/ 
		
		template InfoExchange mw_apduNackRequestSentTooOften(in InfoExchange p_apduToAck) := 
		mw_apduNAckProtocolIut(p_apduToAck, ApduReasonCode_requestSentTooOften_);
		

		type record of record {
			NumberOfADUStruct issueADUStruct,
			ASNAUX.UTF8String issueLocation length (0 .. 512) optional,
			ASNAUX.UTF8String issueContent length (0 .. 1024) optional,
			AduReasonCode issueCode,
			ASNAUX.UTF8String issueText length (0 .. 1024) optional
	  	}  NAckParams;
	  	
		/**
		 * 
		 * @desc Construct with one issueCode value, to be used when creating customised m_apduNAck)
		 */ 		
	 	template (value) NAckParams m_nAckParamsSingle(
			in NumberOfADUStruct p_issueADUStruct, 
			in AduReasonCode p_issueCode
		):={
			{
				issueADUStruct:=p_issueADUStruct,
				issueLocation := omit,
				issueContent := omit,
				issueCode := p_issueCode,
				issueText:= omit
			}
		};
	  	

		template AckADU m_aduNAck(in InfoExchange p_apduToAck, in NAckParams p_nAckParams) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := ApduReasonCode_apduNotOK_ ,
			apduAckText := omit,
			issues := p_nAckParams
		}
    	
		template AckADU m_aduNAckProtocol(in InfoExchange p_apduToAck, in ApduReasonCode p_apduReasonCode) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := p_apduReasonCode ,
			apduAckText := omit,
			issues := omit
		}
    	
		template AckADU mw_aduNAckWIssues(in InfoExchange p_apduToAck, in NAckParams p_nackParams) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := ApduReasonCode_apduOK_,
			apduAckText := omit,
			issues := p_nackParams
		}
    	      
		template AckADU mw_aduDefaultAck := {
			apduIdentifier := ?,
			explicitlyAckedAdus := omit,
			apduAckCode := ?,
			apduAckText := omit,
			issues := *
		}

		template AckADU m_aduDefaultAck(in InfoExchange p_apduToAck) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := ApduReasonCode_apduOK_ ,
			apduAckText := omit,
			issues := omit
		}

    }
    
	group AduTemplates{
		
		group USERDETAILS {
	
    		template RequestADU mw_aduRequestProvideUserDetails := {
        		userDetailsRequest :={	
            	  	requestedADUType                := AduType_provideUserDetailsADU_,
            	  	userId                          := ?,
            		listOfParametersRequested       := ?,
            		userDetailsRequestReason        := *,
            		userInfoValidityPeriod          := *
        		}
        	}
        	
        	template (value) RequestADU m_aduRequestProvideUserDetails(
        		in template RecOfUserParameterRequest p_userParameterRequests
        	) modifies mw_aduRequestProvideUserDetails := {
        		userDetailsRequest:={
        			requestedADUType := AduType_provideUserDetailsADU_,	
            	  	userId := EXISTING_USER_ID,
					listOfParametersRequested := p_userParameterRequests,
            		userDetailsRequestReason := omit,
            		userInfoValidityPeriod := omit
        		}
        	}
        	
        	template (value) Adus m_adusProvideUserDetailsRandomParams:={
        		m_aduRequestProvideUserDetails(f_userDetailsParameters())
        	} 
        	       			
//        	template ProvideUserDetailsADU mw_userDetailsPrivacy_apduIdentifier := {
//                originaluserIdRequest := DEFINED_USERID,
//                userId := *,
//                statusFlag := * ,
//                listOfUserParameters.UserParameterResponse := omit,
//                listOfUserParameters.userParameterResponse := *,
//                listOfUserParameters.userParameterStatus := 2,
//                listOfUserParameters.userInfoValidityPeriod := omit
//        	}
        	
        	template ProvideUserDetailsADU mw_aduProvideUserDetails := {
            	originaluserIdRequest := EXISTING_USER_ID,
            	userId := ?, 
            	statusFlag := * ,
            	listOfUserParameters := *
        	}
        	
   			template InfoExchange mw_apduProvideUserDetails(InfoExchange p_apduRespondedTo) := 
   				m_apduNoAuth(m_apciRespTester(p_apduRespondedTo), Adus:{provideUserDetailsADUs:=?});
			
//			template ProvideUserDetailsADU m_aduProvideUserDetails:= {
//            	originaluserIdRequest := EXISTING_USER_ID,
//            	userId := ?, 
//            	statusFlag := * ,
//            	listOfUserParameters := *
//        	}
//			EMPTYLIST_USER_ID
			
			template InfoExchange mw_apduAuthProvideUserDetails := mw_apduAuth(mw_apci, Adus:{provideUserDetailsADUs:=?});
		}

		group LISTOFUSERS {
		  	
		  	template RequestADU mw_aduRequestListOfUsers := {
		  		userListRequest :={
		  			requestedADUType	:= AduType_provideUserIdListADU_,
      				userIdRequestType	:= UserIdRequestType_allUserIdsToGivenCustomer_, // the only allowd type according to IAP restrictions 
      				userId				:= ? length (1..4), // at least one element shall be present
					userIdRequestTime	:= ?
				}
			}
			  	
		  	template (value) RequestADU m_aduRequestListOfUsers(in UserId p_userId:=PX_EXISTING_USER_ID) := {
	  			userListRequest :={
	  				requestedADUType	:= AduType_provideUserIdListADU_,
  					userIdRequestType	:= 0,
  					userId				:= p_userId,
					userIdRequestTime	:= fx_getUtc() 
				}
			}

			template ProvideUserIdListADU mw_aduProvideUserIdList := {
				originalUserIdRequestType := UserIdRequestType_allUserIdsToGivenCustomer_,
				originalUserId := PX_EXISTING_USER_ID,
				userIdList := *
			};
        	
			template ProvideUserIdListADU m_aduProvideUserIdList(in template UserId p_originalUserId):= {
				originalUserIdRequestType := UserIdRequestType_allUserIdsToGivenCustomer_,
				originalUserId := p_originalUserId, //PX_EXISTING_USER_ID,
				userIdList :={TD_USERID_1,TD_USERID_2,TD_USERID_3}
			};
        	
        	

   			template Adus mw_adusProvideUserIdList:={provideUserIdListADUs:=?};
			
		
		}

		group EXCEPTIONLIST {
		  	template ExceptionListADU mw_aduExceptionList := {
		  	  	exceptionListVersion := ?,
				exceptionListType := (ExceptionListType_blackList_, ExceptionListType_whiteList_, ExceptionListType_discountedList_),
		  	  	exceptionValidityStart := ?,
		  	  	exceptionValidityEnd := omit,
		  	  	exceptionListEntries := ?
		  	}

			template ExceptionListADU mw_aduExceptionListBlack modifies mw_aduExceptionList := {
				exceptionListType := ExceptionListType_blackList_
			}		  	

			template ExceptionListADU mw_aduExceptionListWhite modifies mw_aduExceptionList := {
				exceptionListType := ExceptionListType_whiteList_
			}		  	

			template ExceptionListADU mw_aduExceptionListDiscounted modifies mw_aduExceptionList := {
				exceptionListType := ExceptionListType_discountedList_
			}		  	
			
// Not needed currently
//		  	template ExceptionListEntry mw_exceptionListEntry := {
//		  	  	userId := ?,
//		  	  	statusType := ?,
//		  	  	reasonCode := ?,
//		  	  	entryValidityStart := ?,
//		  	  	entryValidityEnd := omit,
//		  	  	vehicleParameters := *,
//		  	  	actionRequested := ?,
//		  	  	efcContextMark := omit,
//		  	  	vatId := *
//		  	}

			template Adus mw_recordOfOneAduExceptionListBlack := {
				exceptionListADUs:={mw_aduExceptionListBlack}
			}
			
			template Adus mw_recordOfOneAduExceptionListWhite := {
				exceptionListADUs:={mw_aduExceptionListWhite} 
			}
			
			template Adus mw_recordOfOneAduExceptionListDiscounted := {
				exceptionListADUs:={mw_aduExceptionListDiscounted} 
			}
			
			
   			template InfoExchange mw_apduExceptionList := m_apduNoAuth(mw_apci, Adus:{exceptionListADUs:=?});
			
			template InfoExchange mw_apduAuthExceptionList := mw_apduAuth(mw_apci, Adus:{exceptionListADUs:=?});

			template InfoExchange mw_apduExceptionListOneBlackList := m_apduNoAuth(mw_apci, mw_recordOfOneAduExceptionListBlack);

			template InfoExchange mw_apduExceptionListOneWhiteList := m_apduNoAuth(mw_apci, mw_recordOfOneAduExceptionListWhite);

			template InfoExchange mw_apduExceptionListOneDiscountedList := m_apduNoAuth(mw_apci, mw_recordOfOneAduExceptionListDiscounted);


//			template InfoExchange mw_apduExceptionListOneBlackList modifies mw_apduExceptionList := {
//				infoExchangeContent.adus.exceptionListADUs := {
//					modifies mw_aduExceptionList:= {
//						exceptionListType := ExceptionListType_blackList_ 
//					}
//				}
//			}
//			
//			template InfoExchange mw_apduExceptionListOneWhiteList modifies mw_apduExceptionList := {
//				infoExchangeContent.adus.exceptionListADUs := {modifies mw_aduExceptionList:= {exceptionListType := ExceptionListType_whiteList_ }}
//			}
//			
//
		}
		
		group TRUSTOBJECTS {
			
			type record of TrustObjectPurposes RecOfTrustObjectPurposes; 	

			//note that an APDU containing TrustObjects is only allowed to carry ONE TrustObjectADU
			template (value) InfoExchange m_apduTrustObjectResponse(
				in InfoExchange p_apduBeingRespondedTo, 
				in RecOfTrustObjectPurposes p_recOfTrustObjectPurposes,
				in TrustObjectCode p_trustObjectCode			
			):= m_apduNoAuth(
				m_apciRespTester(p_apduBeingRespondedTo),
				Adus: {
					trustObjectAdus:={
						m_aduTrustObject(
							p_recOfTrustObjectPurposes,
							p_trustObjectCode
						)
					}
				}
			);
			
			template TrustObjectADU mw_aduTrustObject(
				template RecOfTrustObjectPurposes p_recOfTrustObjectPurposes,
				template TrustObjectCode p_trustObjectCode
			):={
				trustObjectID := float2int(rnd()),
				purposesOfTrustObject := p_recOfTrustObjectPurposes,
				startValidity := fx_getUtc(),
				endValidity := omit,
				trustObjectStatus := TrustObjectStatus_valid_,
				trustObject := p_trustObjectCode
			}

			template (value) TrustObjectADU m_aduTrustObject(RecOfTrustObjectPurposes p_recOfTrustObjectPurposes,
				TrustObjectCode p_trustObjectCode
			):=mw_aduTrustObject(p_recOfTrustObjectPurposes,p_trustObjectCode);
			
			template TrustObjectADU m_aduTrustObjectInvalidStatus:= {
				trustObjectID := float2int(rnd()),
				purposesOfTrustObject := {TrustObjectPurposes_dSRCCharging_,TrustObjectPurposes_dSRCAC_,TrustObjectPurposes_oBEInterrogation_,TrustObjectPurposes_oBEInterrogationAC_},
				startValidity := fx_getUtc(),
				endValidity := omit,
				trustObjectStatus := 5,
				trustObject := {dsrcKeyRef:=dsrcKeyRefObjectTESTER_VALUE}
			}
			
			
			// General template to receive Trust Objects w/o a Request
			template InfoExchange mw_apduTrustObjectInit := mw_apduNoAuthInitIut(Adus:{trustObjectAdus:=?});
   			
			// General template to receive Trust Objects on a secure connection w/o a Request
			template InfoExchange mw_apduAuthTrustObjectInit := mw_apduAuthInitIut(Adus:{trustObjectAdus:=?});

   			// General template to receive Trust Objects w a Request
   			template InfoExchange mw_apduTrustObject(in InfoExchange p_apduBeingRespondedTo) := 
   			mw_apduNoAuthRespIut(p_apduBeingRespondedTo,Adus:{trustObjectAdus:=?});
   			
			// General template to receive Trust Objects on a secure connection w a Request
			template InfoExchange mw_apduAuthTrustObject(in InfoExchange p_apduBeingRespondedTo) := 
			mw_apduAuthRespIut(p_apduBeingRespondedTo, Adus:{trustObjectAdus:=?});

			//template for building templates
			template Adus mw_adusTrustObjectProtoTemp(template TrustObjectCode p_trustObjectCode) := {
				trustObjectAdus:={mw_aduTrustObject(?,p_trustObjectCode)}
			};
			
			// Template for a generic object. According to the profile, only certificate revocation lists can be sent as generic trust objects
   			template Adus mw_adusTrustObjectGeneric := mw_adusTrustObjectProtoTemp(mw_genericTrustObject);

			template TrustObjectCode mw_genericTrustObject:={
				otherTrustObject:={
					typeOfTrustObject := TrustObjectTypes_crl_,
					genericTrustObject := ?
				}
			}


			// Templates for a certificate object
			template Adus mw_adusTrustObjectCertificate:=
			mw_adusTrustObjectProtoTemp(TrustObjectCode:{certificate:=?});

			// Templates for a public key object
   			template Adus mw_adusTrustObjectPublicKey := 
   			mw_adusTrustObjectProtoTemp(TrustObjectCode:{publicKey:=?});
			
			// Templates for a Dsrc key object
   			template Adus mw_adusTrustObjectDsrcKey := 
   			mw_adusTrustObjectProtoTemp(TrustObjectCode:{dsrcMasterKeys:=?});

			// Templates for a Mac Key object
   			template Adus mw_adusTrustObjectMacKey := 
   			mw_adusTrustObjectProtoTemp(TrustObjectCode:{macMasterKey:=?});

			// Templates for a Dsrc keyRef object
   			template Adus mw_adusTrustObjectDsrcKeyRef:=
   			mw_adusTrustObjectProtoTemp(TrustObjectCode:{dsrcKeyRef:=?});

			// PT140 TODO to be defined Generic Request for Trust Object with one parameter as apduToBeRespondedTo, and another as TrustObjectCode - Ulrik: still needed? not used anywhere... 
			template InfoExchange m_apduRequestTrustObject := {}
						
			// Generic received Request for Trust Object, to receive a requestADU for any Trust Object 			
			template InfoExchange mw_apduRequestTrustObject := mw_apduNoAuthInitIut(
				mw_apci, 
				Adus:{requestAdus:={
					requestedADUType := 3,
					requestedTrustObject := ?
				}}
			);
			
			
			// Received Request for a Certificate Trust Object
			template InfoExchange mw_apduRequestTrustObjectCertificate := mw_apduNoAuthInitIut(
				Adus:{
					requestAdus:={
						requestedADUType := 3,
						requestedTrustObject:={
							trustObjectSpec :={
								typeOfTrustObject := TrustObjectTypes_certificate_,
								purposesOfTrustObject := *
							}
						}
					}
				}
			);
			
			// Received Request for a Public Key Trust Object			
			template InfoExchange mw_apduRequestTrustObjectPublicKey := mw_apduNoAuthInitIut(
				mw_apci, 
				Adus:{
					requestAdus:={{mw_aduRequestTrustObjectPublicKey}}
				}
			);

			template RequestADU mw_aduRequestTrustObjectPublicKey:={
				trustObjectRequest:={
					requestedADUType := 3,
					requestedTrustObject:={
						trustObjectId:=?,
						trustObjectSpec:={
							typeOfTrustObject:= TrustObjectTypes_publicKey_,
							purposesOfTrustObject := *
						}
					}
				}
			}

			// Generic Trust Object is requested though a requestADU carrying only the type of ADU requested			
			template InfoExchange mw_apduRequestTrustObjectGeneric := mw_apduNoAuthInitIut(
				Adus:{requestAdus:= {
					requestedADUType := 3,
					requestedTrustObject:={trustObjectSpec := omit}
				}}
			);
			
			// Received Request for a Symmetric Key Trust Object
			template InfoExchange mw_apduRequestTrustObjectSymmetricKey := mw_apduNoAuthInitIut(
				Adus:{
					requestAdus:={
						{
							requestedADUType := 3,
							requestedTrustObject:={
								trustObjectSpec:={
									typeOfTrustObject:=(TrustObjectTypes_symmetricKey_, TrustObjectTypes_encryptedSymmetricKey_),
									purposesOfTrustObject := *
								}
							}
						}
					}
				}
			);
			
		}

		group PAYMENTCLAIM {
			
			template PaymentClaimADU mw_aduPaymentClaim := {
				paymentClaimId := ?,
				startDateTime := ?,
				endDateTime := ?, // mandatory according to IAP,
				userId := ? length (1..4), // mandatory according to IAP and at least one element shall be present
				paymentClaimAmount := ?,
				paymentClaimStatus := (PaymentClaimStatus_firstVersion_, PaymentClaimStatus_amendedVersion_), // restrictions according to IAP
				typeOfFee := ?, // mandatory according to IAP
				referenceDetailsList := {{
					billingDetailsList := {{
						billingDetailsId := {
    						issuerId := ?,
    						billingDetailsNum := ?, // range 0 - 2'(63-1)
    						dateOfService := * //PT140 TODO definition for billingDeatails is missing in IAP but at other locations
    											//inside IAP the billingDetailsId shall contain NO dateOfService
    					}
    				}}
    			}}, // mandatory in IAP and the only value allowed in IAP
				actionCode := (ActionCode_send_, ActionCode_revoke_ ,ActionCode_adjust_ ), // onyl allowed values in IAP
				paymentReference := *
			}	

			//These are some extra type definitions needed for the building and matching of test data (see TP_TC_PAYMENTCLAIM_BV_01)			
			// capture received userIds and billingDetailsIds in record of as we may have received many ADUs with different
			// userIds and billingDetailsIds for later comparisoon with data in PaymentClaim
			type record of UserId ReceivedUserIdList;
			type record of BillingDetailsId BillingDetailsIdList;
			type record of BillingDetailsList ReceivedBillingDetailsIdList;
					 					
		}

		group DSRC_CONTRACTISSUERLIST {		
			template ContractIssuerListADU mw_aduContractIssuerList := {
				efcContextMark := ?,
				equipmentClass := ?,
				manufacturerID := ?,
				uniquePartOfPAN := ?,
				typeOfEFCApplication := ?,
				securityLevel := ?,
				acCrKeyReference := ?,
				authKeyRererence := ?,
				validFrom := ?
			} 		
		
			template Adus mw_recordOfAduContractIssuerList := {
				contractIssuerListADUs := ?
			}

   			template InfoExchange mw_apduContractIssuerList := m_apduNoAuth(mw_apci, Adus:{contractIssuerListADUs:=?});
			
			template InfoExchange mw_apduAuthContractIssuerList := mw_apduAuth(mw_apci, Adus:{contractIssuerListADUs:=?});


		}

		group DSRC_EFCCONTEXTDATA {						
			template EfcContextDataADU mw_aduDsrcEfcContextData := {
				entityOverview := omit,
				domainType:={
					dsrcContext:= {
						regimeContextData := {
								iso175753ADU := ?, // PT140 TODO: Details for this element are required in a receiving template (mw_..)
								feeModifiers := omit
						}
					}					
				}
			}
	
	
		
			type record DsrcClosedContext {
				ClosedContextDefinition closedContext,
				FeeModifiers feeModifiers optional
			}
			
			template DsrcClosedContext mw_dsrcClosedContext :={
				closedContext := ?,
				feeModifiers := omit
			}

			// PT140 TODO: Details for mw_dsrcClosedContext are required in a receiving template
			template EfcContextDataADU mw_aduDsrcClosedContextEfcContextData := {
				entityOverview := omit,
				domainType:={
					dsrcClosedContext := mw_dsrcClosedContext
				}
			}
			
			type record of LocalVehicleClassId RecOfLocalVehicleClassId; 
			type record of TimeClassId RecOfTimeClassId; 
			type record of UserClassId RecOfUserClassId; 
			
			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContext(
				template TollContextOverview p_tollContextOverview,
				RecOfLocalVehicleClassId p_ROfLocVehClassId,
				template LocalVehicleClassDefinition p_localVehicleClassDefinition, 
				template RecOfTimeClassId p_ROfTimeClassId, 
				template TimeClassDefinition p_timeClassDefinition, 
				template RecOfUserClassId p_ROfUserClassId,
				template UserClassDefinition p_userClassDefinition, 
				template FeeDefinition p_feeDefinition
			) := {
				entityOverview := omit,
				domainType:={
					dsrcClosedContext := {
						closedContext:={
							closedContextType:=ClosedContextType_standAloneClosedSysytem_, 
							closedSystem:={
								tollContextOverview:=omit,
								tariffClassDefinition:={
									tariffClasses:={
										{
											tariffClassId:=0,
											localVehicleClasses:=p_ROfLocVehClassId,
											timeClasses:=p_ROfTimeClassId,
											locationClasses:=omit,
											userClasses:=p_ROfUserClassId
										}
									},
									tariffClassDefinitionVersion:=m_basicVersionValidFromNow
								},
								localVehicleClassDefinition:= p_localVehicleClassDefinition,
								timeClassDefinition:=omit,
								userClassDefinition:=omit,
								feeDefinition:=p_feeDefinition
							}
						}
					}
				}
			}	

			template EfcContextDataADU m_aduDsrcEfcContextDataTestValues modifies mw_aduDsrcEfcContextData := {
				domainType:={
					dsrcContext:= {
						regimeContextData := {
							iso175753ADU := {	
								tollContextOverview := tollContextOverviewTESTER_VALUE,
								tollContextPartitionOverview := tollContextPartitionOverviewTESTER_VALUE,
								tariffTable := tariffTableTESTER_VALUE,
								currencyConversionTable := currencyConversionTableTESTER_VALUE,
								tariffClassDefinition := optSignedTariffClassDefinitionTESTER_VALUE,
								localVehicleClassDefinition := optSignedLocalVehicleClassDefinitionTESTER_VALUE,
								timeClassDefinition := optSignedTimeClassDefinitionTESTER_VALUE,
								userClassDefinition := optSignedUserClassDefinitionTESTER_VALUE,
								tollContextLayout := tollContextLayoutTESTER_VALUE,
								chargeReportingEvents := chargeReportingEventsTESTER_VALUE,
								chargeReportConfiguration := chargeReportConfigurationTESTER_VALUE,
								tollContextVersion := tollContextVersionTESTER_VALUE
							}
						}
					}
				}
			}
			
			
			template (value) VersionAndValidity m_basicVersionValidFromNow :={
				version:={
					basicVersionId:=basicVersionIdTESTER_VALUE
				},
				validFrom:=fx_getUtc()
			}			
			
			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextTollContextOverview := 
				m_aduEfcContextDataDsrcClosedContext(tollContextOverviewTESTER_VALUE,{},omit,omit,omit,omit,omit,omit);

			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextTollContextOverviewInvalidCCT 
			modifies m_aduEfcContextDataDsrcClosedContextTollContextOverview := {
				domainType:={
					dsrcClosedContext := {
						closedContext:={
							closedContextType:= 3 // only 1 or 2 are allowed
						}
					}
				}
			}

			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextTariffClassDefinition := 
				m_aduEfcContextDataDsrcClosedContext(omit,{},omit,omit,omit,omit,omit,omit);
			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextLocVehClass := 
				m_aduEfcContextDataDsrcClosedContext(omit,{1,2,3},m_localVehicleClassDefinition,omit,omit,omit,omit,omit);
			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextTimeClass := 
				m_aduEfcContextDataDsrcClosedContext(omit,{},omit,{1,2,3},m_timeClassDefinition,omit,omit,omit);
			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextUserClass := 
				m_aduEfcContextDataDsrcClosedContext(omit,{},omit,omit,omit,{1,2,3},m_userClassDefinition,omit);
			template (value) EfcContextDataADU m_aduEfcContextDataDsrcClosedContextFeeDefinition := 
				m_aduEfcContextDataDsrcClosedContext(omit,{},omit, omit,omit,omit,omit, m_feeDefinition);
			
			template (value) FeeDefinition m_feeDefinition:={
				actualPath:={
					tariffTable:=m_tariffTable,
					closedContextLayout:=m_closedContextLayout
				}
			}

			template (value) TariffTable m_tariffTable:={
				applicablePartitions := {1,2,3}, // Three partitions
				tariffs:={m_tariff(1,1),m_tariff(2,2)},
				standardCurrency := '2978'O, // Units in cents, currency Euro,
				typeOfFee := omit,
				tariffTableVersion := m_basicVersionValidFromNow
			}
			
			template (value) Tariff m_tariff(
				in TariffClassId p_tariffClass,
				in EfcAutonomousContextData.Int1 p_chargeUnitEvent
			):={
				tariffClass := p_tariffClass,
				chargeUnit:={
					event := p_chargeUnitEvent
				},
				roundingRuleForChargeUnitsUsed := RoundingRule_up_,
				basicFeePerChargeUnit := 5, // Units in cents, currency Euro
				roundingRuleForFee := RoundingRule_up_,
				vat:=omit,
				roundingRuleForVat := omit,
				intervalScaleParameters := omit,
				offsetFee := omit,
				minFee := omit,
				thresholdFee := omit,
				maxFee := omit,
				alternativeCurrency := omit
			}		
			
			template (value) ClosedContextLayout m_closedContextLayout:={
				tollOperators:=omit,
				dsrcChargeObjects:={
					m_dsrcChargeObject(1,"Charge object test description 1"),
					m_dsrcChargeObject(2,"Charge object test description 2")
				},
				internalPoints:=omit, 
				interconnectionPoints:=omit,
				closedSections:=omit,
				tollContextLayoutVersion:=m_basicVersionValidFromNow,
				tollContextAuthenticator:=omit
			}

			template (value) DSRCChargeObject m_dsrcChargeObject(
				in EfcInfoExchange.Int4 p_chargeObjectDesignation,
				in UTF8String p_chargeObjectDescription
			):={
				chargeObjectId := {
					chargeReportFinalRecipient:=omit,
					chargeObjectDesignation:=p_chargeObjectDesignation
				},
				chargeObjectDescription :=p_chargeObjectDescription,
				chargeObjectType:=ChargeObjectType_entryAndExit_,
				tollContext:=TD_IDENTIFIER,
				chargeObjectValidityStart:=omit,
				chargeObjectValidityEnd:=omit					 						 	
			} 
			

   			template InfoExchange mw_apduEfcContextData := m_apduNoAuth(mw_apci, Adus:{efcContextDataADUs:=?});
			
			template InfoExchange mw_apduAuthEfcContextData := mw_apduAuth(mw_apci, Adus:{efcContextDataADUs:=?});

			template (value) LocalVehicleClassDefinition m_localVehicleClassDefinition:={
				localVehicleClasses := {
					{
						localVehicleClassId := 1,
	    				nominalElements := {
	    					vehicleClasses := {1,2,3},
	    					vehicleTrainAxlesNumbers := omit,
	    					euroValues:=omit,
	    					copValues:=omit
	    				},
	    				ordinalElements := omit,
	    				priorityValue := omit
					}
				},
    			localVehicleClassVersion := omit			  
			}
		
			template (value) TimeClassDefinition m_timeClassDefinition:= 	{
				    timeClasses := {
				    	{
							timeClassId := 1,
							nominalElements := omit,
							ordinalElements := omit,
							priorityValue := omit
				    	}
				    },
					timeClassDefinitionVersion := omit
			}
			
			template (value) UserClassDefinition m_userClassDefinition:= 	{
				userClasses := {
					{
						userClassId := 1,
						contractTypes := omit,
						actualNumberOfPassengers := omit,
						priorityValue:=omit
					},
				    {
				    	userClassId := 2,
						contractTypes := omit,
						actualNumberOfPassengers := omit,
						priorityValue:= omit
					}				    	
				},
				userClassDefinitionVersion:=omit
			}
		}
			
		
			
		group DSRC_REPORTABNORMALOBE {
			template ReportAbnormalOBEADU mw_aduDsrcReportAbnormalObe := {
				userId := ? length(1..4), //at least one element of userId shall be present
				dateAndTime := ?,
				efcContextMark := ?,
				abnormalOBEReasonCode := ? length (1..255) //= at least one reason code shall be present in this record of integer
			}

			template Adus mw_adusReportAbnormalOBE := Adus:{reportAbnormalOBEADUs:=?};

		}
				
		group BILLINGDETAILS{

			template Adus mw_adusBillingDetails := Adus:{billingDetailsADUs:=?};
			
			group GNSS_BILLINGDETAILS{		

				template BillingDetailsADU mw_aduGnssBillingDetails :={
	    			billingDetailsId :={
	    				issuerId := ?,
	    				billingDetailsNum := (0..9223372036854775807), // range 0..2^63-1
	    				dateOfService := omit
	    				},
	    			tollContext := ?,
	    			userId :={
	    				pan := *, 
						contractSerialNumber := *,
						licencePlateNumber := *, 
						obeID := *
						},
	    			relatedBillingDetails := omit,
	    			period := ?,
	    			billingDetailsAmount := omit, 
	    			usageDetails := {
						contextName := ?,
	      				appliedUserClass := ?,
	      				perDeclaredVehicleClass := {{
	        				declaredVehicleClass := ?,
	        				perUsedTimeClasses := {{
	          					appliedTimeClass := ?,
	          					costCenter := ?, // mandatory in IAP
	          					usageList := ({mw_sectionedRoadGnssUsageList}, {mw_travellingInAreaGnssUsageList},
	          					{mw_stayingInAreaGnssUsageList}, {mw_cordonCrossingGnssUsageList})
	          				}}
	          			}}  			
					},
	    			refTollDeclaration := ?,
	    			associatedEventData := omit,
	    			actionCode := (ActionCode_send_, ActionCode_revoke_ ,ActionCode_adjust_ ),
	    			paymentReference := *
	  			}			
			
				template (value) UsageList mw_sectionedRoadGnssUsageList := {
					usageListEntry :={
						forSectionedRoads := {		
							howManyTimes := (0..9223372036854775807), // range 0..2^63-1
							listOfSections := {mw_sections}, // mandatory in IAP 
							invoiceAggregationNumber := omit, //shall not be used in IAP
							fee := omit, // shall mot be used in IAP,
							feeQualifier := omit // shall not be used in IAP
						}
					},
					includedDiscounts := *,
					associatedEventData := omit, // shall not be used in IAP
					externalCosts := *
				}
	
				template (value) Section mw_sections := {
					tollContext := omit, // shall not be used in IAP
					chargeObjectId := ?,
					chargeObjectName := omit, // shall not be used in IAP
					tollEventId := ?, // mandatory in IAP
					tollEventTime := ?, // mandatory in IAP
					modeOfOperation := omit // shall not be used in IAP
	  			}
	
				template (value) UsageList mw_travellingInAreaGnssUsageList := {
					usageListEntry := {
						forTravellingInArea := {		
	        				areaDisplayName := ?,
	        				accumulatedDistance := ?,
	        				beginOfAccumulation := *,
	        				endOfAccumulation := *,
	        				fee := omit, // shall not be used in IAP
	        				feeQualifier := omit // shall not be used in IAP
						}
					},
					includedDiscounts := {{*}},
					associatedEventData := omit, // shall not be used in IAP
					externalCosts := *
				}
	
				template (value) UsageList mw_stayingInAreaGnssUsageList := {
					usageListEntry :={
						forStayingInArea :={		
							areaDisplayName := ?,
							qualifier := *,
							stayedDuration := ?,
	        				chargeUnit := (ChargeUnit:{time:=?}), //event and distance shall not be used
	        				fee := omit, // shall not be used in IAP
	        				feeQualifier := omit // shall not be used in IAP
						}
					},
					includedDiscounts := {{*}},
					associatedEventData := omit, // shall not be used in IAP
					externalCosts := *
				}
	
				template (value) UsageList mw_cordonCrossingGnssUsageList := {
					usageListEntry :={
						forCordonCrossing :={		
							qualifier := *,
	        				entranceChargeObject := ?,
	        				entranceChargeObjectName := *,
	        				exitChargeObject := ?, // mandatory in IAP
	        				exitChargeObjectName := omit, //shall not be used in IAP
	        				exitTime := ?, // mandatory in IAP
	        				fee := omit, // shall not be used in IAP
	        				feeQualifier := omit // shall not be used in IAP				}
					},
					includedDiscounts := {{*}},
					associatedEventData := omit, // shall not be used in IAP
					externalCosts := *
				}
			}
			}
													 							
			group DSRC_BILLINGDETAILS {
			
				template BillingDetailsADU mw_aduDsrcBillingDetails :={
	    			billingDetailsId :={
	    				issuerId := ?,
	    				billingDetailsNum := (0..9223372036854775807), // range 0..2^63-1
	    				dateOfService := omit
	    				},
	    			tollContext := ?,
	    			userId :={
	    				pan := *, 
						contractSerialNumber := *,
						licencePlateNumber := *, 
						obeID := *
						},
	    			relatedBillingDetails := *,
	    			period := omit,
	    			billingDetailsAmount := {
	    				paymentFeeAmount := ?,
						paymentFeeUnit := ?,
						vatRate := ?
						}, 
	    			usageDetails := mw_dsrcUsageDetails, // TODO PT140: template mw_dsrcUsageDetails to be created
	    			refTollDeclaration := {omit},
	    			associatedEventData := {omit},
	    			actionCode := (ActionCode_send_, ActionCode_revoke_ ,ActionCode_adjust_ ),
	    			paymentReference := *
	  			}
	  			
	  			template (value) BillingDetailsADU m_aduDsrcBillingDetails(in integer p_billingDetailsNum:=TD_BILLING_DETAILS_NUM):={
					billingDetailsId := {
						issuerId:=TD_INFORMATION_SENDER_FOR_TESTER,
						billingDetailsNum:=p_billingDetailsNum,
						dateOfService:=omit				
					}, 
					tollContext:=TD_TOLL_CONTEXT,
	    			userId :=TD_BILLINGDETAILS_USERID,
	    			relatedBillingDetails :=omit,
	    			period :=omit,
	    			billingDetailsAmount:={
						paymentFeeAmount:=TD_DSRC_PAYMENT_FEE_AMOUNT,
						paymentFeeUnit := TD_DSRC_BILLINGDETAILS_PAYUNIT,
						vatRate:=TD_DSRC_BILLINGDETAILS_VAT
				  	},
				    usageDetails:= m_dsrcUsageDetails,
				    refTollDeclaration:=omit,
				    associatedEventData:=omit,
				    actionCode:= ActionCode_send_,
				    paymentReference:=omit
	  			}					  			
	  			
				template (value) UsageDetails m_dsrcUsageDetails:={
					contextName:=TD_DSRC_BILLINGDETAILS_CONTEXTNAME,
					appliedUserClass:=TD_DSRC_BILLINGDETAILS_USERCLASS,
					perDeclaredVehicleClasses:={{
						declaredVehicleClass:=TD_DSRC_BILLINGDETAILS_DECLAREDVEHCLASS,
						perUsedTimeClasses:={{
							appliedTimeClass:=TD_DSRC_BILLINGDETAILS_TIMECLASS,
							usageList:={{
								freeTextDetail:={
									textLanguage:=TD_DSRC_BILLINGDETAILS_LANG,
									textDetail:=TD_DSRC_BILLINGDETAILS_TEXT,
									fee:={
										paymentFeeAmount:=TD_DSRC_PAYMENT_FEE_AMOUNT,
										paymentFeeUnit := TD_DSRC_BILLINGDETAILS_PAYUNIT,
										vatRate:=TD_DSRC_BILLINGDETAILS_VAT
									},
									feeQualifier:=FeeQualifier_standardCharge_
								}
							}}
						}}
					}}
				};
				
				template (value) BillingDetailsADU m_aduGnssBillingDetails modifies mw_aduGnssBillingDetails:= { // original template with wildcards, but now all given values below
					billingDetailsId:= {
						issuerId := TD_IDENTIFIER,
						billingDetailsNum := 1
						},
					tollContext := TOLL_CONTEXT_ID_IUT,
					userId := TD_USERID_1,
					period := TD_PERIOD_1,
					usageDetails := {
						contextName := TOLL_CONTEXT_NAME_IUT,
						appliedUserClass := TD_USER_CLASS,
						perDeclaredVehicleClass := {{
							declaredVehicleClass := TD_DECLARED_VEHICLE_CLASS,
							perUsedTimeClasses := {{
								appliedTimeClass := TD_APPLIED_TIME_CLASS,
								costCenter := TD_COST_CENTER,
								usageList := {m_sectionsUsed} 
							}}
						}}
					},
					refTollDeclaration := {TD_IDENTIFIER, 1},
					actionCode := ActionCode_send_,
					paymentReference := omit 				  		
				};
				
				template (value) UsageList m_sectionsUsed modifies mw_sectionedRoadGnssUsageList := {
					usageListEntry:= {
						forSectionedRoads:= {		
							howManyTimes := 1,
							listOfSections := {mw_section := {
								chargeObjectId := TD_CHARGE_OBJECT_ID,
								tollEventId := TD_TOLL_EVENT_ID, // mandatory in IAP
								tollEventTime := TD_TOLL_EVENT_TIME // mandatory in IAP
							}} 
						}
					},
					includedDiscounts := {{
						textLanguage := omit,
						textDetail := omit,
						discount := TD_DISCOUNT_AMOUNT,
						discountQualifier := TD_DISCOUNT_QUALIFIER
					}},
					externalCosts := omit
				};
				
			}	    			
		}
				
		group GNSS_TOLLDECLARATIONS {
   			template Adus mw_adusTollDeclaration := Adus:{tollDeclarationADUs:=?};
			
			template (value) TollDeclarationADU m_aduTollDeclaration(in integer p_declarationId, in EfcAutonomousContextData.Int4 p_chargeReportCounter):={
				tollDeclarationId:={
					issuerId:=TD_IDENTIFIER,
					declarationId:=p_declarationId
				},
				gnssTollDeclaration:={
					{
						chargeReport:={
							protocolVersion:=AidIdentifier_iso17575_1_2016_,
							obeId:={
								manufacturerId:=1,		//TODO Jan Check correct values of this number, does it need to be in a modulepar?
								equipmentObuId:='01'O	//TODO Jan Check correct values of this number, does it need to be in a modulepar?
							},
							vehicleLPNr:={
								countryCode:='0000000001'B,//TODO Jan Check correct values of this number, does it need to be in a modulepar?
								alphabetIndicator:=latinAlphabetNo1,//TODO Jan Check correct values of this number, does it need to be in a modulepar?
								licencePlateNumber:='001122001122'O //TODO Jan Check correct values of this number, does it need to be in a modulepar?
							},
							paymentMeans:={
								personalAccountNumber:='00000000000000000001'O,//TODO Jan Check correct values of this number, does it need to be in a modulepar?
								paymentMeansExpiryDate:={
									year:=2100,
									month:=1,
									day:=1
								},  
								pamentMeansUsageControl:='0001'O //TODO Jan Check correct values of this number, does it need to be in a modulepar?
							},
							tollContext:=TD_IDENTIFIER,//TODO Jan Check correct values of this number,
							serviceProviderContract:={
								contractProvider:=TD_IDENTIFIER,//TODO Jan Check correct values of this number
								typeOfContract:='0001'O, //TODO Jan Check what is a valid value for typeOfContract
								contextVersion:=1
							},
							usageStatementList:={
								{
									usageStatement:={
										usageStatementId:=1,
										tollContext:= TD_IDENTIFIER//TODO Jan Check correct values of this number, shall be identical to attribute tollContext of Chargereport
										//TODO Jan need to figure which way to use charge objects to use here below. I think one needs to be chosen
										//TODO Jan WARNING there are several PARAMS that needs to be taken into account here GNSS.TOLLDECLARATION.PARAM1-2-3-4-5_MAX
										//	        AggregatedSingleTariffClassSession  aggregatedSingleTariffClassSession optional,
										//	        set of DetectedChargeObject         listOfChargeObjects optional,
										//	        ListOfRawUsageData                  listOfRawUsageData optional,
									}
								}
							},
							chargeReportCounter:=p_chargeReportCounter
						}
					}
				},
				actionCode:=omit
			}

// different approach which may hopefully supprt re-useability and flexibility
// @Ulrik: please have a look into this one
// Below this shall be a generic template which can be used as base for sending and receiving TollDeclaration ADUs

			template TollDeclarationADU mw_aduTollDeclaration := {
				tollDeclarationId := ?, // shall be present 
				gnssTollDeclaration := {
					{
						chargeReport := {
							protocolVersion:= AidIdentifier_iso17575_1_2016_,
							obeId := ?, // mandatory in ISO 16986
							vehicleLPNr := ?, // mandatory in ISO 16986
							paymentMeans := ?, // mandatory in IS 16896
							serviceProviderContract := ?, // mandatory in ISO 12855
							tollContext:= ?, // can be Tester or IUT Id
							chargeReportFinalRecipient := omit, // shall not be used in ISO 16986 
							timeOfReport := omit, // shall not be used
							reportPeriod := *, // may or may not be present
							versionId := *, // may or may not be present
							usageStatementList := { // shall be present in ISO 16986
								{
									usageStatement := ?
								}
							}, 
							sumVatForThisSession := omit, // shall not be used in ISO 16986 
							accountStatus := omit, // shall not be used in ISO 16986
							chargeReportCounter := ?, // mandatory in ISO 16986
							mileage := omit, // shall not be used in ISO 16986
							listOfCccAttributes := omit // shall not be used in IS 16986
						}
					}
				},
				actionCode:= (ActionCode_send_, ActionCode_revoke_ ,ActionCode_adjust_ )
			}

			// this is a template which can be used be the tester
			// omitted fields accdoring to ISO16986 rules are not present
			// parameters allow the tester to modify data per invividual TollDeclaration ADU
			// can be used for valid and invalid Toll Declarations
			// allows for one TollDeclaration / Charge Report and one UsageStatement 
			// TODO Jan: to be revised to allow for a list for charge repprts and a list of usage statements  

			template (value) TollDeclarationADU m_aduTollDeclarationToSend (
				in TollDeclarationId p_tollDeclarationId,
				in ObeId p_obeId,
				in VehicleLicencePlateNumber p_vehicleLPNr,
				in PaymentMeans p_paymentMeans,
				in EFC_ContextMark p_serviceProviderContract,
				in Provider p_tollContext,
				in UsageStatement p_usageStatement,
				in EfcAutonomousContextData.Int4 p_chargeReportCounter,
				in ActionCode p_actionCode) 
			modifies mw_aduTollDeclaration:={
				tollDeclarationId := p_tollDeclarationId, // shall be present 
				gnssTollDeclaration := {
					{
						chargeReport := {
							protocolVersion := AidIdentifier_iso17575_1_2016_,
							obeId := p_obeId, // mandatory in ISO 16986
							vehicleLPNr := p_vehicleLPNr, // mandatory in ISO 16986
							paymentMeans := p_paymentMeans, // mandatory in IS 16896
							serviceProviderContract := p_serviceProviderContract, // mandatory in ISO 12855
							tollContext:= p_tollContext, // shall be Tester
							reportPeriod := omit, // Tester decides this shall not be present
							versionId := omit, // Tester decides this shall not be present
							usageStatementList := {
								{
								usageStatement := p_usageStatement // shall be present in ISO 16986
								}
							},
							chargeReportCounter := p_chargeReportCounter // mandatory in ISO 16986
						}
					}
				},
				actionCode:= p_actionCode // may be send, revoke or adjust
			}

			// Below you find a modified template for Toll Declaration ADUs to be sent by the Tester
			// all for the same vehicle, same LPN, same PaymentMeans, same TSP contract, same context
			// but different Id and usage Statement 
			// of course all Tester data are to be defined in module TesterData
			// TODO Jan review. I changed the definition to avoid duplication and potential inconsistencies
			// TODO Jan check possibility for inserting a list of Charge Reports in one ADU ...  
			template (value) TollDeclarationADU m_aduTollDeclarationToSendOneObe(
				in TollDeclarationId p_tollDeclarationId,
				in UsageStatement p_usageStatement,
				in EfcAutonomousContextData.Int4 p_chargeReportCounter,
				in ActionCode p_actionCode
			):=m_aduTollDeclarationToSend(
				p_tollDeclarationId,
				TD_OBE_ID_1,
				TD_LPN_1,
				TD_PAYMENT_MEANS_1,
				TD_SERVICE_PROVIDER_CONTRACT,
				TD_TOLL_CONTEXT,
				p_usageStatement,
				p_chargeReportCounter,
				p_actionCode
			); 

			// below this is a generic template for a ChargeReprt
			template ChargeReport mw_chargeReport := {
				protocolVersion:= AidIdentifier_iso17575_1_2016_,
				obeId := ?, // mandatory in ISO 16986
				vehicleLPNr := ?, // mandatory in ISO 16986
				paymentMeans := ?, // mandatory in ISO 16896
				serviceProviderContract := ?, // mandatory in ISO 12855
				tollContext:= ?, // can be Tester or IUT Id
				chargeReportFinalRecipient := omit, // shall not be used in ISO 16986 
				timeOfReport := omit, // shall not be used
				reportPeriod := *, // may or may not be present
				versionId := *, // may or may not be present
				usageStatementList := {  // shall be present in ISO 16986
					{usageStatement := ?}
				}, 
				sumVatForThisSession := omit, // shall not be used in ISO 16986 
				accountStatus := omit, // shall not be used in ISO 16986
				chargeReportCounter := ?, // mandatory in ISO 16986
				mileage := omit, // shall not be used in ISO 16986
				listOfCccAttributes := omit // shall not be used in IS 16986
			}
			
			// Below this is a generic template for a UsageStatement
			template UsageStatement mw_usageStatement := {
				usageStatementId := ?, // mandatory in ISO 16986
				tollContext := ?, // mandatory in ISO 16986
				chargeReportFinalRecipient := omit, // shall not be used in ISO 16986
				aggregatedFee := omit, // shall not be used in ISO 16986
				sumVat := omit, // shall not be used in ISO 16986
				aggregatedSingleTariffClassSession := *, // TC may use it, but mandatory for TSP
				listOfChargeObjects := *, // TC may use it, but mandatory for TSP
				listOfDsrcUsageData := omit, // shall not be used in ISO 16986
				listOfRawUsageData := *,// TC may use it, but mandatory for TSP
				noUsage := omit, // shall not be used in ISO 16986
				additionalUsageInformation := *
			}

		// Relevant data types below, for easy reference		
		//
		//		type record TollDeclarationId {
		//		  EfcDsrcApplication.Provider issuerId,
		//		  integer declarationId
		//		}
		//				
		//		type record TollDeclarationADU {
		//		  TollDeclarationId tollDeclarationId,
		//		  record of union {
		//			ChargeReport chargeReport,
		//			EfcAutonomousCharging.AuthenticatedChargeReport authenticatedChargeReport
		//		  } gnssTollDeclaration,
		//		  ActionCode actionCode optional
		//		}
		//		
		//		type record ChargeReport {
		//	        EfcAutonomousCharging.AidIdentifier protocolVersion,
		//	        ObeId                               obeId optional,
		//	        VehicleLicencePlateNumber           vehicleLPNr optional,
		//	        PaymentMeans                        paymentMeans optional, 
		//	        EFC_ContextMark                     serviceProviderContract,
		//	        Provider                            tollContext optional,
		//	        Provider                            chargeReportFinalRecipient optional,
		//			ASNAUX.GeneralizedTime              timeOfReport optional,
		//	        Period                              reportPeriod optional,
		//	        VersionId                           versionInfo optional,
		//			record of union {
		//				UsageStatement usageStatement,
		//				AuthenticatedUsageStatement authenticatedUsageStatement
		//			} usageStatementList,
		//			PaymentFee                          sumVatForThisSession optional,
		//	        AccountStatus                       accountStatus optional,
		//	        EfcAutonomousContextData.Int4       chargeReportCounter optional,
		//	        Distance                            mileage optional,
		//	        set of CccAttributes                listOfCccAttributes optional
		//		}
		//		
		//		type record EFC_ContextMark {
		//			Provider contractProvider,
		//			octetstring typeOfContract length (2),
		//			integer contextVersion (
		//			0 .. 127, 
		//			?
		//			)
		//		}
		//		
		//		type record UsageStatement {
		//			EfcDsrcApplication.Int2				usageStatementId optional,
		//	        Provider                            tollContext optional,
		//	        Provider                            chargeReportFinalRecipient optional,
		//	        AggregatedFee                       aggregatedFee optional,
		//	        PaymentFee                          sumVat optional,
		//	        AggregatedSingleTariffClassSession  aggregatedSingleTariffClassSession optional,
		//	        set of DetectedChargeObject         listOfChargeObjects optional,
		//	        ListOfDsrcUsageData                 listOfDsrcUsageData optional,
		//	        ListOfRawUsageData                  listOfRawUsageData optional,
		//	        boolean                             noUsage optional,
		//	        octetstring                         additionalUsageInformation optional
		//	    }
		//
		//		ObeId ::= SEQUENCE {
		//			manufacturerId			Int2, 			-- see ObeConfiguration in 14906
		//			equipmentObuId			EquipmentOBUId
		//		}
				
		//		LPN::= SEQUENCE {
		//			countryCode CountryCode,
		//			alphabetIndicator ENUMERATED {
		//				latinAlphabetNo1 (1), -- encoded as 00 00 00'B
		//				latinAlphabetNo2 (2), -- encoded as 00 00 01'B etc
		//				latinAlphabetNo3 (3),
		//				latinAlphabetNo4 (4),
		//				latinCyrillicAlphabet (5),
		//				latinArabicAlphabet (6),
		//				latinGreekAlphabet (7),
		//				latinHebrewAlphabet (8),
		//				latinAlphabetNo5 (9),
		//				latinAlphabetNo6 (10),
		//				twoOctetBMP (11),
		//				fourOctetCanonical (12),
		//				reservedForUse1 (13),
		//				reservedForUse2 (14),
		//				reservedForUse3 (15),
		//				reservedForUse4 (16),
		//				reservedForUse5 (17),
		//				reservedForUse6 (18),
		//				reservedForUse7 (19),
		//				reservedForUse8 (20),
		//				reservedForUse9 (21),
		//				reservedForUse10 (22),
		//				reservedForUse11 (23),
		//				reservedForUse12 (24),
		//				reservedForUse13 (25),
		//				reservedForUse14 (26),
		//				reservedForUse15 (27),
		//				reservedForUse16 (28),
		//				reservedForUse17 (29),
		//				reservedForUse18 (30),
		//				reservedForUse19 (31),
		//				reservedForUse20 (32),
		//				reservedForUse21 (33)
		//			} -- 6 bits, latinAlphabetNo1 recommended -- ,
		//			-- refer to Annex E for conversion from LatinAlphabetNo 2
		//			-- and 5 to Latin AlphabetNo1
		//			licencePlateNumber OCTET STRING
		//		}
		//
		//  type record PaymentMeans {
		//    PersonalAccountNumber personalAccountNumber,
		//    DateCompact paymentMeansExpiryDate,
		//    octetstring pamentMeansUsageControl length (2)
		//  }
		//
		//	DateCompact::= SEQUENCE {
		//		year INTEGER (1990..2117),
		//		month INTEGER (0..12), -- Value zero shall not be used
		//		-- except with 1990 - see below.
		//		day INTEGER (0..31) -- Value zero shall not be used
		//		-- except with 1990 ï¿½ see below.
		//	}	
    
		}

		group GNSS_PAYMENTANNOUNCEMENT {

			template PaymentAnnouncementADU mw_aduPaymentAnnouncement := {
				paymentAnnouncementID := (0..9223372036854775807), // range restriction from IAP is 0..2^63-1
				dueDate := ?,
				totalamount := ?,
				paymentStatus := ?,
				numberOfItems := ?, // mandatory according to IAP
				referenceDetailsList := {{// mandatory according to IAP
					referenceDetail := ?,
					amount := ?,
					paymentMeansType := (*, (0..255)),
					valueDate := *,
					interestAmount := *
				}},
				attachment := (*, (0..2147483647)), //2^31-1, restrictions from IAP
				actionCode := (ActionCode_send_, ActionCode_revoke_ ,ActionCode_adjust_ )
			} 					
		}
	}
}

