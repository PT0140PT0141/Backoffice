/**
 * @author  PT0140  
 * @desc    This module provides common templates for both Toll Charger and Toll Service Provider TCs. Most of these templates shall be used to modify the new ones.
 * @see     [17154-1:2017]: Test suite structure and test purpose
 * @see     Electronic fee collection — Evaluation of implementation for conformity to CEN/TS 16986 — Part 1: Test suite structure and purposes
 * @remark  See Annex C - Data structures
 * @version $id$
 */
module EfcInfoExchange_Templates language "TTCN-3:2010 Advanced Parameterization" {
	
	//importing other modules
	import from EfcInfoExchange_Pixits all;
	import from EfcInfoExchange_Ics all;
	import from EfcInfoExchange_Functions all;
	
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;
	/**
     * @desc    [17575-1:2016], Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    [17575-3:2016], Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 4: Roaming
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcDsrcApplication language "ASN.1:1997" all;
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parametrised_Asn1_Data TTCN-3 module is a workaround
     */

	//importing ASN.1 data manually translated into TTCN-3
	import from EfcInfoExchange_ParameterisedAsn1Data all;  
    import from Common_ParametrisedAsn1Data all;
    
    group ApduTemplates {
        
        /**
         * @desc    Generic template for InfoExchange structure, without authentication     
         */
    	template InfoExchange m_apduNoSec(in ApciFields p_apci, in Adus p_adus):={
    	  infoExchangeContent:={
    	  	apci:=p_apci,
    	  	adus:=p_adus
    	  },
    	  infoExchangeAuthenticator := omit
    	}
    
    	/**
         * @desc Generic template for ApciFields 
         */
    	template ApciFields mw_apci := { 
    		aidIdentifier := 1, // 12855 Protocol Version number 
    		apduOriginator := ?, // Source of the content of the APDU 
    		informationSenderID := ?, // Sender of this content 
    		informationrecipientID := ?,  
    		apduIdentifier := ?,
    		previousApduId := *,
    		nextApduId := omit,
    		inResponseToApduId := *, 
    		apduDate :=  ?
    	}
    	
    	/**
         * @desc Template for ApciFields sent by the Tester     
         */
    	template ApciFields mw_apciSend modifies mw_apci:= {			
    		apduOriginator := APDU_ORIGINATOR_FOR_TESTER,  
    		informationSenderID := INFORMATION_SENDER_ID_FOR_TESTER, 
    		informationrecipientID := INFORMATION_SENDER_ID_FOR_IUT,
    		previousApduId:=omit,
    		//apduIdentifier shall be a unique identifier for each given apduOriginator that is assigned by the apduOriginator. 
    		//It is used to either acknowledge or request retransmission of a previously issued APDU.
    		apduIdentifier := float2int(rnd()) * 65535
    	}
    	  	

    	/**
    	 * 
		* @desc Template for ApciFields for APDUs sent by the Tester as a response     
		*/
	   template (value) ApciFields m_apciSendResponse(in InfoExchange p_apduBeingRespondedTo) modifies mw_apciSend:= {			
			inResponseToApduId := {
				apduOriginator:=p_apduBeingRespondedTo.infoExchangeContent.apci.apduOriginator,
				apduIdentifier:=p_apduBeingRespondedTo.infoExchangeContent.apci.apduIdentifier
			},
		   	apduDate:=fx_getUtc()
	   }
    	
    	/**
    	 * 
         * @desc Template for ApciFields for initiating APDUs sent by the Tester     
         */
    	template (value) ApciFields m_apciSendFirst modifies mw_apciSend:= {			
    		inResponseToApduId := omit,
    		apduDate:=fx_getUtc()
    	}
    	
    	/**
    	 * 
    	 * @desc Corresponds to the event Initiating_Apdu desribed in test purposes.
    	 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier and apduDate = valid date, 
    	 * @desc optional fields on all levels not present" 
    	 */ 
    	template (value) InfoExchange m_apduNoSecInit(in Adus p_adus) := m_apduNoSec(
     		m_apciSendFirst, 
     		p_adus
     	);

    	/**
    	 * 
    	 * @desc Corresponds to the event Default_Apdu desribed in test purposes.
		 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier, 
		 * @desc inResponseToApduId = the apduId of the APDU carrying the ADU that is being responded to and 
		 * @desc apduDate = valid date, other optional fields on all levels not present" 
    	 */ 
		template (value) InfoExchange m_apduDefault(in InfoExchange p_apduToRespondTo, in Adus p_adus) := m_apduNoSec(
			m_apciSendResponse(p_apduToRespondTo), 
			p_adus
	    );

		/**
		 * 
		 * @desc Corresponds to the event Default_Ack_Apdu desribed in test purposes.
    	 * @desc Definition: "Default_Apdu containing one AckADU containing {apduAckCode =: apduOK(2)}, with issues being not present" 
		 */ 
		template (value) InfoExchange m_apduDefaultAck(in InfoExchange p_apduToAck) := m_apduDefault(
    		p_apduToAck, 
    		{m_aduDefaultAck}
	    );

    	//def event NAck_Apdu(zero or more sets of Param defined as {aduPosition, aduReasonCode}) "Default_Apdu containing one AckADU containing {apduAckCode= apduOK(2), issues containing one element for each Param set containing {issueADUStruct=aduPosition, issueCode = aduReasonCode }}"
    	//NOTE	the NAck_Apdu definition assumes that there are some valid ADUs in the APDU it is responding to (otherwise an apduAckCode  = apduNotOK(3) might have been a feasible answer
    	//def event NAck_requestSentTooOften "Default_Apdu containing one AckADU containing {apduAckCode= requestSentTooOften(10)}"
    	
      
		template AckADU mw_aduDefaultAck := {
			apduIdentifier := ?,
			explicitlyAckedAdus := omit,
			apduAckCode := ?,
			apduAckText := omit,
			issues := *
		}

    	template AckADU m_aduDefaultAck(in InfoExchange p_apduToAck) := {
            apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
            explicitlyAckedAdus := omit,
            apduAckCode := ApduReasonCode_apduOK_ ,
            apduAckText := omit,
            issues := omit
    	}
    }
    
	group TransactionTemplates{
		
		
		group USERDETAILS {
	
			type record of UserParameterRequest UserParameterRequests;

    		template RequestADU mw_aduRequestProvideUserDetails := {
        		userDetailsRequest:={	
            	  	requestedADUType := AduType_provideUserDetailsADU_,
            	  	userId := DEFINED_USER_ID,
            		listOfParametersRequested := ?,
            		userDetailsRequestReason := omit,
            		userInfoValidityPeriod := omit
        		}
        	}
        	
        	template (value) RequestADU m_aduRequestProvideUserDetails(UserParameterRequests p_userParameterRequests) modifies mw_aduRequestProvideUserDetails := {
        		userDetailsRequest:={	
					listOfParametersRequested := p_userParameterRequests
        		}
        	}
        	       			
        //	template ProvideUserDetailsADU mw_userDetailsPrivacy_apduIdentifier := {
        //        originaluserIdRequest := DEFINED_USERID,
        //        userId := *,
        //        statusFlag := * ,
        //        listOfUserParameters.UserParameterResponse := omit,
        //        listOfUserParameters.userParameterResponse := *,
        //        listOfUserParameters.userParameterStatus := 2,
        //        listOfUserParameters.userInfoValidityPeriod := omit
        //	}
        	
        	template ProvideUserDetailsADU mw_aduProvideUserDetails := {
            	originaluserIdRequest := DEFINED_USER_ID,
            	userId := ?,
            	statusFlag := * ,
            	listOfUserParameters := *
        	}
        	
    	
        	template Adus mw_adusProvideUserDetails := {
				provideUserDetailsADUs:=mw_aduProvideUserDetails length(1..infinity)
        	}
        	
			template InfoExchange mw_apduProvideUserDetails := m_apduNoSec(mw_apci, mw_adusProvideUserDetails);
        		
		}
		group LISTOFUSERS {}
		group EXCEPTIONLIST {}
		group TRUSTOBJECTS {}
		group PAYMENTCLAIM{}
		group DSRC_CONTRACTISSUERLIST{}
		group DSRC_EFCCONTEXTDATA {}
		group DSRC_BILLINGDETAILS{}
		group DSRC_REPORTABNORMALOBE {}
		group GNSS_TOLLDECLARATIONS {}
		group GNSS_BILLINGDETAILS_TSP{}
		group GNSS_BILLINGDETAILS_TC {}
		group GNSS_PAYMENTANNOUNCEMENT {}

    	//PT140 TODO could they be grouped with the structures they belong to?
        const integer c_semanticError := 3000;
      	const integer c_actionCodeNotSupported := 3010;
     	const integer c_acceptedWithWarning := 4000;
    	const integer c_sequenceError := 4;
		const integer c_otherReason := 5;
		const integer c_protocolVersionError := 6;
		const integer c_originatorRejected := 7;
		const integer c_recipientUnknown := 8;
		const integer c_relatedApduUnknown := 9;
		const integer c_nackRequestSentTooOften := 10 ;
	}
}