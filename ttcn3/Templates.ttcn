/**
 * @author  PT0140  
 * @desc    This module provides common templates for both Toll Charger and Toll Service Provider TCs. Most of these templates shall be used to modify the new ones.
 * @see     [17154-1:2017]: Test suite structure and test purpose
 * @see     Electronic fee collection — Evaluation of implementation for conformity to CEN/TS 16986 — Part 1: Test suite structure and purposes
 * @remark  See Annex C - Data structures
 * @version $id$
 */
module EfcInfoExchange_Templates language "TTCN-3:2010 Advanced Parameterization" {
	
	//importing other modules
	import from EfcInfoExchange_Pixits all;
	import from EfcInfoExchange_Ics all;
	import from EfcInfoExchange_Functions all;
	
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;
	/**
     * @desc    [17575-1:2016], Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    [17575-3:2016], Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 4: Roaming
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcDsrcApplication language "ASN.1:1997" all;
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parametrised_Asn1_Data TTCN-3 module is a workaround
     */

	//importing ASN.1 data manually translated into TTCN-3
	import from EfcInfoExchange_ParameterisedAsn1Data all;  
    import from Common_ParametrisedAsn1Data all;
	import from EfcInfoExchangeProfile all;
    
    group ApduTemplates {
        
        /**
         * @desc    Generic template for InfoExchange structure, without authentication     
         */
    	template InfoExchange m_apduNoSec(in template ApciFields p_apci, in template Adus p_adus):={
    	  infoExchangeContent:={
    	  	apci:=p_apci,
    	  	adus:=p_adus
    	  },
    	  infoExchangeAuthenticator := omit
    	}
    	
        
        /**
         * @desc    Generic template for InfoExchange structure, with authentication     
         */
    	template InfoExchange m_apduSec(in template ApciFields p_apci, in template Adus p_adus):={
    	  infoExchangeContent:={
    	  	apci:=p_apci,
    	  	adus:=p_adus
    	  },
    	  infoExchangeAuthenticator := *
    	}
    
    	/**
         * @desc Generic template for ApciFields 
         */
    	template ApciFields mw_apci := { 
    		aidIdentifier := 1, // 12855 Protocol Version number 
    		apduOriginator := ?, // Source of the content of the APDU 
    		informationSenderID := ?, // Sender of this content 
    		informationrecipientID := ?,  
    		apduIdentifier := ?,
    		previousApduId := *,
    		nextApduId := omit,
    		inResponseToApduId := *, 
    		apduDate :=  ?
    	}
    	
    	/**
         * @desc Template for ApciFields sent by the Tester     
         */
    	template ApciFields mw_apciSend modifies mw_apci:= {			
    		apduOriginator := APDU_ORIGINATOR_FOR_TESTER,  
    		informationSenderID := INFORMATION_SENDER_ID_FOR_TESTER, 
    		informationrecipientID := INFORMATION_SENDER_ID_FOR_IUT,
    		previousApduId:=omit,
    		//apduIdentifier shall be a unique identifier for each given apduOriginator that is assigned by the apduOriginator. 
    		//It is used to either acknowledge or request retransmission of a previously issued APDU.
    		apduIdentifier := float2int(rnd()) * 65535
    	}
    	  	

    	/**
    	 * 
		* @desc Template for ApciFields for APDUs sent by the Tester as a response     
		*/
	   template (value) ApciFields m_apciSendResponse(in InfoExchange p_apduBeingRespondedTo) modifies mw_apciSend:= {			
			inResponseToApduId := {
				apduOriginator:=p_apduBeingRespondedTo.infoExchangeContent.apci.apduOriginator,
				apduIdentifier:=p_apduBeingRespondedTo.infoExchangeContent.apci.apduIdentifier
			},
			// TODO PT140: Check whether the function is evaluated at run time. If not, time  has to be set within the test case
		   	apduDate:=fx_getUtc()
	   }
    	
    	/**
    	 * 
         * @desc Template for ApciFields for initiating APDUs sent by the Tester     
         */
    	template (value) ApciFields m_apciSendFirst modifies mw_apciSend:= {			
    		inResponseToApduId := omit,
    		apduDate:=fx_getUtc()
    	}
    	
    	/**
    	 * 
    	 * @desc Corresponds to the event Initiating_Apdu desribed in test purposes.
    	 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier and apduDate = valid date, 
    	 * @desc optional fields on all levels not present" 
    	 */ 
    	template (value) InfoExchange m_apduNoSecInit(in Adus p_adus) := m_apduNoSec(
     		m_apciSendFirst, 
     		p_adus
     	);

    	/**
    	 * 
    	 * @desc Corresponds to the event Default_Apdu described in test purposes.
		 * @desc Definition: "An APDU with the APCI-fields set to informationRecipientId = Tester identifier, 
		 * @desc inResponseToApduId = the apduId of the APDU carrying the ADU that is being responded to and 
		 * @desc apduDate = valid date, other optional fields on all levels not present" 
    	 */ 
		template (value) InfoExchange m_apduDefault(in InfoExchange p_apduToRespondTo, in Adus p_adus) := m_apduNoSec(
			m_apciSendResponse(p_apduToRespondTo), 
			p_adus
	    );

		template (value) Adus m_oneAckInAdusStruct(in AckADU p_ackADU):={ackAdus:={p_ackADU}};
		
		/**
		 * 
		 * @desc Corresponds to the event Default_Ack_Apdu described in test purposes.
		 * @desc Definition: "Default_Apdu containing one AckADU containing {apduAckCode =: apduOK(2)}, with issues being not present" 
		 */ 
		template (value) InfoExchange m_apduDefaultAck(in InfoExchange p_apduToAck) := m_apduDefault(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduDefaultAck(p_apduToAck))
		);

		/**
		 * 
		 * @desc Corresponds to the event NAck_Apdu described in test purposes.
    	 * @desc Definition: "NAck_Apdu(zero or more sets of Param defined as {aduPosition, aduReasonCode}) 
    	 * @desc "Default_Apdu containing one AckADU containing {apduAckCode= apduOK(2), issues containing one 
    	 * @desc element for each Param set containing {issueADUStruct=aduPosition, issueCode = aduReasonCode }}"
    	 * @desc NOTE	the NAck_Apdu definition assumes that there are some valid ADUs in the APDU it is 
    	 * @desc responding to (otherwise an apduAckCode  = apduNotOK(3) might have been a feasible answer)
		 */ 
		template (value) InfoExchange m_apduNAck(in InfoExchange p_apduToAck, in NAckParams p_nAckParams) := m_apduDefault(
			p_apduToAck, 
			m_oneAckInAdusStruct(m_aduNAck(p_apduToAck, p_nAckParams))
	    );

		type record of record {
			NumberOfADUStruct issueADUStruct,
			ASNAUX.UTF8String issueLocation length (0 .. 512) optional,
			ASNAUX.UTF8String issueContent length (0 .. 1024) optional,
			AduReasonCode issueCode,
			ASNAUX.UTF8String issueText length (0 .. 1024) optional
	  	}  NAckParams;
	  	
		/**
		 * 
		 * @desc Construct with one issueCode value, to be used when creating customised m_apduNAck)
		 */ 		
	 	template (value) NAckParams m_nAckParamsSingle(
			in NumberOfADUStruct p_issueADUStruct, 
			in AduReasonCode p_issueCode
		):={
			{
				issueADUStruct:=p_issueADUStruct,
				issueLocation := omit,
				issueContent := omit,
				issueCode := p_issueCode,
				issueText:= omit
			}
		};
	  	

		template AckADU m_aduNAck(in InfoExchange p_apduToAck, in NAckParams p_nAckParams) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := ApduReasonCode_apduNotOK_ ,
			apduAckText := omit,
			issues := p_nAckParams
		}
    	
			
		/**
		 * 
		 * @desc Corresponds to the event NAck_requestSentTooOften described in test purposes.
		 * @desc Definition: "Default_Apdu containing one AckADU containing {apduAckCode= requestSentTooOften(10)}" 
		 */ 
		template (value) InfoExchange m_apduNAckRequestSentTooOften(in InfoExchange p_apduToAck) := m_apduDefault(
			p_apduToAck,
			m_oneAckInAdusStruct(m_aduAckRequestSentTooOften(p_apduToAck))			
		);

		template AckADU m_aduAckRequestSentTooOften(in InfoExchange p_apduToAck) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := ApduReasonCode_requestSentTooOften_ ,
			apduAckText := omit,
			issues := omit
		}
    	
    	
    	template Adus mw_recordOfAduRequest:= {
			requestAdus:=? 
    	}
    	
		template InfoExchange mw_apduRequest := m_apduNoSec(mw_apci, mw_recordOfAduRequest);
      
		template AckADU mw_aduDefaultAck := {
			apduIdentifier := ?,
			explicitlyAckedAdus := omit,
			apduAckCode := ?,
			apduAckText := omit,
			issues := *
		}

		template AckADU m_aduDefaultAck(in InfoExchange p_apduToAck) := {
			apduIdentifier := p_apduToAck.infoExchangeContent.apci.apduIdentifier,
			explicitlyAckedAdus := omit,
			apduAckCode := ApduReasonCode_apduOK_ ,
			apduAckText := omit,
			issues := omit
		}

    }
    
	group AduTemplates{
		
		
		group USERDETAILS {
	
			type record of UserParameterRequest UserParameterRequests;

    		template RequestADU mw_aduRequestProvideUserDetails := {
        		userDetailsRequest :={	
            	  	requestedADUType                := AduType_provideUserDetailsADU_,
            	  	userId                          := ?,
            		listOfParametersRequested       := ?,
            		userDetailsRequestReason        := *,
            		userInfoValidityPeriod          := *
        		}
        	}
        	
        	template (value) RequestADU m_aduRequestProvideUserDetails(
        		in template (value) UserParameterRequests p_userParameterRequests
        	) modifies mw_aduRequestProvideUserDetails := {
        		userDetailsRequest:={
        			requestedADUType := AduType_provideUserDetailsADU_,	
            	  	userId := EXISTING_USER_ID,
					listOfParametersRequested := p_userParameterRequests,
            		userDetailsRequestReason := omit,
            		userInfoValidityPeriod := omit
        		}
        	}
        	       			
//        	template ProvideUserDetailsADU mw_userDetailsPrivacy_apduIdentifier := {
//                originaluserIdRequest := DEFINED_USERID,
//                userId := *,
//                statusFlag := * ,
//                listOfUserParameters.UserParameterResponse := omit,
//                listOfUserParameters.userParameterResponse := *,
//                listOfUserParameters.userParameterStatus := 2,
//                listOfUserParameters.userInfoValidityPeriod := omit
//        	}
        	
        	template ProvideUserDetailsADU mw_aduProvideUserDetails := {
            	originaluserIdRequest := EXISTING_USER_ID,
            	userId := ?, 
            	statusFlag := * ,
            	listOfUserParameters := *
        	}
        	
    	
			template Adus mw_recordOfAduProvideUserDetails := {
				provideUserDetailsADUs:=? 
			}
        				
			template InfoExchange mw_apduProvideUserDetails := m_apduNoSec(mw_apci, mw_recordOfAduProvideUserDetails);
			
			template InfoExchange mw_apduAuthenticatedProvideUserDetails := m_apduSec(mw_apci, mw_recordOfAduProvideUserDetails);
		}

		group LISTOFUSERS {
		  	
		  	template RequestADU mw_aduRequestListOfUsers := {
		  		userListRequest :={
		  			requestedADUType	:= AduType_provideUserIdListADU_,
      				userIdRequestType	:= ?,
      				userId				:= ?,
					userIdRequestTime	:= ?
				}
			}
		  	
		  	template (value) RequestADU m_aduRequestListOfUsers := {
	  			userListRequest :={
	  				requestedADUType	:= AduType_provideUserIdListADU_,
  					userIdRequestType	:= 0,
  					userId				:= EXISTING_USER_ID,
					userIdRequestTime	:= fx_getUtc() 
				}
			}

			template ProvideUserIdListADU mw_aduProvideUserIdList := {
				originalUserIdRequestType := UserIdRequestType_allUserIdsToGivenCustomer_,
				originalUserId := EXISTING_USER_ID,
            	userIdList := *
        	}
			
		}

		group EXCEPTIONLIST {
		  	template ExceptionListADU mw_aduExceptionList := {
		  	  	exceptionListVersion := ?,
				exceptionListType := (ExceptionListType_blackList_, ExceptionListType_whiteList_, ExceptionListType_discountedList_),
		  	  	exceptionValidityStart := ?,
		  	  	exceptionValidityEnd := omit,
		  	  	exceptionListEntries := ?
		  	}
		  	
		  	template ExceptionListEntry mw_exceptionListEntry := {
		  	  	userId := ?,
		  	  	statusType := ?,
		  	  	reasonCode := ?,
		  	  	entryValidityStart := ?,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := *,
		  	  	actionRequested := ?,
		  	  	efcContextMark := omit,
		  	  	vatId := *
		  	}
		}
		
		group TRUSTOBJECTS {}

		group PAYMENTCLAIM {}

		group DSRC_CONTRACTISSUERLIST {		
			template ContractIssuerListADU mw_aduContractIssuerList := {
				efcContextMark := ?,
				equipmentClass := ?,
				manufacturerID := ?,
				uniquePartOfPAN := ?,
				typeOfEFCApplication := ?,
				securityLevel := ?,
				acCrKeyReference := ?,
				authKeyRererence := ?,
				validFrom := ?
			} 		
		
			template Adus mw_recordOfAduContractIssuerList := {
				contractIssuerListADUs := ?
			}
		}

		group DSRC_EFCCONTEXTDATA {		
			
/* How to convert this record into a template?
	
		type record EfcContextDataADU {
		EntityOverview entityOverview optional,
		union {
			record {
				Iso17575_3AduBody contextInterrelations optional,
				record of record {
					Iso17575_3AduBody iso175753ADU,
					FeeModifiers 	  feeModifiers optional
				} regimeContextData
			} gnssContext,
			record {
				record {
					Iso17575_3AduBody iso175753ADU,
					FeeModifiers feeModifiers optional
				} regimeContextData
			} dsrcContext,
			record {
				ClosedContextDefinition closedContext,
				FeeModifiers feeModifiers optional
			} dsrcClosedContext
		} domainType
	}
*/	
			template EfcContextDataADU mw_aduDSRCEfcContextData := {
				entityOverview := *,
				domainType.dsrcContext.iso175753ADU := ?,
				domainType.dsrcContext.feeModifier := omit
			}
				
		}

		group DSRC_BILLINGDETAILS{}

		group DSRC_REPORTABNORMALOBE {}

		group GNSS_TOLLDECLARATIONS {}

		group GNSS_BILLINGDETAILS_TSP{}

		group GNSS_BILLINGDETAILS_TC {}

		group GNSS_PAYMENTANNOUNCEMENT {}


	}
}
