module EfcInfoExchange_TestCasesCommon {
    /**
     * @desc    [12855:2015]: 
     * @see     Annex A (normative)  data type specifications
     */
    import from EfcInfoExchange language "ASN.1:1997" all;
    
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parameterised_Asn1_Data TTCN-3 module is a workaround
     */
	import from EfcInfoExchange_ParameterisedAsn1Data all;
    import from EfcInfoExchange_Interfaces all;
	import from EfcInfoExchange_InteroperabilityStatement all;
    import from EfcInfoExchange_Functions all;	
    import from EfcInfoExchange_Pixits all;
    import from EfcInfoExchange_Ics all;
    import from EfcInfoExchange_Templates all;
	import from EfcInfoExchange_TesterData all;
    import from EfcInfoExchange_Profile all;
  
  
    
	 /**
	  * @desc    These Test Cases are common for the Toll Service Provider and Toll Charger for claiming 
	  * @desc 	 conformance to [16986:2016] and applying Test Purposes as from TS xxxxx:2018 Annex B
	  * @remark  nn TCs
	  */

	group TRUSTOBJECTS {
		
		type enumerated TransactionType {type1(0), type2(1)}
		type enumerated Role {TC(0),TSP(1)};
		group Valid_Behaviour {
	           
		 	testcase TP_TRUSTOBJECTS_BV_01(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BV_01: Verify that the IUT correctly provides a TrustObjectADU without Tester request
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2
              */
				//Declaration
				var boolean isCertificateOrPublicKey:=false;
				var boolean isDsrcKeyRef := false;
				var boolean isMacMasterKey := false;
				var boolean isDsrcMasterKey := false;
				var boolean isCertificateRevocationList := false;
				var boolean isDsrcKey:=false;
				var integer objectsReceived := 0;
				
				// Initialisation
				var boolean v_runOrNot := 
					((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
					ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
				
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				
				// Step 1: Trigger IUT with TRUSTOBJECTS_TR_2
				f_sendAndLogTrigger(TRUSTOBJECTS_TR_2);

				//  Wait for TRUSTOBJECTS
				// We expect to receive as many APDUs containing TRUSTOBJECTS ADUs as the number of declared supported trust objects
				alt {
					[] mtcPort.receive(mw_apduTrustObjectInit) -> value v_apduReceived {
						//send Ack whichever object received
						f_logReceivedWaitAndAcknowledge(IS_TRUSTOBJECTS_TIME2_MIN[enum2int(p_transType)][enum2int(p_role)]); 							
						// Look at the type of Trust Object received and set the related variable
						if (match(v_apduReceived.infoExchangeContent.adus, mw_adusTrustObjectCertificate)) 
						{isCertificateOrPublicKey:=true;}
						if (match(v_apduReceived.infoExchangeContent.adus, mw_adusTrustObjectPublicKey)) 
						{isCertificateOrPublicKey:=true;}
						if (match(v_apduReceived.infoExchangeContent.adus, mw_adusTrustObjectGeneric))
						{isCertificateRevocationList := true;}
						if (match(v_apduReceived.infoExchangeContent.adus, mw_adusTrustObjectDsrcKeyRef)) 
						{isDsrcKeyRef:=true;}
						if (match(v_apduReceived.infoExchangeContent.adus, mw_adusTrustObjectMacKey)) 
						{isMacMasterKey:=true;}
						if (match(v_apduReceived.infoExchangeContent.adus, mw_adusTrustObjectDsrcKey)) 
						{isDsrcKey:=true;}
	
						objectsReceived := objectsReceived + 1; // Count the number of trust objects received
						if (objectsReceived < sizeof(PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND)) {
							repeat;
						}
					}										
				} // End of alt statement
				// Exiting the alt means that the expected number of Trust Objects have been received

				if (ICS_A2_1_isDsrc and isCertificateOrPublicKey and isDsrcKeyRef and isMacMasterKey and isDsrcMasterKey) {
					setverdict(pass);
				}			 				
				if (ICS_A2_2_isGnss and isCertificateOrPublicKey and isDsrcKeyRef){
					setverdict(pass);
				}			 				
				f_closeDownMtc();              
           } // End of TP_TSP_TRUSTOBJECTS_BV_01

           testcase TP_TRUSTOBJECTS_BV_02(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
             
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BV_02: Verify that the IUT correctly responds to 
              * @desc	 a TrustObjectADU received from a Tester without having issued a request 
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot := 
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				
                // Step 1: Send one valid APDU containing the a valid TrustObjectADU with the only mandatorily supported type in both profiles, for all possible purposes
				v_apduForSending := m_apduNoAuthInitTester({trustObjectAdus:={
					m_aduTrustObject(
						{
							TrustObjectPurposes_dSRCCharging_,
							TrustObjectPurposes_dSRCAC_,
							TrustObjectPurposes_oBEInterrogation_,
							TrustObjectPurposes_oBEInterrogationAC_
						}, 
						TD_DSRC_MASTER_KEY
					)
				}});                 
				f_sendAndLogApdu(v_apduForSending);                 
                 // Step 2: Wait for positive Ack within TRUSTOBJECTS.TIME2
				// Set timer
                 t_step.start(IS_TRUSTOBJECTS_TIME2_MAX[enum2int(p_transType)][enum2int(p_role)]);                 
				alt {
					[] mtcPort.receive(mw_apduDefaultAckIut(v_apduForSending)) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME2_MIN[enum2int(p_transType)][enum2int(p_role)]);
						setverdict(pass);
						} 
					} // End of Alt statement 
				f_closeDownMtc();                  
             
           } // End of TP_TSP_TRUSTOBJECTS_BV_02

           testcase TP_TRUSTOBJECTS_BV_03(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
             
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BV_03: Verify that the IUT correctly provides a TrustObjectADU following a Tester request 
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot := 
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				// Loop in all available types of trustobject supported by the IUT as specified by the length of SENT_TRUST_OBJECTS_SUPPORTED Pixit record
				var integer v_trustObjectsToBeSent := sizeof(PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND);
				for (var integer v_trustObjectsReceived :=1; v_trustObjectsReceived<v_trustObjectsToBeSent;v_trustObjectsReceived:=v_trustObjectsReceived+1)
					{
						// Prepare a request of a Trust Object by taking allowed type and purpose from 
						// the PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND Pixit value					
						v_apduForSending :=m_apduNoAuthInitTester({requestAdus:=
							{m_aduRequestTrustObject(
								PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND[v_trustObjectsReceived].trustObjectType,
								{PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND[v_trustObjectsReceived].trustObjectPurpose}
							)}
						});
						
						f_sendAndLogApdu(v_apduForSending);
			
						// Set timer
                		 t_step.start(IS_TRUSTOBJECTS_TIME1_MAX[enum2int(p_transType)][enum2int(p_role)]);
						// Step #2: Wait for TrustObjects ADU
						// Either we receive an APDU containing  TrustObject or the timeout expires
                 		alt {
                      		[] mtcPort.receive(mw_apduTrustObject(v_apduForSending)) -> value v_apduReceived {
								f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]);  

                        		// Step #3: Send DefaultACK with correct identifier
								f_logReceivedWaitAndAcknowledge(IS_TRUSTOBJECTS_TIME2_MIN[enum2int(p_transType)][enum2int(p_role)]);
                      			}
                    		} // End of alt statement
						}; // end of for statement
				//Set verdict
				setverdict(pass);
				f_closeDownMtc(); 
				 
           } // End of TP_TSP_TRUSTOBJECTS_BV_03

           testcase TP_TRUSTOBJECTS_BV_04(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
             
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BV_04: Verify that the IUT correctly requests and responds to a TrustObjectADU
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot :=
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				
				// Step 1: Trigger IUT with TRUSTOBJECTS_TR_1
				f_sendAndLogTrigger(TRUSTOBJECTS_TR_1);
				//  Wait for request for TRUSTOBJECTS
				// Loop in all available types of trustobject requested supported by the IUT by repeating receive
				var integer v_expectedTrustObjectRequests := sizeof(PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND);
				var integer v_receivedTrustObjects := 0;
				// Set timer
                t_step.start(IS_TRUSTOBJECTS_TIME1_MAX[enum2int(p_transType)][enum2int(p_role)]);                 
				alt {
					[] mtcPort.receive(mw_apduRequestTrustObject) -> value v_apduReceived {
						// Log what we received
						f_logApduReceivedAndTStep();
						t_step.stop;
						v_receivedTrustObjects := v_receivedTrustObjects + 1;
                		// Step 1: Send one valid APDU containing one valid TrustObjectADU
						
						var RequestADU v_aduReq:=v_apduReceived.infoExchangeContent.adus.requestAdus[0];
						// Analysis of what requested and what to be sent						
						var TrustObjectSpec v_requestedTrustObjectSpec := v_aduReq.trustObjectRequest.requestedTrustObject.trustObjectSpec;
						var TrustObjectTypes v_requestedTrustObjectType := v_requestedTrustObjectSpec.typeOfTrustObject;
						var RecOfTrustObjectPurposes v_requestedTrustObjectPurposesRecords := v_requestedTrustObjectSpec.purposesOfTrustObject;
						var InfoExchange v_apduToSend;
															
						select (v_requestedTrustObjectType) {
							case (TrustObjectTypes_certificate_){
								v_apduToSend := m_apduTrustObjectResponse(
									v_apduReceived, 
									v_requestedTrustObjectPurposesRecords,
									{certificate:=TD_CERTIFICATE}			
								);
							}
							case (TrustObjectTypes_publicKey_){
								v_apduToSend := m_apduTrustObjectResponse(
									v_apduReceived, 
									v_requestedTrustObjectPurposesRecords,
									{publicKey:=TD_PUBLICKEY}
								);                 												
							}
							case (TrustObjectTypes_symmetricKey_){
								v_apduToSend := m_apduTrustObjectResponse(
									v_apduReceived, 
									v_requestedTrustObjectPurposesRecords,
									//TODO Fausto, what is this supposed to be? TD_DSRCKEY_OBJECT is not defined
									TD_DSRC_MASTER_KEY
								);                 												
							}
							case else {
								f_addLogEntry("Received a request trust object type other than certificate, publicKey or symmetricKey, this is not allowed according to CEN/TS 16986:2016");
								setverdict(fail);
								stop;					
							}
						};						

						f_sendAndLogApdu(v_apduToSend);                 
                
                		// Step 2: Wait for positive Ack within TRUSTOBJECTS.TIME2
						// Set timer
                 		t_step.start(IS_TRUSTOBJECTS_TIME2_MAX[enum2int(p_transType)][enum2int(p_role)]);                 
						alt {
							[] mtcPort.receive(mw_apduDefaultAckIut(v_apduToSend)) -> value v_apduReceived {
								// Log what we received
								f_logApduReceivedAndTStep();
								t_step.stop;
							}
						} // End of second alt 
					
						if (v_receivedTrustObjects == v_expectedTrustObjectRequests) {
							setverdict(pass);
							break;  
						};
	                	t_step.start(IS_TRUSTOBJECTS_TIME1_MAX[enum2int(p_transType)][enum2int(p_role)]);  // Restart timer               
						repeat;
					}	
				} // End of first alt 					
				f_closeDownMtc();                  


           } // End of TP_TSP_TRUSTOBJECTS_BV_04
           
 		} // End of group Valid_Behaviour
         
         group Invalid_Behaviour {

           testcase TP_TRUSTOBJECTS_BI_01(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
             
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BI_01: Verify that the IUT correctly responds to a TrustObjectADU received without having issued a request and containing incorrect ADU parameters
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot := 
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
				
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				v_apduForSending := m_apduNoAuthInitTester({trustObjectAdus:={m_aduTrustObjectInvalidStatus}});                 
				f_sendAndLogApdu(v_apduForSending);                 
                // Step 2: Wait for negative Ack within TRUSTOBJECTS.TIME2
				// Set timer
                 t_step.start(IS_TRUSTOBJECTS_TIME2_MAX[enum2int(p_transType)][enum2int(p_role)]);                		

				alt {
					[] mtcPort.receive(mw_apduNAckAllAdusNoAuthIut(v_apduForSending, AduReasonCode_invalidADU_)) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]); 
						setverdict(pass);
						}
					[] mtcPort.receive(mw_apduNAckIndividualIssuesIut(v_apduForSending, m_roNackParamsDouble(1, AduReasonCode_invalidADU_,2,AduReasonCode_invalidADU_))) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]); 
						setverdict(pass);
						}
					} // End of Alt statement
				f_closeDownMtc();                   
             
           } // End of TP_TSP_TRUSTOBJECTS_BI_01

           testcase TP_TRUSTOBJECTS_BI_02(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
             
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BI_02: Verify that the IUT correctly responds to more 
              * @desc    than one correct Trust Object ADUs in the same APDU without having issued 
              * @desc    a request
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot := 
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
												
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				// Set two different TrustObject adus by varying the type of trust object 
				v_apduForSending := m_apduNoAuthInitTester({trustObjectAdus:={
					m_aduTrustObject(
						{TrustObjectPurposes_dSRCCharging_,TrustObjectPurposes_dSRCAC_,TrustObjectPurposes_oBEInterrogation_,TrustObjectPurposes_oBEInterrogationAC_},
						TD_DSRC_MASTER_KEY
					),
					m_aduTrustObject(
						{TrustObjectPurposes_dSRCCharging_},
						{certificate:=TD_CERTIFICATE}
					)
				}});                 
				f_sendAndLogApdu(v_apduForSending);                 
                // Step 2: Wait for negative Ack within TRUSTOBJECTS.TIME2
				// Set timer
                 t_step.start(IS_TRUSTOBJECTS_TIME2_MAX[enum2int(p_transType)][enum2int(p_role)]);                		
				//Create parameters for the m_apduNAck			

				alt {
					[] mtcPort.receive(mw_apduNAckAllAdusNoAuthIut(v_apduForSending, AduReasonCode_semanticError_)) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]); 
						setverdict(pass);
						}
					[] mtcPort.receive(mw_apduNAckIndividualIssuesIut(v_apduForSending, m_roNackParamsDouble(1, AduReasonCode_semanticError_,2,AduReasonCode_semanticError_))) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]); 
						setverdict(pass);
						}
					} // End of Alt statement
				f_closeDownMtc();                   
                          
           } // End of TP_TSP_TRUSTOBJECTS_BI_02

           testcase TP_TRUSTOBJECTS_BI_03(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BI_03: Verify that the IUT correctly responds to a not supported Trust Object
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot := 
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;				
				
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				// Prepare an invalid certificate (not supported by the profile)
				v_apduForSending := m_apduNoAuthInitTester({requestAdus:={
					m_aduRequestTrustObject(TrustObjectTypes_symmetricKey_ , {TrustObjectPurposes_certIssuing_})
				}});                 
				f_sendAndLogApdu(v_apduForSending);                 
                // Step 2: Wait for negative Ack within TRUSTOBJECTS.TIME2
				// Set timer
                 t_step.start(IS_TRUSTOBJECTS_TIME2_MAX[enum2int(p_transType)][enum2int(p_role)]);                		
				//Create parameters for the m_apduNAck			

				alt {
					[] mtcPort.receive(mw_apduNAckAllAdusNoAuthIut(v_apduForSending, AduReasonCode_semanticError_)) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]); 
						setverdict(pass);
						}
					[] mtcPort.receive(mw_apduNAckIndividualIssuesIut(v_apduForSending, m_roNackParamsDouble(1, AduReasonCode_semanticError_,2,AduReasonCode_semanticError_))) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]); 
						setverdict(pass);
						}
					} // End of Alt statement
				f_closeDownMtc();                   
                          
           } // End of TP_TSP_TRUSTOBJECTS_BI_03

           testcase TP_TRUSTOBJECTS_BI_04(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {             
              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BI_04: Verify that the IUT correctly responds to a RequestADU sent earlier than allowed
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
             
				// Initialisation
				var boolean v_runOrNot := ICS_A1_2_isTsp and ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				// Step1: send RequestADU by specifying the type of trustobject
				// Prepare a request of a Trust Object by taking allowed type and purpose from the SENT_TRUST_OBJECTS_SUPPORTED Pixit value
				var RequestADU v_requestAdu :=m_aduRequestTrustObject(
					PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND[1].trustObjectType, 
					{PX_TRUST_OBJECTS_TYPE_PURPOSE_SUPPORTED_SEND[1].trustObjectPurpose}
				);

				var Adus v_adus:= {requestAdus:={v_requestAdu}};
				
				var InfoExchange v_firstApduRequest:=m_apduNoAuthInitTester(v_adus); 
				var InfoExchange v_secondApduRequest:=m_apduNoAuthInitTester(v_adus); 
				
				
				// Now send the first apdu
				f_sendAndLogApdu(v_firstApduRequest);
				
       			//Immediately send same ADU with different APDUid				
				f_sendAndLogApdu(v_secondApduRequest);
                              
				//Set timer
				t_step.start(IS_TRUSTOBJECTS_TIME2_MAX[enum2int(p_transType)][enum2int(p_role)]);
                
				// Step #2: Wait for NAck ADU				 					
				// Either we receive an APDU containing  NAck or the timeout expires
				// timeout expiration is handled in the altstep branch
				
				alt {
					[] mtcPort.receive(mw_apduNAckRequestSentTooOften(v_secondApduRequest)) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME2_MIN[enum2int(p_transType)][enum2int(p_role)]);  
						setverdict(pass);
						}
					} // End of Alt statement 
				f_closeDownMtc();              
           } // End of TP_TSP_TRUSTOBJECTS_BI_04

           testcase TP_TRUSTOBJECTS_BI_05(in TransactionType p_transType, in Role p_role) runs on MainTestComponent system TestAdapter {

              /**
              * @desc    TP_TSP_TRUSTOBJECTS_BI_05: Verify that the IUT correctly responds to a TrustObjectADU sent earlier than allowed
              * @remark  [16986:2016], Clause 6.6 and Table A.1/2 
              */
				// Initialisation
				var boolean v_runOrNot :=
				((ICS_A1_2_isTsp and (p_role==TSP)) or (ICS_A1_1_isTc and (p_role==TSP))) and 
				ICS_A7_4_implementedTRUSTOBJECTSElectronicTransfer;
												
				f_intialiseMtc(v_runOrNot);  //check if the testcase shall be run, activate altsteps on ports, etc
				// Step1: prepare TrustObjectADU by specifying KeyRef as type of trustobject
				var TrustObjectADU v_trustObjectAdu:=	m_aduTrustObject(
						{TrustObjectPurposes_dSRCCharging_,TrustObjectPurposes_dSRCAC_,TrustObjectPurposes_oBEInterrogation_,TrustObjectPurposes_oBEInterrogationAC_},
						TD_DSRC_MASTER_KEY
				);                 
				
				var InfoExchange v_firstApduToBeSent := m_apduNoAuthInitTester({trustObjectAdus:={v_trustObjectAdu}});
				var InfoExchange v_secondApduToBeSent := m_apduNoAuthInitTester({trustObjectAdus:={v_trustObjectAdu}});

				// Send the first apdu
				f_sendAndLogApdu(v_firstApduToBeSent);
				// Send second apdu immediately
				f_sendAndLogApdu(v_secondApduToBeSent);				

				//Set timer
				t_step.start(IS_TRUSTOBJECTS_TIME1_MAX[enum2int(p_transType)][enum2int(p_role)]);
                
				// Step #2: Wait for NAck ADU				 					
				// Either we receive an APDU containing  NAck or the timeout expires
				// timeout expiration is handled in the altstep branch
				alt {
					[] mtcPort.receive(mw_apduNAckRequestSentTooOften(v_secondApduToBeSent)) -> value v_apduReceived {
						f_logReceivedThenCheckAndStopTime(IS_TRUSTOBJECTS_TIME1_MIN[enum2int(p_transType)][enum2int(p_role)]);  
						setverdict(pass);
						}
					} 
				f_closeDownMtc();            
           } // End of TP_TSP_TRUSTOBJECTS_BI_05
           		
        } // End of group Invalid_Behaviour
	
	} // End of group TRUSTOBJECTS
}