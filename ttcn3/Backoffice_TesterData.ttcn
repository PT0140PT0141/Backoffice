/**
 * @author    PT0140  
 * @desc      This module declares test data which are being prepared by the tester
 * @version   $id$
 */
module Backoffice_TesterData {
 
    /**
     * @desc    Declare Testerdata of UserParameterResponseDetails
     */
    
    modulepar UserPostalAddress c_TESTERUSERPOSTALADDRESS1 := {"UserName1","Company1","Street1","99999","Town1","Country1","CompanyTaxIdentifier1"};
    modulepar EfcDsrcApplication.ContractSerialNumber c_CONTRACTSERIALNUMBER1 := 1234567890; //INT4 in ISO14906
    modulepar EfcDsrcApplication.ContractValidity c_CONTRACTVALIDITY1 := {"NoRes", {2030, 12, 31}};
    modulepar EfcDsrcApplication.DriverCharacteristics c_DRIVERCHARACTERISTICS1 := {10, 255}; //INT!, INT1 in ISO14906
    modulepar EfcDsrcApplication.EFC_ContextMark c_EFCCONTEXTMARK1 := {Provider,"00",99};
    modulepar EfcDsrcApplication.EnvironmentalCharacteristics c_ENVIRONMENTALCHARACTERISTICS1 := {euro-6, co2class4}; 
    modulepar EfcDsrcApplication.EngineCharacteristics c_ENGINECHARACTERISTICS1 := battery;  
    modulepar EfcDsrcApplication.EquipmentOBUId c_EQUIPMENTOBIID1 := "11AA22BB33CC";
    modulepar EfcDsrcApplication.EquipmentStatus c_EQUIPMENTSTATUS1 := "01010101010101" //BitString(16)
    modulepar EfcDsrcApplication.PaymentMeans c_PAYMENTMEANS1 := {PAN1,{2030,12,31}, "1234"};
    modulepar EfcDsrcApplication.PaymentMeansBalance c_PAYMENTMEANSBALANCE := {"7FFFFF"};
    modulepar EfcDsrcApplication.PaymentMeansUnit c_PAYMENTMEANSUNIT1 := "3F784";
    modulepar EfcDsrcApplication.PersonalAccountNumber c_PERSONALACCOUNTNUMBER1 := PAN1;
    modulepar EfcDsrcApplication.Provider c_PROVIDER1 := Provider;
    modulepar EfcDsrcApplication.ReceiptContract c_RECEIPTCONTRACT1 := {Provider,"1F2E", 9999};
    modulepar EfcDsrcApplication.ValidityOfContract c_VALIDITYOFCONTRACT1 := {2030, 12, 31};
    modulepar EfcDsrcApplication.VehicleAuthenticator c_VEHICLEAUTHENTICATOR1 := "1234567890ABCDEF";
    modulepar EfcDsrcApplication.VehicleClass c_VEHICLECLASS1 := 15;
    modulepar EfcDsrcApplication.VehicleDimensions c_VEHICLEDIMENSIONS1 := {99, 99, 99};
    modulepar EfcDsrcApplication.VehicleLicencePlateNumber c_VEHICLELICENSEPLATENUMBER1 := {"EU", 1, "1C75D9"};
    modulepar EfcDsrcApplication.VehicleIdentificationNumber c_VEHICLEIDENTIFICATIONNUMBER1 := 111111111111;
    modulepar EfcDsrcApplication.VehicleWeightLaden c_VEHICLELADENWEIGHT1 := 255;
    modulepar EfcDsrcApplication.VehicleWeightLimits c_VEHICLEWEIGHTLIMITS1 := {99, 150, 50}; 
    modulepar EfcDsrcApplication.VehicleAxles c_VEHICLEAXLES1 := {15, {dualTyres,{4,3}}};
    modulepar EfcDsrcApplication.ExhaustEmissionValues c_EXHAUSTEMISSIONVVALUES1 := {g-km, 0, 0, 0, 0};
    modulepar EfcDsrcApplication.DieselEmissionValues c_DIESELEMISSIONVALUES1 := {g-km, 0, 0}
    modulepar ExtendedUserPostalAddress c_EXTENDEDUSERPOSTALADDRESS1 := {
    	"RoleDescriptor1",
    	"OrganisationName1",
    	"OrganisationUnit1",
    	"Function1",
    	"FormOfADdress1",
    	"Qualification1",
    	"Surname1",
    	"GivenName1",
    	"DeliveryServicePoint1",
    	"ThouroughFare1",
    	"Postcode1",
    	"Town1",
    	"Region1",
    	"Country1",
    	"Code1",
    	"Phone1",
    	"PhoneSubscriberNumber1",
    	"Code2",
    	"Mobile1",
    	"MobileSubscriberNumber2",
    	"Code3",
    	"Fax1",
    	"FaxSubscriberNumber1",
    	"Email1" };    	
    modulepar ASNAUX.UTF8String c_PREFERREDUSERLANGUAGE1 := "IT";
    
    /**
     * @desc    Preparing test user id data
     */    
    const c_MAXTESTUSERS := 10000; 
    type record of UserId UserIdList;
    var UserIdList v_userIdList;
    
    //initialize test user Id values 
    for (integer index:=0; index< c_MAXTESTUSERS; index := index+1) {
    	v_userIdList[index] := {
    		index, //PT140: must be of type pan
    		index+10000, // contractSerialNumber = INT4; may start e.g. at 10000
    		"EU"&index, // licenseplatenumber = type LPN
    		"99"&index, // type obeId = manufacturer id (i.e. 99) + equipment OBU id
    		}
	// make them availble at tet run time
	modulepar UserIdList c_TESTUSERIDLIST := v_userIdList; 
	
  }
     
    
