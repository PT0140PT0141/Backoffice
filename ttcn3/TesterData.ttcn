/**
 * @author    PT0140  
 * @desc      This module declares test data which are being prepared by the tester
 * @version   $id$
 */

module EfcInfoExchange_TesterData{
	//TODO Prefix every modulepar with "TD" and add tags for semantic definitions in comments
	//importing other modules
	import from EfcInfoExchange_Functions all;
		
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;	//from ISO 12855:2015
	import from EfcDsrcApplication language "ASN.1:1997" all;
	import from EfcAutonomousCharging language "ASN.1:1997" all;
	import from EfcAutonomousContextData language "ASN.1:1997" all;
	
	//importing ASN.1 data manually translated into TTCN-3
	import from EfcInfoExchange_ParameterisedAsn1Data all;
	import from LibEfc_Common_Parameterised_Asn1_Data all;
	
	modulepar EfcDsrcApplication.Provider TD_IDENTIFIER := 'A40053'H; // [SEMANTIC DEFINITION] The provider identifier of the tester
		// acccording to ISO 14906 consisting of countryCode and issuerIdentifier
	modulepar EfcDsrcApplication.Provider TD_APDU_ORIGINATOR_FOR_TESTER := 'A40053'H; // [SEMANTIC DEFINITION] The originator id of the tester
		// that is used in the APCI field apdu originator. Same syntax as the provider identifier. 
	modulepar EfcDsrcApplication.Provider TD_INFORMATION_SENDER_FOR_TESTER := 'A40053'H; // [SEMANTIC DEFINITION] The sender id of tester
		// taht is used in the APCI field sender id. Same syntax as the provider identifier.
	modulepar EfcDsrcApplication.Provider TD_INVALID_APDU_ORIGINATOR_FOR_TESTER := 'A40054'H; // [SEMANTIC DEFINITION] The originator id of the tester used
		// in an invalid base test case. Shall be different from the correct originator id of the tester 
	modulepar EfcDsrcApplication.Provider TD_INFORMATION_SENDER_ID_FOR_TESTER;	// TODO remove this duplicate
	modulepar EfcDsrcApplication.Provider TD_INVALID_INFORMATION_SENDER_ID_FOR_TESTER := 'A40054'H; // [SEMANTIC DEFINITION] The sender id of the tester used 
		// in an invalid base test case. Shall be different from the correct sender id of the tester
	modulepar EfcDsrcApplication.Provider TD_INVALID_INFORMATION_RECEPIENT_ID_FOR_IUT; // [SEMANTIC DEFINITION] The information recipient id of the IUT
		// used an invalid base test case. Shall be different from the correct recipient id of the IUT
		// TODO check if this is really used. SHould not be a tester data  
	 
	group ContractIssuerData {

		//TODO set sensible default values of the tester data parameters
		modulepar EfcDsrcApplication.EFC_ContextMark TD_EFC_CONTEXT_MARK := 'A40053000503'H; // [SEMANTIC DEFINITION] The EFCContextMark used by the tester
			// in contract issuer data. Used according to ISO 14906.
		modulepar EfcInfoExchange.Int2 TD_EQUIPMENT_CLASS;
		modulepar EfcInfoExchange.Int4 TD_MANUFACTURER_ID_1 := 97, TD_MANUFACTURER_ID_2 := 98, TD_MANUFACTURER_ID_3 := 99; // [SEMANTIC DEFINITION] Manufacturer ids
			// used by the tester e.g. in contract issuer data 
		modulepar UTF8String TD_UNIQUE_PART_OF_PAN;
		modulepar UTF8String TD_TYPE_OF_EFCAPPLICATION := "TheEFCApplicationType"; // [SEMANTIC DEFINITION] The designation of the type of the efc application
			// used by the tester as part of the contract issuer data (refer also to ISO 12855)
		modulepar UTF8String TD_SECURITY_LEVEL := "TheSecurityLevel"; // [SEMANTIC DEFINITION] The designation of the security level 
			// used by the tester as part of the contract issuer data (refer also to ISO 12855)
		modulepar EfcInfoExchange.Int2 TD_AC_CR_KEY_REFERENCE := 120; // [SEMANTIC DEFINITION] The value used by the tester
			// for the access key reference (refer also to ISO 14906) 
		modulepar integer TD_AUTH_KEY_REFERENCE := 112; // [SEMANTIC DEFINITION] The value used by the tester
			// for the authentication key reference (refer to also ISO 14906) 
		modulepar UTF8String TD_UNIQUE_PART_OF_PAN_INVALID;
		modulepar EfcInfoExchange.Int2 TD_AC_CR_KEY_REFERENCE_INVALID := 0; // [SEMANTIC DEFINITION] An invalid value used by the tester
			// for the access key reference (refer to also ISO 14906)
		modulepar integer TD_AUTH_KEY_REFERENCE_INVALID; // [SEMANTIC DEFINITION] An invalid value used by the tester
			// for the authentication key reference (refer to also ISO 14906)
				
		template ContractIssuerListADU m_contractIssuerListADU_Tester(in EfcInfoExchange.Int4 p_manufacturerID):={
			efcContextMark := TD_EFC_CONTEXT_MARK,
			equipmentClass := TD_EQUIPMENT_CLASS,
			manufacturerID := p_manufacturerID,
			uniquePartOfPAN := TD_UNIQUE_PART_OF_PAN,
			typeOfEFCApplication := TD_TYPE_OF_EFCAPPLICATION,
			securityLevel := TD_SECURITY_LEVEL,
			acCrKeyReference := TD_AC_CR_KEY_REFERENCE,
			authKeyReference := TD_AUTH_KEY_REFERENCE,
			validFrom := fx_getUtc(-3600*24) 
	   	}
 	
		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_VALID_1 := m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_1);        
        modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_VALID_2 := m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_2);
        modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_VALID_3 := m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_3);

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_1(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester:=
		{
			uniquePartOfPAN := TD_UNIQUE_PART_OF_PAN_INVALID
		}

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_2(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester :=
		{
			acCrKeyReference := TD_AC_CR_KEY_REFERENCE_INVALID
		}	

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_3(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester :=
		{
			authKeyReference := TD_AUTH_KEY_REFERENCE_INVALID
		}	

		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_INVALID_1 := m_contractIssuerListADU_Invalid_1(TD_MANUFACTURER_ID_1);
		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_INVALID_2 := m_contractIssuerListADU_Invalid_2(TD_MANUFACTURER_ID_1);
		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_INVALID_3 := m_contractIssuerListADU_Invalid_3(TD_MANUFACTURER_ID_1);
		
	} // end group ContractIssuerData	

	group DSRC_BILLINGDETAILS {
		modulepar UserId TD_BILLINGDETAILS_USERID; //[SEMANTIC DEFINITION] The ID of the user that is to be billed in when the tester sends a BillingDetailsADU in the DSRC.BILLINGDETAILS transaction	
		modulepar Int8Signed TD_DSRC_PAYMENT_FEE_AMOUNT:=10;//[SEMANTIC DEFINITION] The fee that will appear on the bill
		modulepar PayUnit TD_DSRC_BILLINGDETAILS_PAYUNIT:='0978'H; //Currency EUR in main units [SEMANTIC DEFINITION]The currency unit that will appear on the bill according to ISO 4217
	    modulepar integer TD_DSRC_BILLINGDETAILS_VAT:=0;//[SEMANTIC DEFINITION]The VAT rate expressed in 0.01% 
		modulepar integer TD_BILLING_DETAILS_NUM:=1;//[SEMATIC DEFINITION] Identifer that together with the issuerId forms a unique BillingDetailsId 
		modulepar UTF8String TD_DSRC_BILLINGDETAILS_CONTEXTNAME:="TheContextName";//[SEMANTIC DEFINITION] According to ISO 17575-3
		modulepar UTF8String TD_DSRC_BILLINGDETAILS_USERCLASS:="TheUserClass";//[SEMANTIC DEFINITION] According to ISO 17575-3
		modulepar UTF8String TD_DSRC_BILLINGDETAILS_DECLAREDVEHCLASS:="TheVehicleClass";//[SEMANTIC DEFINITION] According to ISO 17575-3
		modulepar UTF8String TD_DSRC_BILLINGDETAILS_TIMECLASS:="TheTimeClass";//[SEMANTIC DEFINITION] According to ISO 17575-3
		modulepar LanguageID TD_DSRC_BILLINGDETAILS_LANG:="it";//Default value set to Italy,[SEMANTIC DEFINITION] According to definitions in ISO 639-1 
		modulepar UTF8String TD_DSRC_BILLINGDETAILS_TEXT:="Nothing to add"; //[SEMANTIC DEFINITION] Any comment needed to be added
	}
	
	group ExceptionListTesterData {
	
		modulepar ExceptionListVersion TD_EXCEPTIONLIST_VERSION := 1; // defined as integer
		modulepar ASNAUX.GeneralizedTime TD_EXCEPTIONLIST_VALIDITY_START;
		
		modulepar EfcDsrcApplication.PersonalAccountNumber TD_PAN_1;
		modulepar EfcDsrcApplication.LPN TD_LPN_1;
		modulepar EfcAutonomousCharging.ObeId TD_OBE_ID_1;

		modulepar UserId TD_USERID_BLACK_1 := {
			pan := TD_PAN_1,
			contractSerialNumber := omit,
			licencePlateNumber := TD_LPN_1,
			obeID := TD_OBE_ID_1
		}			
		modulepar ASNAUX.GeneralizedTime TD_ENTRY_VALIDITY_START;
		modulepar VehicleParameters TD_VEHICLE_PARAMETERS;
		modulepar ASNAUX.UTF8String TD_VAT_ID;  
		modulepar UserId TD_USERID_1, TD_USERID_2, TD_USERID_3, TD_USERID_4, TD_USERID_5, TD_USERID_6, TD_USERID_7, TD_USERID_8;
		modulepar UserId TD_USER_ID_NOT_PRESENT_AT_IUT_1,TD_USER_ID_NOT_PRESENT_AT_IUT_2,TD_USER_ID_NOT_PRESENT_AT_IUT_3;

		type record of UserId UserIdList;
		modulepar UserIdList TD_USER_ID_NOT_PRESENT_AT_IUT :={
			TD_USER_ID_NOT_PRESENT_AT_IUT_1,
			TD_USER_ID_NOT_PRESENT_AT_IUT_2,
			TD_USER_ID_NOT_PRESENT_AT_IUT_3
		};				
		
		modulepar ExceptionListADU TD_EXCEPTIONLIST_ADU_BLACK_VALID := {
			exceptionListVersion := TD_EXCEPTIONLIST_VERSION,
			exceptionListType := ExceptionListType_blackList_,
		  	exceptionValidityStart := TD_EXCEPTIONLIST_VALIDITY_START,
		  	exceptionValidityEnd := omit,
		  	exceptionListEntries := {{	//Note: this is defined as record of ExceptionListEntry
		  	  	userId := TD_USERID_1,
		  	  	statusType := ExceptionListStatusType_locallyBlocked_,
		  	  	reasonCode := ExceptionListReasonType_notToBeDisclosed_,
		  	  	entryValidityStart := TD_ENTRY_VALIDITY_START,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := TD_VEHICLE_PARAMETERS,
		  	  	actionRequested := ExceptionListActionType_rejectOBE_,
		  	  	efcContextMark := omit,
		  	  	vatId := TD_VAT_ID
			}}
		}

		modulepar ExceptionListADU TD_EXCEPTIONLIST_ADU_WHITE_VALID := {
			exceptionListVersion := TD_EXCEPTIONLIST_VERSION,
			exceptionListType := ExceptionListType_whiteList_,
		  	exceptionValidityStart := TD_EXCEPTIONLIST_VALIDITY_START,
		  	exceptionValidityEnd := omit,
		  	exceptionListEntries := {{	//Note: this is defined as record of ExceptionListEntry
		  	  	userId := TD_USERID_1,
		  	  	statusType := ExceptionListStatusType_allApplications_,
		  	  	reasonCode := omit, //TODO Fausto/Jan not allowed to omit this field
		  	  	entryValidityStart := TD_ENTRY_VALIDITY_START,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := TD_VEHICLE_PARAMETERS,
		  	  	actionRequested := ExceptionListActionType_acceptOBE_,
		  	  	efcContextMark := omit,
		  	  	vatId := TD_VAT_ID
			}}
		}

		modulepar ExceptionListADU TD_EXCEPTIONLIST_ADU_DISCOUNTED_VALID := {
			exceptionListVersion := TD_EXCEPTIONLIST_VERSION,
			exceptionListType := ExceptionListType_discountedList_,
		  	exceptionValidityStart := TD_EXCEPTIONLIST_VALIDITY_START,
		  	exceptionValidityEnd := omit,
		  	exceptionListEntries := {{	//Note: this is defined as record of ExceptionListEntry
		  	  	userId := TD_USERID_1,
		  	  	statusType := ExceptionListStatusType_allApplications_,
		  	  	reasonCode := omit, //TODO Fausto/Jan not allowed to omit this field
		  	  	entryValidityStart := TD_ENTRY_VALIDITY_START,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := TD_VEHICLE_PARAMETERS,
		  	  	actionRequested := ExceptionListActionType_acceptOBE_,
		  	  	efcContextMark := omit,
		  	  	vatId := TD_VAT_ID
			}}
		}		
	} // end group ExceptionListTesterData		


	group TRUSTOBJECTS {
		modulepar TrustObjectCode TD_CERT_REVOKE_LIST;
		modulepar octetstring TD_CERTIFICATE;
	 	modulepar octetstring genericTrustObjectTESTER_VALUE;
	 	modulepar PublicKeyObject TD_PUBLICKEY;
    	modulepar DsrcKeyObject TD_SYMMETRIC_KEY;
    	modulepar DsrcKeyObject TD_SYMMETRIC_KEY_ENCRYPTED;
    	modulepar DsrcKeyRef dsrcKeyRefObjectTESTER_VALUE := {
    	 	eFCContextMark := TD_EFC_CONTEXT_MARK,
    	 	keyRef := 0,
    	 	referenceType := ReferenceType_cCCAuthenticationKeyRef_ 
    	};
    	modulepar CertificateObject certificateTESTER_OBJECT := {
    	  certificateType := CertificateType_certTcHTTPS_,
    	  certificate := TD_CERTIFICATE
    	};
		modulepar GenericTrustObject invalidTESTERGenericObject := {
		  typeOfTrustObject := TrustObjectTypes_certificate_,
		  genericTrustObject := genericTrustObjectTESTER_VALUE
		};   
	}	

	group USERDETAILS {
		modulepar UserParameterResponseDetails TD_USER_PARAM_RESP_DETAILS := {
			userPostalAddress := {"TestUserName","TestCompany","TestStreet","999999","TestTown","TestCountry","TestCompanyTaxIdentifier"},
			contractSerialNumber := 1234567890, //INT4 in ISO14906
			contractValidity := {'ABCD'O, {2030, 12, 31}},
			driverCharacteristics := {10, 255}, //{INT!, INT1} in ISO14906
			eFC_ContextMark := TD_EFC_CONTEXT_MARK,
			environmentalCharacteristics := {euro_6(6), co2class4(4)}, 
			engineCharacteristics := EngineCharacteristics_battery_,
			equipmentOBUId:='11AA22BB33CC'O,
			equipmentStatus := '01010101010101'B,//BitString(16)
			paymentMeans :=1000, //paymentmaens value for testing
			paymentMeansBalance := {"7FFFFF"},
			paymentMeansUnit := "3F784",
			personalAccountNumber := TD_PAN_1,
			provider := TD_IDENTIFIER,
			receiptContract := {TD_IDENTIFIER,"1F2E", 9999},
			validityOfContract := {2030, 12, 31},
			vehicleAuthenticator := "1234567890ABCDEF",
			vehicleClass := 15,
			vehicleDimensions := {99, 99, 99},
			vehicleLicencePlateNumber := {"EU", 1, "1C75D9"},
			vehicleIdentificationNumber := 1234567890,
			vehicleWeightLaden := 255,
			vehicleWeightLimits := {99, 150, 50}, 
			vehicleAxles := {15, {dualTyres,{4,3}}},
			exhaustEmissionValues := {mg_km(0), 0, 0, 0, 0},
			dieselEmissionValues := {mg_km(0), 0, 0},
			extendedUserPostalAddress := {"TestRDescr", "TestOrganisationName","TestOrganisationUnit",
				"TestFunction",	"TestFormOfAddress", "TestQualification", "TestSurname", "TestGivenName", "TestDeliveryServicePoint",
				"TestThouroughFare", "1234567890", "TestTown",	"TestRegion", "TestCountry", "00999", "9876543210",
				"12345678901234567890", "00777", "9876543210", "12345678901234567890","00888", "9876543210",
				"12345678901234567890","test@email.biz"}, 
			preferredUserLanguage := "SE"
		};	
		
		modulepar RecOfUserParameterRequest TD_PRIVACYBOUND_USER_PARAM_REQS:={}; 
	}
	
	group EFCCONTEXTDATA {
//TODO Currently not used - needed?
//	 	modulepar  TariffClassDefinition tariffClassDefinitionTESTER_VALUE;
//	 	modulepar  LocalVehicleClassDefinition localVehicleClassDefinitionTESTER_VALUE;
//	 	modulepar  TimeClassDefinition timeClassDefinitionTESTER_VALUE;
//	 	modulepar  UserClassDefinition userClassDefinitionTESTER_VALUE;
//	 	modulepar  FeeDefinition TD_FEE_DEFINITION;
	 	modulepar  Optionally_Signed<TollContextOverview> TD_TOLL_CONTEXT_OVERVIEW;
	 	modulepar  Optionally_Signed<TollContextPartitionOverviews> TD_TOLL_CONTEXT_PARTITION_OVERVIEW;
	 	modulepar  Optionally_Signed<TariffTables> TD_TARIFF_TABLE;
	 	modulepar  Optionally_Signed<CurrencyConversionTable> currencyConversionTableTESTER_VALUE;
	 	modulepar  Optionally_Signed<TariffClassDefinition> optSignedTariffClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<LocalVehicleClassDefinition> optSignedLocalVehicleClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<TimeClassDefinition> optSignedTimeClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<UserClassDefinition> optSignedUserClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<TollContextPartitionLayouts> tollContextLayoutTESTER_VALUE;
	 	modulepar  Optionally_Signed<ChargeReportingEventss>  chargeReportingEventsTESTER_VALUE;
	 	modulepar  Optionally_Signed<ChargeReportConfigurations> chargeReportConfigurationTESTER_VALUE;
	 	modulepar  EfcDsrcApplication.Int1 tollContextVersionTESTER_VALUE;
	 	modulepar  ClosedContextType closedContextTypeTESTER_VALUE := ClosedContextType_interconnectedClosedSysytem_;

		modulepar  octetstring basicVersionIdTESTER_VALUE:='00'O;
		modulepar  UTF8String versionNameTESTER_VALUE:="TollContextOverviewVersion - one value";
		modulepar  UTF8String valueOfVersionNameTESTER_VALUE:="the version";
	 	modulepar  EfcAutonomousContextData.TollContextOverview closedTollContextOverviewTESTER_VALUE := {
	 	  tollContext := TD_IDENTIFIER,
	 	  tollContextPartitions := {1}, // One partition
	 	  tollSchemeName := omit,
	 	  tollContextBoundingBoxes := omit,
	 	  tollContextOverviewVersion:={
	 	  	version:={
	 	  		basicVersionId:=basicVersionIdTESTER_VALUE
//	 	  		extendedVersionId:={
//	 	  			{
//	 	  				versionName:=versionNameTESTER_VALUE,
//	 	  				value_:=valueOfVersionNameTESTER_VALUE
//	 	  			}
//	 	  		}
	 	  	},
	 	  	validFrom:=fx_getUtc()
	 	  }
	 	};
	 	modulepar ClosedContextLayout closedContextLayoutTESTER_VALUE;

	}		

	group TOLLDECLARATION{
		modulepar EfcDsrcApplication.PaymentMeans TD_PAYMENT_MEANS_1;//:= {PAN1,{2030,12,31}, "1234"};
		modulepar EfcDsrcApplication.EFC_ContextMark TD_SERVICE_PROVIDER_CONTRACT := {TD_INFORMATION_SENDER_ID_FOR_TESTER, '11'O ,99};
		modulepar Provider TD_TOLL_CONTEXT;	//value of the InfoExchange.infoExchangeContent.apci.informationSenderID	
	}


	group GNSSBILLINGDETAILS {	
		modulepar EfcAutonomousCharging.Period TD_PERIOD_1; // period in billing details
		modulepar ASNAUX.UTF8String TD_USER_CLASS; // applied user class
		modulepar ASNAUX.UTF8String TD_DECLARED_VEHICLE_CLASS; // declared vehicle class
		modulepar ASNAUX.UTF8String TD_APPLIED_TIME_CLASS; // applied time class
		modulepar ASNAUX.UTF8String TD_COST_CENTER; // cost center
		modulepar EfcAutonomousCharging.ChargeObjectId TD_CHARGE_OBJECT_ID; // charge object id
		modulepar TollEventId TD_TOLL_EVENT_ID;
		modulepar ASNAUX.GeneralizedTime TD_TOLL_EVENT_TIME;
		modulepar ExtendedPaymentAmount TD_DISCOUNT_AMOUNT;
		modulepar DiscountQualifier TD_DISCOUNT_QUALIFIER;
		modulepar UsageStatement TD_USAGE_STATEMENT_VALID_1, TD_USAGE_STATEMENT_VALID_2, TD_USAGE_STATEMENT_VALID_3,
			TD_USAGE_STATEMENT_VALID_4, TD_USAGE_STATEMENT_VALID_5; 
 	}
 	
 	group PAYMENTANNOUNCEMENT {
 		modulepar integer TD_PAYMENTANNOUNCEMENT_ID_1, TD_PAYMENTANNOUNCEMENT_ID_2, TD_PAYMENTANNOUNCEMENT_ID_3;
 		modulepar ASNAUX.GeneralizedTime TD_PAYMENTANNOUNCEMENT_DUE_DATE;
 		modulepar ExtendedPaymentAmount TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_1, TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_2,
 			TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_3;
 		modulepar ExtendedPaymentAmount TD_BILLINGDETAILS_AMOUNT_1, TD_BILLINGDETAILS_AMOUNT_2,
 			TD_BILLINGDETAILS_AMOUNT_3;		 
	}
	

/*		modulepar record {
      		ASNAUX.UTF8String contextName,
      		ASNAUX.UTF8String appliedUserClass,
      		record of record {
        		ASNAUX.UTF8String declaredVehicleClass,
        	record of record {
          		ASNAUX.UTF8String appliedTimeClass,
          		ASNAUX.UTF8String costCenter optional,
          		record of UsageList usageList
        	} perUsedTimeClasses
      	} perDeclaredVehicleClasses
    	} TD_GNSS_USAGE_DETAILS_1;
*/    	
		
/*		var BillingDetailsADU v_aduGnssBillingDetailsTester(
			in integer p_billingDetailsNum,
			in record of TollDeclarationId p_tollDeclarationIds) := mw_aduGnssBillingDetails := {
            	billingDetailsId := {
                	issuerId := TD_IDENTIFIER,		
                    billingDetailsNum := p_billingDetailsNum,
                    dateOfService := omit
                    },
                tollContext := TD_IDENTIFIER,
                userId := TD_USERID_1,
                relatedBillingDetails := omit,
                period := TD_PERIOD_1,
                billingDetailsAmount := omit, 
                usageDetails := TD_GNSS_USAGE_DETAILS_1,
                refTollDeclaration := p_tollDeclarationIds,
                associatedEventData := {omit},
                actionCode := (ActionCode_send_, ActionCode_revoke_ ,ActionCode_adjust_ ),
                paymentReference := omit
  			}			
*/
		
	
} // end module 
	
//    
//    /**
//     * @desc    Preparing test user id data
//     */    
//    
//    type record of UserId UserIdList;
//	modulepar UserIdList TEST_USER_ID_LIST := f_createUserIdList(); 
//
//	function f_createUserIdList() return UserIdList{
//        const integer c_maxTestUsers := 10000; 
//        var UserIdList v_userIdList;
//        
//        //initialize test user Id values 
//        for (var integer index:=0; index< c_maxTestUsers; index := index+1) {
//        	v_userIdList[index] := {
//        		index, //PT140: must be of type pan
//        		index+10000, // contractSerialNumber = INT4; may start e.g. at 10000
//        		"EU"&index, // licenseplatenumber = type LPN
//        		"99"&index // type obeId = manufacturer id (i.e. 99) + equipment OBU id
//        	}
//        }
//        return v_userIdList;
//	}
//	// make them availble at run time
//
//	
//}
//     
//    
   
