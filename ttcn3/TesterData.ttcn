/**
 * @author    PT0140  
 * @desc      This module declares test data which are being prepared by the tester
 * @version   $id$
 */

module EfcInfoExchange_TesterData language "TTCN-3:2010 Advanced Parameterization"{
	//TODO Add default values and tags for semantic definitions in comments

	//importing other modules
	import from EfcInfoExchange_Functions all;
	import from EfcInfoExchange_Templates all;
		
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;	//from ISO 12855:2015
	import from EfcDsrcApplication language "ASN.1:1997" all;
	import from EfcAutonomousCharging language "ASN.1:1997" all;
	import from EfcAutonomousContextData language "ASN.1:1997" all;
	
	//importing ASN.1 data manually translated into TTCN-3
	import from LibEfc_Common_Parameterised_Asn1_Data all;
	
	group CommonTesterData {
        modulepar EfcDsrcApplication.Provider TD_IDENTIFIER:= {'1010010000'B, 99}; // Default is Sweden.99 = 'A40053'H
            // [SEMANTIC DEFINITION] The provider identifier of the tester
            // acccording to ISO 14906 consisting of countryCode and issuerIdentifier
 		
 		// TODO the provider values cannot be identical
 		// ANSWER for the TODO: Yes, they can be identical. The same identifier (of data type provider) is used
 		//ANSWER TO THE ANSWER of the TODO, WE CANNOT HAVE VALIDS AND INVALIDS THE SAME
 		// in different data elements: APDU_ORIGINATOR, INFORMATION_SENDER, ... This is in reality
 		// in most cases one and the same entity
 		// FINAL ANSWER: O.k. But then the TODO was not located at the correct location. Should have been further down.
 		// Changed the values for in invalid cases now.
        modulepar EfcDsrcApplication.Provider TD_APDU_ORIGINATOR_FOR_TESTER:={'1010010000'B, 99};
            // [SEMANTIC DEFINITION] The originator id of the tester
            // that is used in the APCI field apdu originator. Same syntax as the provider identifier. 
 
        modulepar EfcDsrcApplication.Provider TD_INFORMATION_SENDER_TESTER:={'1010010000'B, 99};
            // [SEMANTIC DEFINITION] The sender id of tester
            // that is used in the APCI field sender id. Same syntax as the provider identifier.
 
        modulepar EfcDsrcApplication.Provider TD_INVALID_APDU_ORIGINATOR_TESTER:={'1010010000'B, 88};
            // [SEMANTIC DEFINITION] The originator id of the tester used
            // in an invalid base test case. Shall be different from the correct originator id of the tester 
 
        modulepar EfcDsrcApplication.Provider TD_INVALID_INFORMATION_SENDER_TESTER:={'1010010000'B, 88};
            // [SEMANTIC DEFINITION] The sender id of the tester used 
            // in an invalid base test case. Shall be different from the correct sender id of the tester
 
        modulepar EfcDsrcApplication.PersonalAccountNumber TD_PAN_1:= '11223344556677889900'O,
        	TD_PAN_2:= '22334455667788990011'O, TD_PAN_3:= '33445566778899001122'O, TD_PAN_4:= '44556677889900112233'O,
        	TD_PAN_5:= '55667788990011223344'O, TD_PAN_6:= '66778899001122334455'O, TD_PAN_7:= '77889900112233445566'O,
        	TD_PAN_8:= '88990011223344556677'O;       
            // [SEMANTIC DEFINITION] The personal account number applied by the tester in test cases

        modulepar EfcDsrcApplication.LPN TD_LPN_1 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353631'O // plate number = "OCD561"
        	},
        	TD_LPN_2 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353632'O // plate number = "OCD562"
        	},
        	TD_LPN_3 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353633'O // plate number = "OCD563"
        	},
        	TD_LPN_4 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353634'O // plate number = "OCD564"
        	},
			TD_LPN_5 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353635'O // plate number = "OCD565"
        	},
			TD_LPN_6 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353636'O // plate number = "OCD566"
        	},
			TD_LPN_7 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353637'O // plate number = "OCD567"
        	},
			TD_LPN_8 := {
        		countryCode:='1010010000'B, // country of registration = Sweden
        		alphabetIndicator:=latinAlphabetNo1, // alphabeth indicator = latin(1)
        		licencePlateNumber:= '4f4344353638'O // plate number = "OCD568"
        	};
            //[SEMANTIC DEFINITION] The license plate numbers applied by the tester in test cases        

		modulepar EfcInfoExchange.Int4 TD_MANUFACTURER_ID_1 := 97, TD_MANUFACTURER_ID_2 := 98, TD_MANUFACTURER_ID_3 := 99;
			//[SEMANTIC DEFINITION] Manufacturer ids used by the tester e.g. in contract issuer data 

		modulepar EfcAutonomousCharging.ObeId TD_OBE_ID_1 := {
				manufacturerId := TD_MANUFACTURER_ID_1,
				equipmentObuId := '112233445566'O // id of the obe = 112233445566
			},
			TD_OBE_ID_2 := {
				manufacturerId := TD_MANUFACTURER_ID_2,
				equipmentObuId := '223344556677'O // id of the obe = 223344556677
			},
			TD_OBE_ID_3 := {
				manufacturerId := TD_MANUFACTURER_ID_3,
				equipmentObuId := '334455667788'O // id of the obe = 334455667788
			},
			TD_OBE_ID_4 := {
				manufacturerId := TD_MANUFACTURER_ID_1,
				equipmentObuId := '445566778899'O // id of the obe = 445566778899
			},
			TD_OBE_ID_5 := {
				manufacturerId := TD_MANUFACTURER_ID_2,
				equipmentObuId := '556677889900'O // id of the obe = 556677889900
			},
			TD_OBE_ID_6 := {
				manufacturerId := TD_MANUFACTURER_ID_3,
				equipmentObuId := '667788990011'O // id of the obe = 667788990011
			},
			TD_OBE_ID_7 := {
				manufacturerId := TD_MANUFACTURER_ID_1,
				equipmentObuId := '778899001122'O // id of the obe = 778899001122
			},
			TD_OBE_ID_8 := {
				manufacturerId := TD_MANUFACTURER_ID_2,
				equipmentObuId := '889900112233'O // id of the obe = 889900112233
			};
            // [SEMANTIC DEFINITION] The obe ids applied by the tester in test cases        

		modulepar EfcDsrcApplication.ContractSerialNumber TD_CSN_1 := 1, // id of the contract = 1
			TD_CSN_2 := 2, // id of the contract = 2
			TD_CSN_3 := 3, // id of the contract = 3
			TD_CSN_4 := 4, // id of the contract = 4
			TD_CSN_5 := 5, // id of the contract = 5
			TD_CSN_6 := 6, // id of the contract = 6
			TD_CSN_7 := 7, // id of the contract = 7
			TD_CSN_8 := 8; // id of the contract = 8
            // [SEMANTIC DEFINITION] The contract serial number applied by the tester in test cases 		
		
		modulepar VehicleParameters TD_VEHICLE_PARAMETERS := {
			dateAndTime:= "20180831120000", // expressed in YYYYMMDDHHMMSS 
			vehicleClass:="HGV > 3,5t",
			vehicleLength:=omit, // not used in this tester data
			vehicleWidth:=omit, // not used in this tester data
			vehicleHeight:=omit, // not used in this tester data
			heightAbove1stAxle:=omit, // not used in this tester data
			vehicleAxles:=3, // 3 axles
			trailerAxles:=2, // 2 axles
			trailerPresence:=true // trailer present
		};
            // [SEMANTIC DEFINITION] The data structure VehicleParameters applied by the tester in test cases	
		modulepar UTF8String TD_VAT_ID := "ATU99999";
            // [SEMANTIC DEFINITION] The vat identification number applied by the tester in test cases 		
		 
		modulepar UserId TD_USERID_1:={TD_PAN_1, TD_CSN_1,TD_LPN_1,TD_OBE_ID_1},
			TD_USERID_2:={TD_PAN_2, TD_CSN_2,TD_LPN_2,TD_OBE_ID_2},
			TD_USERID_3:={TD_PAN_3, TD_CSN_3,TD_LPN_3,TD_OBE_ID_3},
			TD_USERID_4:={TD_PAN_4, TD_CSN_4,TD_LPN_4,TD_OBE_ID_4},
			TD_USERID_5:={TD_PAN_5, TD_CSN_5,TD_LPN_5,TD_OBE_ID_5},
			TD_USERID_6:={TD_PAN_6, TD_CSN_6,TD_LPN_6,TD_OBE_ID_6},
			TD_USERID_7:={TD_PAN_7, TD_CSN_7,TD_LPN_7,TD_OBE_ID_7},
			TD_USERID_8:={TD_PAN_8, TD_CSN_8,TD_LPN_8,TD_OBE_ID_8}; 
 			// [SEMANTIC DEFINITION] The IDs of users including the individual identifieres for the account,
 			// contract, license plate and obe that is used in multiple testcases inside toll declarations,
 			// billing details and payment claims.
            
	} // end group CommonTesterData		

	 
	group ContractIssuerData {

		modulepar EfcDsrcApplication.EFC_ContextMark TD_EFC_CONTEXT_MARK := {TD_INFORMATION_SENDER_TESTER, '1111'O ,99}; //'A40053000503'H;
			// [SEMANTIC DEFINITION] The EFCContextMark used by the tester
			// in contract issuer data. Used according to ISO 14906.

		modulepar EfcInfoExchange.Int2 TD_EQUIPMENT_CLASS := 341;
			// [SEMANTIC DEFINITION] The equipment class value (for OBU) the tester applies in Contract Issuer data.

		modulepar UTF8String TD_UNIQUE_PART_OF_PAN := "76543";
			// [SEMANTIC DEFINITION] The unique part of thge PAN the tester applies in contract issuer data;

		modulepar UTF8String TD_TYPE_OF_EFCAPPLICATION := "TheEFCApplicationType";
			// [SEMANTIC DEFINITION] The designation of the type of the efc application
			// used by the tester as part of the contract issuer data (refer also to ISO 12855)

		modulepar UTF8String TD_SECURITY_LEVEL := "TheSecurityLevel";
			// [SEMANTIC DEFINITION] The designation of the security level 
			// used by the tester as part of the contract issuer data (refer also to ISO 12855)

		modulepar EfcInfoExchange.Int2 TD_AC_CR_KEY_REFERENCE := 120;
			// [SEMANTIC DEFINITION] The value used by the tester
			// for the access key reference (refer also to ISO 14906) 

		modulepar integer TD_AUTH_KEY_REFERENCE := 112;
			// [SEMANTIC DEFINITION] The value used by the tester
			// for the authentication key reference (refer to also ISO 14906) 

		modulepar UTF8String TD_UNIQUE_PART_OF_PAN_INVALID:="99999";
			// [SEMANTIC DEFINITION] The unique part of thge PAN the tester applies as part of invalid contract issuer data;

		modulepar EfcInfoExchange.Int2 TD_AC_CR_KEY_REFERENCE_INVALID := 0;
			// [SEMANTIC DEFINITION] An invalid value used by the tester the access key reference (refer to also ISO 14906)

		modulepar integer TD_AUTH_KEY_REFERENCE_INVALID := 168;
			// [SEMANTIC DEFINITION] An invalid value used by the tester
			// for the authentication key reference (refer to also ISO 14906)
				

		//TODO I (Ulrik) propose that we rename this to m_aduContractIssuerList and move it to templates
		template ContractIssuerListADU m_contractIssuerListADU_Tester(in EfcInfoExchange.Int4 p_manufacturerID):={
			efcContextMark := TD_EFC_CONTEXT_MARK,
			equipmentClass := TD_EQUIPMENT_CLASS,
			manufacturerID := p_manufacturerID,
			uniquePartOfPAN := TD_UNIQUE_PART_OF_PAN,
			typeOfEFCApplication := TD_TYPE_OF_EFCAPPLICATION,
			securityLevel := TD_SECURITY_LEVEL,
			acCrKeyReference := TD_AC_CR_KEY_REFERENCE,
			authKeyReference := TD_AUTH_KEY_REFERENCE,
			validFrom := fx_getUtc(-3600*24) 
	   	}

		//TODO do we really need the flexibility and complexity of having these as modulepars, I propose that we replace 
		//TD_CONTRACT_ISSUER_DATA_VALID_1 with m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_1) and so on for 2,3 in valids and invalids

		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_VALID_1 := m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_1);        
			// [SEMANTIC DEFINITION] A ContractIssuerAdu containing data elements set with valid tester data as defined in this module
			// and applying the value TD_MANUFACTURER_ID_1 as defined in this module for manufacturerId  	

        modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_VALID_2 := m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_2);
        	// [SEMANTIC DEFINITION] A ContractIssuerAdu containing data elements set with valid tester data as defined in this module
			// and applying the value TD_MANUFACTURER_ID_2 as defied in this module for manufacturerId  	

        modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_VALID_3 := m_contractIssuerListADU_Tester(TD_MANUFACTURER_ID_3);
        	// [SEMANTIC DEFINITION] A ContractIssuerAdu containing data elements set with valid tester data as defined in this module
			// and applying the value TD_MANUFACTURER_ID_3 as defined in this module for manufacturerId  	

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_1(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester:=
		{
			uniquePartOfPAN := TD_UNIQUE_PART_OF_PAN_INVALID
		}

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_2(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester :=
		{
			acCrKeyReference := TD_AC_CR_KEY_REFERENCE_INVALID
		}	

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_3(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester :=
		{
			authKeyReference := TD_AUTH_KEY_REFERENCE_INVALID
		}	

		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_INVALID_1 := m_contractIssuerListADU_Invalid_1(TD_MANUFACTURER_ID_1);
			// [SEMANTIC DEFINITION] A ContractIssuerAdu containing data elements set with valid tester data as defined in this module
			// and applying the invalid value TD_UNIQUE_PART_OF_PAN_INVALID for the unique part of the pan
			// and the value TD_MANUFACTURER_ID_1 as defined in this module for manufacturerId  	

		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_INVALID_2 := m_contractIssuerListADU_Invalid_2(TD_MANUFACTURER_ID_1);
			// [SEMANTIC DEFINITION] A ContractIssuerAdu containing data elements set with valid tester data as defined in this module
			// and applying the invalid value TD_AC_CR_KEY_REFERENCE_INVALID for the access credential key reference
			// and the value TD_MANUFACTURER_ID_2 as defined in this module for manufacturerId  	

		modulepar ContractIssuerListADU TD_CONTRACT_ISSUER_DATA_INVALID_3 := m_contractIssuerListADU_Invalid_3(TD_MANUFACTURER_ID_1);
			// [SEMANTIC DEFINITION] A ContractIssuerAdu containing data elements set with valid tester data as defined in this module
			// and applying the invalid value TD_AC_CR_KEY_REFERENCE_INVALID for the authentication key reference
			// and the value TD_MANUFACTURER_ID_3 as defined in this module for manufacturerId  	
		
	} // end group ContractIssuerData	

	group DSRC_BILLINGDETAILS {
	    type integer IntMax10000 (0..10000);
		modulepar UserId TD_BILLINGDETAILS_USERID:={TD_PAN_1, TD_CSN_1,TD_LPN_1,TD_OBE_ID_1};	
 			// [SEMANTIC DEFINITION] The ID of the user that is to be billed in when the tester sends a BillingDetailsADU in the DSRC.BILLINGDETAILS transaction
 			// applied all four parts of the user Id as defined in this module

		modulepar Int8Signed TD_PAYMENT_FEE_AMOUNT:=10;
			// [SEMANTIC DEFINITION] The fee that will appear on the bill

		modulepar PayUnit TD_BILLINGDETAILS_PAYUNIT:='0978'O; // currency in main units
			// [SEMANTIC DEFINITION] The currency unit that will appear on the bill according to ISO 4217		

	    modulepar IntMax10000 TD_BILLINGDETAILS_VAT:=0; 
			// [SEMANTIC DEFINITION]The VAT rate expressed in 0.01%
			
		modulepar ExtendedPaymentAmount TD_BILLINGDETAILS_VALIDAMOUNT := {TD_PAYMENT_FEE_AMOUNT,TD_BILLINGDETAILS_PAYUNIT,TD_BILLINGDETAILS_VAT};
			// [SEMANTIC DEFINITION] A complete valid payment amount for Billing Details
			
		modulepar integer TD_BILLING_DETAILS_NUM_1:=1, TD_BILLING_DETAILS_NUM_2:=2;
			// [SEMATIC DEFINITION] Identifer that together with the issuerId forms a unique BillingDetailsId 		

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_CONTEXTNAME:="TheContextName";
			// [SEMANTIC DEFINITION] According to ISO 17575-3		

		modulepar EfcAutonomousContextData.Int4 TD_CHARGE_OBJECT_DESIGNATION_NON_EXISTING:=9999;
			// [SEMATIC DEFINITION] A non existing charge object designation for provoking errors in BILLINGDETAILS transaction when reporting sectioned roads	

		modulepar Provider TD_TOLL_CONTEXT:={'1010010000'B, 99}; // Default is Sweden.99 = 'A40053'H
            // [SEMANTIC DEFINITION] The identifier of the toll context which is used in dsrcBillingDetails
            // in case the tester is the toll charger             
		
		modulepar Provider TD_TOLL_CONTEXT_NON_EXISTING:={'1010010000'B, 88}; // Default is Sweden.88
            // [SEMANTIC DEFINITION] The identifier of the non existing toll context which is used in dsrcBillingDetails
            // in case the tester is the toll charger in invalid test cases            
	
		modulepar UTF8String TD_TOLL_CONTEXT_NAME_NON_EXISTING:="The non-existing toll context name";
            // [SEMANTIC DEFINITION] The non-existing name of a toll context which is used in dsrcBillingDetails
            // in case the tester is the toll charger in invalid test cases            
		
		modulepar UTF8String TD_TOLL_AREA_NAME:="The toll area name";
			// [SEMANTIC DEFINITION] According to ISO 17575-3		

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_USERCLASS:="TheUserClass";
			// [SEMANTIC DEFINITION] According to ISO 17575-3

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_USERCLASS_NON_EXISTING:="TheNonExistingUserClass";
			// [SEMANTIC DEFINITION] According to ISO 17575-3

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_DECLAREDVEHCLASS:="TheVehicleClass";
			// [SEMANTIC DEFINITION] According to ISO 17575-3

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_VEHCLASS_NON_EXISTING:="TheNonExistingVehicleClass";
			// [SEMANTIC DEFINITION] According to ISO 17575-3

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_TIMECLASS:="TheTimeClass";
			// [SEMANTIC DEFINITION] According to ISO 17575-3

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_TIMECLASS_NON_EXISTING:="TheNonExistingTimeClass";
			// [SEMANTIC DEFINITION] According to ISO 17575-3

		modulepar LanguageID TD_DSRC_BILLINGDETAILS_LANG:="it"; // Default value set to Italy, 
			// [SEMANTIC DEFINITION] According to definitions in ISO 639-1

		modulepar UTF8String TD_DSRC_BILLINGDETAILS_TEXT:="Nothing to add";
 			// [SEMANTIC DEFINITION] Any comment needed to be added

		modulepar LanguageID TD_GNSS_BILLINGDETAILS_LANG:="it"; // Default value set to Italy
			// [SEMANTIC DEFINITION] According to definitions in ISO 639-1

		modulepar UTF8String TD_GNSS_BILLINGDETAILS_TEXT:="Nothing to add";
 			// [SEMANTIC DEFINITION] Any comment needed to be added
 			
		modulepar integer TD_AREA_STAY_DURATION :=1000; // Default value set to 1000 charge units
 			// [SEMANTIC DEFINITION] The duration of a stay in an toll area expresed in charge units
 			
    	modulepar EfcAutonomousCharging.ChargeObjectId TD_CHARGE_OBJECT_ID:={
			chargeReportFinalRecipient:=omit,
			chargeObjectDesignation:= 333333
		};						
 	  	    // [SEMANTIC DEFINITION] Charge object id of one charge object in the domain managed by the toll charger
  			
    	modulepar EfcAutonomousCharging.ChargeObjectId TD_ENTRY_LOCATION:={
			chargeReportFinalRecipient:=omit,
			chargeObjectDesignation:= 200000
		};
			// [SEMANTIC DEFINITION] Charge object id of one entry location in the domain managed by the toll charger
			// Shall be present in toll context data used in the test 
			
    	modulepar EfcAutonomousCharging.ChargeObjectId TD_EXIT_LOCATION:={
			chargeReportFinalRecipient:=omit,
			chargeObjectDesignation:= 21000
		};
			// [SEMANTIC DEFINITION] Charge object id of one exit location in the domain managed by the toll charger
			// Shall be present in toll context data used in the test 

		modulepar EfcAutonomousCharging.int4 TD_LOCATION_CLASS :=200; // Default valuen set to class id 200
 			// [SEMANTIC DEFINITION] The location class applied by the tester in usage lists
			// Shall be present in toll context data used in the test 

		modulepar integer TD_TOLL_AREA_ACCUMULATED_DISTANCE := 10; // Default value set to 10 meters
			// [SEMANTIC DEFINITION] The distance traveled by a vehicle reported in usage details
			// for traveling in an area expressed in meters

		modulepar EfcAutonomousContextData.ChargeUnit TD_STAY_AREA_CHARGE_UNIT :={
			time:={dur:=100,durUnit:=DurUnit_seconds_} // Default value set to 100 seconds
		};
			// [SEMANTIC DEFINITION] The charge unit applied by the tester in usage details for
			// staying in areas  
	}
	
	group EXCEPTIONLIST {
	
		modulepar ExceptionListVersion TD_EXCEPTIONLIST_VERSION := 1;
 			// [SEMANTIC DEFINITION] The version number of the exception list applied by the tester				

		modulepar UserId TD_USERID_BLACK_1 := {
				pan := TD_PAN_1, // personal account number as defined in TD_PAN_1 
				contractSerialNumber := omit, // contract serial number not used
				licencePlateNumber := TD_LPN_1, // license plate number as defined in TD_LPN_1
				obeID := TD_OBE_ID_1 // obe identifier as defined in TD_OBE_ID_1
			};			
            // [SEMANTIC DEFINITION] The data structure UserId applied by the tester in test cases for a blacklisted user 		

		modulepar UserId TD_USERID_DISCOUNTED_1 := {
				pan := TD_PAN_1, // personal account number as defined in TD_PAN_1 
				contractSerialNumber := TD_CSN_1, // contract serial number as defined in TD_CSN_1
				licencePlateNumber := TD_LPN_1, // license plate number as defined in TD_LPN_1
				obeID := TD_OBE_ID_1 // obe identifier as defined in TD_OBE_ID_1
			};
            // [SEMANTIC DEFINITION] The data structure UserId applied by the tester in test cases for a discounted user 		
				
		const ExceptionListADU c_exceptionListAduBlackValid1:=m_aduExceptionList(
			ExceptionListType_blackList_,
			TD_USERID_1,
			ExceptionListStatusType_locallyBlocked_,
			ExceptionListReasonType_notToBeDisclosed_,
			ExceptionListActionType_rejectOBE_
		);

		const ExceptionListADU c_exceptionListAduBlackValid2:=m_aduExceptionList(
			ExceptionListType_blackList_,
			TD_USERID_2,
			ExceptionListStatusType_locallyBlocked_,
			ExceptionListReasonType_notToBeDisclosed_,
			ExceptionListActionType_rejectOBE_
		);

		const ExceptionListADU c_exceptionListAduWhiteValid:=m_aduExceptionList(
			ExceptionListType_whiteList_,
			TD_USERID_1,
			ExceptionListStatusType_allApplications_,
			ExceptionListReasonType_whiteListedUser_,
			ExceptionListActionType_acceptOBE_
		);

		const ExceptionListADU c_exceptionListAduDiscountedValid:=m_aduExceptionList(
			ExceptionListType_discountedList_,
			TD_USERID_DISCOUNTED_1,
			ExceptionListStatusType_allApplications_,
			ExceptionListReasonType_notToBeDisclosed_,
			ExceptionListActionType_acceptOBE_
		);
	} // end group EXCEPTIONLIST		

	group TRUSTOBJECTS {
		modulepar TrustObjectCode TD_DSRC_MASTER_KEY:={dsrcMasterKeys:=TD_SYMMETRIC_KEY};
		modulepar octetstring TD_CERT_REVOKE_LIST;
		modulepar octetstring TD_CERTIFICATE_OCT_STR;
	 	const CertificateObject TD_CERTIFICATE:={
			certificateType:=CertificateType_certTcHTTPS_,
			certificate:=TD_CERTIFICATE_OCT_STR
		}
	 	modulepar octetstring TD_GENERIC_TRUST_OBJECT;
	 	modulepar PublicKeyObject TD_PUBLICKEY;
    	modulepar DsrcKeyObject TD_SYMMETRIC_KEY;
    	modulepar DsrcKeyObject TD_SYMMETRIC_KEY_ENCRYPTED;
    	modulepar DsrcKeyRef dsrcKeyRefObjectTESTER_VALUE := {
    	 	eFCContextMark := TD_EFC_CONTEXT_MARK,
    	 	keyRef := 0,
    	 	referenceType := ReferenceType_cCCAuthenticationKeyRef_ 
    	};

		modulepar GenericTrustObject invalidTESTERGenericObject := {
		  typeOfTrustObject := TrustObjectTypes_certificate_,
		  genericTrustObject := TD_GENERIC_TRUST_OBJECT
		};   
	}	

	group USERDETAILS {
				
		type record of UserParameterResponseDetails RoUserParameterResponseDetails;

		modulepar RoUserParameterResponseDetails TD_USER_PARAM_RESP_DETAILS := {
			{userPostalAddress := {"TestUserName","TestCompany","TestStreet","999999","TestTown","TestCountry","TestCompanyTaxIdentifier"}},
			{contractSerialNumber := 1234567890}, //INT4 in ISO14906
			{contractValidity := {'ABCDABCD'O, {2030, 12, 31}}},
			{driverCharacteristics := {10, 255}}, //{INT!, INT1} in ISO14906
			{eFC_ContextMark := TD_EFC_CONTEXT_MARK},
			{environmentalCharacteristics := {euro_6, co2class4}}, 
			{engineCharacteristics := EngineCharacteristics_battery_},
			{equipmentOBUId:='11AA22BB33CC'O},
			{equipmentStatus := '0000000000000001'B},//BitString(16)
			{paymentMeans :=TD_PAYMENT_MEANS_1}, //paymentmaens value for testing
			{paymentMeansBalance := {positive:=10}},
			{paymentMeansUnit := TD_BILLINGDETAILS_PAYUNIT},
			{personalAccountNumber := TD_PAN_1},
			{provider := TD_IDENTIFIER},
			{receiptContract := {TD_IDENTIFIER,'1F2E'O, 9999}},
			{validityOfContract := {'2030'O, {2040,12,31}}},
			{vehicleAuthenticator := '1234567890ABCDEF'O},
			{vehicleClass := 15},
			{vehicleDimensions := {99, 99, 99}},
			{vehicleLicencePlateNumber := TD_LPN_1},
			{vehicleIdentificationNumber := {"01234567890123456",'000000000'B}},
			{vehicleWeightLaden := 255},
			{vehicleWeightLimits := {99, 150, 50}}, 
			{vehicleAxles := {15, {dualTyres,{4,3}}}},
			{exhaustEmissionValues := {mg_km, 0, 0, 0, 0}},
			{dieselEmissionValues := {{mg_km, 0}, 0}},
			{extendedUserPostalAddress := {"TestRDescr", "TestOrganisationName","TestOrganisationUnit",
				"TestFunction",	"TestFormOfAddress", "TestQualification", "TestSurname", "TestGivenName", "TestDeliveryServicePoint",
				"TestThouroughFare", "1234567890", "TestTown",	"TestRegion", "TestCountry", "00999", "9876543210",
				"12345678901234567890", "00777", "9876543210", "12345678901234567890","00888", "9876543210",
				"12345678901234567890","test@email.biz"}}, 
			{preferredUserLanguage := "SE"}
		};	
            // [SEMANTIC DEFINITION] The data structure UserParameterResponseDetails applied by the tester
            // in test cases in which the user details are requested 
				
	}
	 
	group EFCCONTEXTDATA {
	 	modulepar  Optionally_Signed<TollContextOverview> TD_SIGNED_TOLL_CONTEXT_OVERVIEW;
	 	modulepar  Optionally_Signed<TollContextPartitionOverviews> TD_TOLL_CONTEXT_PARTITION_OVERVIEW;
	 	modulepar  Optionally_Signed<TariffTables> TD_TARIFF_TABLE;
	 	modulepar  Optionally_Signed<CurrencyConversionTable> TD_CURRENCY_CONVERSION_TABLE;
	 	modulepar  Optionally_Signed<TariffClassDefinition> TD_SIGNED_TARIFF_CLASS_DEF;
	 	modulepar  Optionally_Signed<LocalVehicleClassDefinition> TD_SIGNED_LOCAL_VEHICLE_CLASS_DEF;
	 	modulepar  Optionally_Signed<TimeClassDefinition> TD_SIGNED_TIME_CLASS_DEF;
	 	modulepar  Optionally_Signed<UserClassDefinition> TD_SIGNED_USER_CLASS_DEF;
	 	modulepar  Optionally_Signed<TollContextPartitionLayouts> TD_TOLL_CONTEXT_LAYOUT;
	 	modulepar  Optionally_Signed<ChargeReportingEventss>  TD_CHARGE_REPORTING_EVENTS;
	 	modulepar  Optionally_Signed<ChargeReportConfigurations> TD_SIGNED_CHARGE_REPORT_CONFIG;

	 	modulepar  EfcDsrcApplication.Int1 TD_TOLL_CONTEXT_VERSION:=2; // version 2
			// [SEMANTIC DEFINITION] The toll context version the tester applies as toll charger
			// when providing toll context data to the IuT
	 	
		modulepar octetstring TD_BASIC_VERSION_ID:='0001'O;
			// [SEMANTIC DEFINITION] The version id used by the tester in tariff tables and
			// closed toll context layout data

	}		

	group TOLLDECLARATION{
		modulepar EfcDsrcApplication.PaymentMeans TD_PAYMENT_MEANS_1:={
			personalAccountNumber:=PAN1,
			paymentMeansExpiryDate:={2030,12,31},
			pamentMeansUsageControl:='0000'O
		};
            // [SEMANTIC DEFINITION] The value of the data structure paymentMeans applied by the tester

		modulepar bitstring TD_CHARGE_REPORT_PER_BITSTING;
			// [SEMANTIC DEFINITION] The bitsring containing the per-encoded value charge report
			// sent by the tester
				
		modulepar MessageAuthenticator TD_MESSAGE_AUTHENTICATOR;
			// [SEMANTIC DEFINITION] The content of message authenticator of the
			// charger report sent by the tester

		modulepar AuthenticatedChargeReport TD_AUTHENTICATED_CHARGE_REPORT:={
			chargeReportPer:=TD_CHARGE_REPORT_PER_BITSTING,
			messageAuthenticator:=TD_MESSAGE_AUTHENTICATOR
		};		
            // [SEMANTIC DEFINITION] The content of the AuthenticatedChargeReport applied by the tester
            // in a test case 
				
		const UsageStatement c_usageStatement_1 := m_usageStatement(1,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_2 := m_usageStatement(2,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_3 := m_usageStatement(3,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_4 := m_usageStatement(4,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_5 := m_usageStatement(5,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_6 := m_usageStatement(6,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_7 := m_usageStatement(7,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_8 := m_usageStatement(8,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_9 := m_usageStatement(9,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_10 := m_usageStatement(10,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_11 := m_usageStatement(11,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_12 := m_usageStatement(12,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_13 := m_usageStatement(13,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_14 := m_usageStatement(14,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_15 := m_usageStatement(15,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_16 := m_usageStatement(16,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_17 := m_usageStatement(17,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_18 := m_usageStatement(18,TD_SINGLE_TARIFF_CLASS_SESSION_2);
		const UsageStatement c_usageStatement_19 := m_usageStatement(19,TD_SINGLE_TARIFF_CLASS_SESSION_1);
		const UsageStatement c_usageStatement_20 := m_usageStatement(20,TD_SINGLE_TARIFF_CLASS_SESSION_2);
				
		modulepar AggregatedSingleTariffClassSession TD_SINGLE_TARIFF_CLASS_SESSION_1:={
    		timePeriodCovered:= TD_PERIOD_1, // mandatory according to IAP
    		currentTariffClass := omit, 
    		vehicleDescription := true,	// mandatory according to IAP
    		totalDistanceCovered := omit,  // shall not be used according to IAP
    		numberOfDetectedEvents := omit, // shall not be used according to IAP
    		obeStatus := omit, // shall not be used according to IAP
    		feeExclVat := { // mandatory according to IAP
    			paymentFeeAmount:= 300, // 300 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 3,00 EUR
 				vatRate:=omit // no VAT applied in this case
 			},				   		
    		sumVat := { // mandatory according to IAP
      			paymentFeeAmount:= 60, // 60 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 0,60 EUR
 				vatRate:=2000 // expressed in units of 0,01%, i.e. 20,00%
    		}
    	},
    	TD_SINGLE_TARIFF_CLASS_SESSION_2:={
    		timePeriodCovered:= TD_PERIOD_2, // mandatory according to IAP
    		currentTariffClass := omit, 
    		vehicleDescription := true,	// mandatory according to IAP
    		totalDistanceCovered := omit,  // shall not be used according to IAP
    		numberOfDetectedEvents := omit, // shall not be used according to IAP
    		obeStatus := omit, // shall not be used according to IAP
    		feeExclVat := { // mandatory according to IAP
    			paymentFeeAmount:= 3786, // 3786 units 
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 37,86 EUR
 				vatRate:=omit // no VAT applied in this case
 			},				   		
    		sumVat:={ // mandatory according to IAP
      			paymentFeeAmount:= 697, // 697 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 6,97 EUR
 				vatRate:=1850 // expressed in units of 0,01%, i.e. 18,50%
    		}
    	};
			// [SEMANTIC DEFINITION] The content of the data structure aggregatedSingleTariffClassSession
			// applied by the tester in usage statements of toll declarations
    }


	group GNSS_BILLINGDETAILS {	
		modulepar EfcAutonomousCharging.Period TD_PERIOD_1:={
			beginOfPeriod:=fx_getUtc(-2200000),
    		endOfPeriod:=fx_getUtc(-2196000)
    	},
    	TD_PERIOD_2:={
 			beginOfPeriod:=fx_getUtc(-1800000),
    		endOfPeriod:=fx_getUtc(-17900000)
    	};
			// [SEMANTIC DEFINITION] The content of the data structure period applied by the tester
			// in aggregated single tariff class sessions (in usage statements of toll declarations)
			// and billing details 		
    				
		modulepar UTF8String TD_USER_CLASS:= "Frequent user";
			// [SEMANTIC DEFINITION] The user class value applied by the tester in test cases
			// for billing details 		
				
		modulepar UTF8String TD_DECLARED_VEHICLE_CLASS:="20";
			// [SEMANTIC DEFINITION] The vehicle class value applied by the tester in test cases
			// for billing details 		

		modulepar UTF8String TD_APPLIED_TIME_CLASS:="99";
			// [SEMANTIC DEFINITION] The time class value applied by the tester in test cases
			// for billing details 		

		modulepar UTF8String TD_COST_CENTER:="The cost center";
			// [SEMANTIC DEFINITION] The cost center value applied by the tester in test cases
			// for billing details		
						
		modulepar TollEventId TD_TOLL_EVENT_ID :={
			counterType:={
		 		chargeReportCounter:=99
		 	},
		 	usageStatementID:=999
		 };
			// [SEMANTIC DEFINITION] The identifier of the toll event applied by the tester in the template
			// m_sectionedRoadGnssUsageList 		
		 	
		modulepar ExtendedPaymentAmount TD_DISCOUNT_AMOUNT:={
		 		paymentFeeAmount:= 200, // 200 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 2,00 EUR
 				vatRate:=omit // no VAT applied in this case
 			};
			// [SEMANTIC DEFINITION] The values of discount amount applied by the tester
			// for BillingDetails in test cases 		

		modulepar DiscountQualifier TD_DISCOUNT_QUALIFIER := DiscountQualifier_vehicleDiscount_;
			// [SEMANTIC DEFINITION] The type of the discount as applied by the tester in the template
			// m_sectionedRoadGnssUsageList 		
		
		const ExtendedPaymentAmount c_extPayAmountNothing:={0,TD_BILLINGDETAILS_PAYUNIT,0};
 		modulepar ExtendedPaymentAmount
 			TD_BILLINGDETAILS_AMOUNT_1:={
 				paymentFeeAmount:= 1470, // 1470 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 14,70 EUR
 				vatRate:=1780 // expressed in units of 0,01%, i.e. 17,80%
 			},
 			TD_BILLINGDETAILS_AMOUNT_2:={
 				paymentFeeAmount:= 311, // 311 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 3,11 EUR
 				vatRate:=omit // no VAT applied in this case 				
			}, 			
 			TD_BILLINGDETAILS_AMOUNT_3:={
 				paymentFeeAmount:= 953, // 953 units
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 9,53 EUR
 				vatRate:=1990 // expressed in units of 0,01%, i.e. 19,90%
 			},
 			TD_BILLINGDETAILS_AMOUNT_4:={
				paymentFeeAmount:= 2367, // 2367 units 
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 23,67 EUR
 				vatRate:=2175 // expressed in units of 0,01%, i.e. 21,75%
			},	 		
 			TD_BILLINGDETAILS_AMOUNT_5:={
				paymentFeeAmount:= 89, // 89
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 0,89 EUR
 				vatRate:=omit // no VAT applied in this case
			};		 
			// [SEMANTIC DEFINITION] The values of billing details amount applied by the tester
			// for BillingDetails in various test cases 		

 	}
 	
 	group PAYMENTANNOUNCEMENT {
 	
		modulepar integer TD_PAYMENTANNOUNCEMENT_ID_1:=1, TD_PAYMENTANNOUNCEMENT_ID_2:=2,
			TD_PAYMENTANNOUNCEMENT_ID_3:=3;
			// [SEMANTIC DEFINITION] The ids of the paymentAnnouncements which are sent be the tester
			// in test cases of the trasnaction type PaymentAnnouncement
			
 		modulepar integer TD_PAYMENTANNOUNCEMENT_ID_NON_EXISTING:=9999;
			// [SEMANTIC DEFINITION] The id of the payment accouncement which previously
			// was not send by the tester but shall be revoled in a test case to test invalid scenarios 		
 		
 		modulepar ExtendedPaymentAmount
 			TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_1:={
 				paymentFeeAmount:= 45776, // 45776
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 457,76 EUR
 				vatRate:=1900 // expressed in units of 0,01%, i.e. 19,00%
 		},
 			TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_2:={
 				paymentFeeAmount:= 1396, // 1396
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 13,96 EUR
 				vatRate:=2120 // expressed in units of 0,01%, i.e. 21,20% 				
 		},
 			TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_3:={
 				paymentFeeAmount:= 17489, // 17489
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 174,89 EUR
		 		vatRate:=2090 // expressed in units of 0,01%, i.e. 20,90%  	
 		},
			TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_WITHOUTVAT:={
 				paymentFeeAmount:= 17489, // 17489
 				paymentFeeUnit:='2978'O, // ('2' = minor units of '978' = EUR), i.e. 174,89 EUR
		 		vatRate:=omit // no VAT applied in this tested data 
		};
			// [SEMANTIC DEFINITION] The values of payment amount applied by the tester
			// for PaymentAnnouncements and PaymentClaims in various test cases 		
	}
	
	group REPORTABNORMALOBE {
	
		modulepar integer TD_ABNORMAL_OBE_REASON_CODE_INVALID:=100; // 5-100 reserved for future CEN and ISO use, thus the value 100 is invalid 	
			// [SEMANTIC DEFINITION] The obeReason code applied by the tester in ReportAbnormalOBE test cases
			// to indicate and invalid reason code
	}
	
} // end module 
  
   
