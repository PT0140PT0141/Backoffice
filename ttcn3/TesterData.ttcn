/**
 * @author    PT0140  
 * @desc      This module declares test data which are being prepared by the tester
 * @version   $id$
 */

module EfcInfoExchange_TesterData{

	//importing other modules
	import from EfcInfoExchange_Functions all;
		
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;	//from ISO 12855:2015
	import from EfcDsrcApplication language "ASN.1:1997" all;
	import from EfcAutonomousCharging language "ASN.1:1997" all;
	import from EfcAutonomousContextData language "ASN.1:1997" all;
	
	//importing ASN.1 data manually translated into TTCN-3
	import from EfcInfoExchange_ParameterisedAsn1Data all;
	import from Common_ParametrisedAsn1Data all;
	
	modulepar Provider TESTER_IDENTIFIER;
	
	group ContractIssuerData {

		//TODO set sensible default values of the tester data parameters
		modulepar EfcDsrcApplication.EFC_ContextMark TESTER_EFC_CONTEXT_MARK;
		modulepar EfcInfoExchange.Int2 TESTER_EQUIPMENT_CLASS;
		modulepar EfcInfoExchange.Int4 TESTER_MANUFACTURER_ID_1;
		modulepar EfcInfoExchange.Int4 TESTER_MANUFACTURER_ID_2;
		modulepar EfcInfoExchange.Int4 TESTER_MANUFACTURER_ID_3;
		modulepar UTF8String TESTER_UNIQUE_PART_OF_PAN;
		modulepar UTF8String TESTER_TYPE_OF_EFCAPPLICATION;
		modulepar UTF8String TESTER_SECURITY_LEVEL;
		modulepar EfcInfoExchange.Int2 TESTER_AC_CR_KEY_REFERENCE;
		modulepar integer TESTER_AUTH_KEY_REFERENCE;
		modulepar UTF8String TESTER_UNIQUE_PART_OF_PAN_INVALID;
		modulepar EfcInfoExchange.Int2 TESTER_AC_CR_KEY_REFERENCE_INVALID;
		modulepar integer TESTER_AUTH_KEY_REFERENCE_INVALID;
				
		template ContractIssuerListADU m_contractIssuerListADU_Tester(in EfcInfoExchange.Int4 p_manufacturerID):={
			efcContextMark := TESTER_EFC_CONTEXT_MARK,
			equipmentClass := TESTER_EQUIPMENT_CLASS,
			manufacturerID := p_manufacturerID,
			uniquePartOfPAN := TESTER_UNIQUE_PART_OF_PAN,
			typeOfEFCApplication := TESTER_TYPE_OF_EFCAPPLICATION,
			securityLevel := TESTER_SECURITY_LEVEL,
			acCrKeyReference := TESTER_AC_CR_KEY_REFERENCE,
			authKeyReference := TESTER_AUTH_KEY_REFERENCE,
			validFrom := fx_getUtc(-3600*24) 
	   	}
 	
		modulepar ContractIssuerListADU TESTER_CONTRACT_ISSUER_DATA_VALID_1 := m_contractIssuerListADU_Tester(TESTER_MANUFACTURER_ID_1);        
        modulepar ContractIssuerListADU TESTER_CONTRACT_ISSUER_DATA_VALID_2 := m_contractIssuerListADU_Tester(TESTER_MANUFACTURER_ID_2);
        modulepar ContractIssuerListADU TESTER_CONTRACT_ISSUER_DATA_VALID_3 := m_contractIssuerListADU_Tester(TESTER_MANUFACTURER_ID_3);

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_1(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester:=
		{
			uniquePartOfPAN := TESTER_UNIQUE_PART_OF_PAN_INVALID
		}

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_2(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester :=
		{
			acCrKeyReference := TESTER_AC_CR_KEY_REFERENCE_INVALID
		}	

		template ContractIssuerListADU m_contractIssuerListADU_Invalid_3(in EfcInfoExchange.Int4 p_manufacturerID) modifies m_contractIssuerListADU_Tester :=
		{
			authKeyReference := TESTER_AUTH_KEY_REFERENCE_INVALID
		}	

		modulepar ContractIssuerListADU TESTER_CONTRACT_ISSUER_DATA_INVALID_1 := m_contractIssuerListADU_Invalid_1(TESTER_MANUFACTURER_ID_1);
		modulepar ContractIssuerListADU TESTER_CONTRACT_ISSUER_DATA_INVALID_2 := m_contractIssuerListADU_Invalid_2(TESTER_MANUFACTURER_ID_1);
		modulepar ContractIssuerListADU TESTER_CONTRACT_ISSUER_DATA_INVALID_3 := m_contractIssuerListADU_Invalid_3(TESTER_MANUFACTURER_ID_1);
		
	} // end group ContractIssuerData	
	
	group ExceptionListTesterData {
	
		modulepar ExceptionListVersion TESTER_EXCEPTIONLIST_VERSION := 1; // defined as integer
		modulepar ASNAUX.GeneralizedTime TESTER_EXCEPTIONLIST_VALIDITY_START;
		
		modulepar EfcDsrcApplication.PersonalAccountNumber TESTER_PAN_1;
		modulepar EfcDsrcApplication.LPN TESTER_LPN_1;
		modulepar EfcAutonomousCharging.ObeId TESTER_OBE_ID_1;

		modulepar UserId TESTER_USERID_BLACK_1 := {
			pan := TESTER_PAN_1,
			contractSerialNumber := omit,
			licencePlateNumber := TESTER_LPN_1,
			obeID := TESTER_OBE_ID_1
		}			
		modulepar ASNAUX.GeneralizedTime TESTER_ENTRY_VALIDITY_START;
		modulepar VehicleParameters TESTER_VEHICLE_PARAMETERS;
		modulepar ASNAUX.UTF8String TESTER_VAT_ID;  
		modulepar UserId TESTER_USERID_1;
		
		modulepar ExceptionListADU TESTER_EXCEPTIONLIST_ADU_BLACK_VALID := {
			exceptionListVersion := TESTER_EXCEPTIONLIST_VERSION,
			exceptionListType := ExceptionListType_blackList_,
		  	exceptionValidityStart := TESTER_EXCEPTIONLIST_VALIDITY_START,
		  	exceptionValidityEnd := omit,
		  	exceptionListEntries := {{	//Note: this is defined as record of ExceptionListEntry
		  	  	userId := TESTER_USERID_1,
		  	  	statusType := ExceptionListStatusType_locallyBlocked_,
		  	  	reasonCode := ExceptionListReasonType_notToBeDisclosed_,
		  	  	entryValidityStart := TESTER_ENTRY_VALIDITY_START,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := TESTER_VEHICLE_PARAMETERS,
		  	  	actionRequested := ExceptionListActionType_rejectOBE_,
		  	  	efcContextMark := omit,
		  	  	vatId := TESTER_VAT_ID
			}}
		}

		modulepar ExceptionListADU TESTER_EXCEPTIONLIST_ADU_WHITE_VALID := {
			exceptionListVersion := TESTER_EXCEPTIONLIST_VERSION,
			exceptionListType := ExceptionListType_whiteList_,
		  	exceptionValidityStart := TESTER_EXCEPTIONLIST_VALIDITY_START,
		  	exceptionValidityEnd := omit,
		  	exceptionListEntries := {{	//Note: this is defined as record of ExceptionListEntry
		  	  	userId := TESTER_USERID_1,
		  	  	statusType := ExceptionListStatusType_allApplications_,
		  	  	reasonCode := omit,
		  	  	entryValidityStart := TESTER_ENTRY_VALIDITY_START,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := TESTER_VEHICLE_PARAMETERS,
		  	  	actionRequested := ExceptionListActionType_acceptOBE_,
		  	  	efcContextMark := omit,
		  	  	vatId := TESTER_VAT_ID
			}}
		}

		modulepar ExceptionListADU TESTER_EXCEPTIONLIST_ADU_DISCOUNTED_VALID := {
			exceptionListVersion := TESTER_EXCEPTIONLIST_VERSION,
			exceptionListType := ExceptionListType_discountedList_,
		  	exceptionValidityStart := TESTER_EXCEPTIONLIST_VALIDITY_START,
		  	exceptionValidityEnd := omit,
		  	exceptionListEntries := {{	//Note: this is defined as record of ExceptionListEntry
		  	  	userId := TESTER_USERID_1,
		  	  	statusType := ExceptionListStatusType_allApplications_,
		  	  	reasonCode := omit,
		  	  	entryValidityStart := TESTER_ENTRY_VALIDITY_START,
		  	  	entryValidityEnd := omit,
		  	  	vehicleParameters := TESTER_VEHICLE_PARAMETERS,
		  	  	actionRequested := ExceptionListActionType_acceptOBE_,
		  	  	efcContextMark := omit,
		  	  	vatId := TESTER_VAT_ID
			}}
		}		
	} // end group ExceptionListTesterData		

	group TrustObjectTesterData {
	 	modulepar TrustObjectCode certificateTESTER_VALUE;
	 	modulepar TrustObjectCode publicKeyTESTER_VALUE;
    		modulepar TrustObjectCode symmetricKeyTESTER_VALUE;
    		modulepar TrustObjectCode symmetricKeyEncryptedTESTER_VALUE;
    		modulepar TrustObjectCode certificateRevocationListTESTER_VALUE;
	}	

	group ProvideUserDetailsData {
		modulepar UserParameterResponseDetails UserParameterResponseDetails_TESTER_VALUES[27]:={};
	}
	
	group EfcContextData {
//TODO Currently not used - needed?
//	 	modulepar  TariffClassDefinition tariffClassDefinitionTESTER_VALUE;
//	 	modulepar  LocalVehicleClassDefinition localVehicleClassDefinitionTESTER_VALUE;
//	 	modulepar  TimeClassDefinition timeClassDefinitionTESTER_VALUE;
//	 	modulepar  UserClassDefinition userClassDefinitionTESTER_VALUE;
	 	modulepar  FeeDefinition feeDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<TollContextOverview> tollContextOverviewTESTER_VALUE;
	 	modulepar  Optionally_Signed<TollContextPartitionOverviews> tollContextPartitionOverviewTESTER_VALUE;
	 	modulepar  Optionally_Signed<TariffTables> tariffTableTESTER_VALUE;
	 	modulepar  Optionally_Signed<CurrencyConversionTable> currencyConversionTableTESTER_VALUE;
	 	modulepar  Optionally_Signed<TariffClassDefinition> optSignedTariffClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<LocalVehicleClassDefinition> optSignedLocalVehicleClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<TimeClassDefinition> optSignedTimeClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<UserClassDefinition> optSignedUserClassDefinitionTESTER_VALUE;
	 	modulepar  Optionally_Signed<TollContextPartitionLayouts> tollContextLayoutTESTER_VALUE;
	 	modulepar  Optionally_Signed<ChargeReportingEventss>  chargeReportingEventsTESTER_VALUE;
	 	modulepar  Optionally_Signed<ChargeReportConfigurations> chargeReportConfigurationTESTER_VALUE;
	 	modulepar  EfcDsrcApplication.Int1 tollContextVersionTESTER_VALUE;
	 	modulepar  ClosedContextType closedContextTypeTESTER_VALUE := ClosedContextType_interconnectedClosedSysytem_;

		modulepar  octetstring basicVersionIdTESTER_VALUE:='00'O;
		modulepar  UTF8String versionNameTESTER_VALUE:="TollContextOverviewVersion - one value";
		modulepar  UTF8String valueOfVersionNameTESTER_VALUE:="the version";
	 	modulepar  EfcAutonomousContextData.TollContextOverview closedTollContextOverviewTESTER_VALUE := {
	 	  tollContext := TESTER_IDENTIFIER,
	 	  tollContextPartitions := {1}, // One partition
	 	  tollSchemeName := omit,
	 	  tollContextBoundingBoxes := omit,
	 	  tollContextOverviewVersion:={
	 	  	version:={
	 	  		basicVersionId:=basicVersionIdTESTER_VALUE
//	 	  		extendedVersionId:={
//	 	  			{
//	 	  				versionName:=versionNameTESTER_VALUE,
//	 	  				value_:=valueOfVersionNameTESTER_VALUE
//	 	  			}
//	 	  		}
	 	  	},
	 	  	validFrom:=fx_getUtc()
	 	  }
	 	};
	 	modulepar ClosedContextLayout closedContextLayoutTESTER_VALUE;

	}		
	
} // end module 
	
// 
//    /**
//     * @desc    Declare Testerdata of UserParameterResponseDetails
//     */
//
//	//importing other modules
//	import from EfcInfoExchange_Pixits all;
//    //importing ASN.1 data automatically translated into TTCN-3	
//    import from EfcInfoExchange language "ASN.1:1997" all;
//    import from EfcDsrcApplication language "ASN.1:1997" all;
//    
//    //importing ASN.1 data manually translated into TTCN-3
//    import from EfcInfoExchange_ParameterisedAsn1Data all;
//    import from Common_ParametrisedAsn1Data all;
//    
//    //PT140 TODO redefine these as USER_PARAMETER_RESPONSE_DUMMY_VALUES record of
//    modulepar UserPostalAddress TESTERUSERPOSTALADDRESS1 := {"UserName1","Company1","Street1","999999","Town1","Country1","CompanyTaxIdentifier1"};
//    modulepar EfcDsrcApplication.ContractSerialNumber CONTRACT_SERIAL_NUMBER_1 := 1234567890; //INT4 in ISO14906
//    modulepar EfcDsrcApplication.ContractValidity CONTRACT_VALIDITY_1 := {'ABCD'O, {2030, 12, 31}};
//    modulepar EfcDsrcApplication.DriverCharacteristics DRIVER_CHARACTERISTICS_1 := {10, 255}; //INT!, INT1 in ISO14906
//    modulepar EfcDsrcApplication.EFC_ContextMark EFC_CONTEXTMARK_1 := {INFORMATION_SENDER_ID_FOR_TESTER, '11'O ,99};
//    modulepar EfcDsrcApplication.EnvironmentalCharacteristics ENVIRONMENTAL_CHARACTERISTICS_1 := {euro_6(6), co2class4(4)}; 
//    modulepar EfcDsrcApplication.EngineCharacteristics ENGINECHARACTERISTICS_1 := EngineCharacteristics_battery_;  
//    modulepar EfcDsrcApplication.EquipmentOBUId EQUIPMENT_OBU_ID_1:='11AA22BB33CC'O;
//    modulepar EfcDsrcApplication.EquipmentStatus EQUIPMENT_STATUS_1 := '01010101010101'B;//BitString(16)
//    modulepar EfcDsrcApplication.PersonalAccountNumber PAN1:=1000; //PAN value for testing
//    modulepar EfcDsrcApplication.PaymentMeans PAYMENT_MEANS_1 := {PAN1,{2030,12,31}, "1234"};
//    modulepar EfcDsrcApplication.PaymentMeansBalance PAYMENT_MEANS_BALANCE := {"7FFFFF"};
//    modulepar EfcDsrcApplication.PaymentMeansUnit PAYMENT_MEANS_UNIT_1 := "3F784";
//    modulepar EfcDsrcApplication.PersonalAccountNumber PERSONAL_ACCOUNT_NUMBER_1 := PAN1;
//    modulepar EfcDsrcApplication.Provider PROVIDER_1 := INFORMATION_SENDER_ID_FOR_TESTER;
//    modulepar EfcDsrcApplication.ReceiptContract RECEIPT_CONTRACT_1 := {INFORMATION_SENDER_ID_FOR_TESTER,"1F2E", 9999};
//    modulepar EfcDsrcApplication.ValidityOfContract VALIDITY_OF_CONTRACT_1 := {2030, 12, 31};
//    modulepar EfcDsrcApplication.VehicleAuthenticator VEHICLE_AUTHENTICATOR_1 := "1234567890ABCDEF";
//    modulepar EfcDsrcApplication.VehicleClass VEHICLE_CLASS_1 := 15;
//    modulepar EfcDsrcApplication.VehicleDimensions VEHICLE_DIMENSIONS_1 := {99, 99, 99};
//    modulepar EfcDsrcApplication.VehicleLicencePlateNumber VEHICLE_LICENSEPLATE_NUMBER_1 := {"EU", 1, "1C75D9"};
//    modulepar EfcDsrcApplication.VehicleIdentificationNumber VEHICLE_IDENTIFICATION_NUMBER_1 := 1111111111;
//    modulepar EfcDsrcApplication.VehicleWeightLaden c_VEHICLE_LADEN_WEIGHT_1 := 255;
//    modulepar EfcDsrcApplication.VehicleWeightLimits VEHICLE_WEIGHT_LIMITS_1 := {99, 150, 50}; 
//    modulepar EfcDsrcApplication.VehicleAxles VEHICLE_AXLES_1 := {15, {dualTyres,{4,3}}};
//    modulepar EfcDsrcApplication.ExhaustEmissionValues EXHAUST_EMISSION_VALUES_1 := {mg_km(0), 0, 0, 0, 0};
//    modulepar EfcDsrcApplication.DieselEmissionValues DIESEL_EMISSION_VALUES_1 := {mg_km(0), 0, 0}
//    modulepar ExtendedUserPostalAddress EXTENDED_USER_POSTAL_ADDRESS_1 := {
//    	"RoleDescriptor1",
//    	"OrganisationName1",
//    	"OrganisationUnit1",
//    	"Function1",
//    	"FormOfAddress1",
//    	"Qualification1",
//    	"Surname1",
//    	"GivenName1",
//    	"DeliveryServicePoint1",
//    	"ThouroughFare1",
//    	"Postcode1",
//    	"Town1",
//    	"Region1",
//    	"Country1",
//    	"Code1",
//    	"Phone1",
//    	"PhoneSubscriberNumber1",
//    	"Code2",
//    	"Mobile1",
//    	"MobileSubscriberNumber2",
//    	"Code3",
//    	"Fax1",
//    	"FaxSubscriberNumber1",
//    	"Email1" 
//    }; 
//    	   	
//    modulepar ASNAUX.UTF8String PREFERRED_USER_LANGUAGE1 := "SE";
//    
//    /**
//     * @desc    Preparing test user id data
//     */    
//    
//    type record of UserId UserIdList;
//	modulepar UserIdList TEST_USER_ID_LIST := f_createUserIdList(); 
//
//	function f_createUserIdList() return UserIdList{
//        const integer c_maxTestUsers := 10000; 
//        var UserIdList v_userIdList;
//        
//        //initialize test user Id values 
//        for (var integer index:=0; index< c_maxTestUsers; index := index+1) {
//        	v_userIdList[index] := {
//        		index, //PT140: must be of type pan
//        		index+10000, // contractSerialNumber = INT4; may start e.g. at 10000
//        		"EU"&index, // licenseplatenumber = type LPN
//        		"99"&index // type obeId = manufacturer id (i.e. 99) + equipment OBU id
//        	}
//        }
//        return v_userIdList;
//	}
//	// make them availble at run time
//
//	
//}
//     
//    
   
