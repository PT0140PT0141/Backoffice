/**
 * @author  PT0140 
 * @desc    This module provides the functions signature for:
 * - external functions
 * - communication support
 * - common Context Data support
 * @remark  These functions are used by preamble/postambule function to initialization/deinitialization communication stack
 * @see     Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 2: Communication and connections to the lower layers
 * @version $id$
 */
module EfcInfoExchange_Functions language "TTCN-3:2010 Advanced Parameterization" { 
 
	//importing other modules
	import from EfcInfoExchange_Interfaces all;
	import from EfcInfoExchange_LibUpperTester all;
	import from EfcInfoExchange_Pixits all;
	import from EfcInfoExchange_TesterData all;
	import from EfcInfoExchange_Templates all;
	import from EfcInfoExchange_InteroperabilityStatement all;
	import from EfcInfoExchange_Ics all;
			
	//importing ASN.1 data automatically translated into TTCN-3	
	import from EfcInfoExchange language "ASN.1:1997" all;
	import from EfcAutonomousCharging language "ASN.1:1997" all;

	//importing ASN.1 data manually translated into TTCN-3
	import from EfcInfoExchange_ParameterisedAsn1Data all;
	import from LibEfc_Common_Parameterised_Asn1_Data all;

    group External {
		external function fx_computeAuthenticator(in InfoExchangeContent p_infoExchangeContent) return ApduAuthenticator;
		external function fx_checkAuthenticator(in InfoExchange p_infoExchange) return boolean;
    	external function fx_getUtc(in integer secondOffset:= 0) return GeneralizedTime; //Shall return current time offset by the number of seconds (positive or negative) specified by the parameter secondOffset
    } 

	group Internal {
		  
    	altstep a_defaults() runs on MainTestComponent {
    		[] mtcPort.receive(InfoExchange:?) -> value v_apduReceived {
                f_addLogEntry("Unexpected APDU received");
				f_logApduReceivedAndTStep();
                repeat; // Ignore unexpected ADUs, but log them
            }
    
            [] t_step.timeout {
                f_addLogEntry("Current step in the message sequence timed out");
                setverdict(fail);
                stop;
            } 
            
			[] t_transaction.timeout {
                f_addLogEntry("Running the entire transaction took longer than timeout set in module parameter PX_TRANSACTION_TIMEOUT");
                setverdict(inconc);
                stop;
            } 
        } 
 
     	function f_intialiseMtc(boolean p_runTestcase) runs on MainTestComponent {
     
     		if (not p_runTestcase) {
     			f_addLogEntry("Testcase shall not be run according to ISO 16986 Implementation Conformance Statement (ICS).");
     			setverdict(none);
     			stop;
     		}
     		
     		// Initialize communication stack
            
            // Map TTCN-3 ports to TestAdapter ports
            map(mtc:mtcPort, system:taPort);
            map(mtc:mtcAccessPort, system:taAccessPort);
              
            // Activate message filtering and timeouts altstep
            activate(a_defaults());
            // Activate UpperTester altstep
            activate(a_upperTester());
            
            //Start transaction timer for checking timeouts for entire transaction 
            //NOTE: the timer t_step is used for timing between messages in the transaction
            t_transaction.start(PX_TRANSACTION_TIMEOUT);
            
            f_addLogEntry("Initialisations performed. Test case starting.");
			
    	} 
        
    	function f_closeDownMtc() runs on MainTestComponent {
        	// Deactivate communication stack
        	
        	// Unmap TTCN-3 ports from TestAdapter ports
			unmap(self:mtcPort, system:taPort);
			unmap(self:mtcAccessPort, system:taAccessPort);
                
            //Deactivates all defaults
			deactivate;
            f_addLogEntry("Test case ended.");
    
        } 
        
        //defining a string that means carrige return (new line) through its ascii value
	    const charstring c_newLine := int2char(13);

        function f_sendAndLogApdu(in InfoExchange p_apduToSend) runs on MainTestComponent {
        	mtcPort.send(p_apduToSend);   	  
			f_addLogEntry("At time step value " & any2unistr(t_step.read) & " sent the following APDU to the IUT: " & any2unistr(p_apduToSend));
		}
		
		function f_sendAndLogTrigger(in Iso16986Trigger iut_Trigger) runs on MainTestComponent {
		  	mtcAccessPort.send(iut_Trigger);
		  	f_addLogEntry("At time step value " & any2unistr(t_step.read) & " sent the following Trigger to the IUT: " & any2unistr(iut_Trigger));
		}
           
    	function f_addLogEntry(in charstring p_text){
    		log("*** " & testcasename() & ":" & p_text);
    	}

        /**
         * @desc Function to log received APDUs. It assumes that
         * @desc the received APDU is stored in the MainTestComponent
         * @desc v_apduReceived and that the MainTestComponent t_step timer 
         * @desc is used and running (otherwise it is set back to 0)
         */		
		function f_logApduReceivedAndTStep() runs on MainTestComponent{
			f_addLogEntry("At time step value " & any2unistr(t_step.read) & ", tester received the following APDU: " & c_newLine & any2unistr(v_apduReceived));			
		}		
		
		type record of UserParameterRequest RecOfUserParameterRequest;
		
		function f_userDetailsParameters() return RecOfUserParameterRequest  {
		/**		
		 * @desc we want to ask for a random number of parameters randomly chosen among those supported
		 * @desc the v_userParameterRequest array will be made of a random number of elements containing randomly picked up
		 * @desc parameter identifiers from the list of supported parameters (PIXIT value)
		*/
				const integer totNoParams := sizeof(PX_USERDETAILS_SUPPORTED_LIST_OF_PARAMETERS);
				const integer noParamsToUse := float2int(rnd() * int2float(totNoParams));
				var RecOfUserParameterRequest v_userParameterRequests;   
				for (var integer v_ct :=0; v_ct<noParamsToUse;v_ct:=v_ct+1) {
					//Note: float2int removes the fractional part and returns just the integer, it is NOT a rounding function. That is why this works
					v_userParameterRequests[v_ct] := PX_USERDETAILS_SUPPORTED_LIST_OF_PARAMETERS[float2int(rnd()) * totNoParams];
				};
				return v_userParameterRequests;
		}
		
        /**
         * @desc A kind of "macro"-function for very common steps.
         * @desc Calling other functions to log, wait and send Ack 
         * @desc It assumes that the received APDU is stored in the MainTestComponent
         * @desc v_apduReceived and that the MainTestComponent t_step timer 
         * @desc is used and running (otherwise it is set back to 0)
         */	
		function f_logReceivedWaitAndAcknowledge(in float p_wait) runs on MainTestComponent{
			f_logApduReceivedAndTStep();						         		
			// Send Ack within time constraints
			f_waitAndAcknowledgeReceivedApdu(p_wait);
		}
		
		function f_waitAndAcknowledgeReceivedApdu(in float p_wait) runs on MainTestComponent{
			// Send Ack within time constraints
			f_wait(p_wait);
			f_sendAndLogApdu(m_apduDefaultAckTester(v_apduReceived));
		}
		
		/*
		 * @desc A kind of ""macro"-function for very common steps.
		 * @desc Calling other functions to log, check time and stop timer 
		 * @desc It assumes that the received APDU is stored in the MainTestComponent
		 * @desc v_apduReceived and that the MainTestComponent t_step timer 
		 * @desc is used and running (otherwise it is set back to 0)
		 */		
		function f_logReceivedThenCheckAndStopTime(in float p_timeMin) runs on MainTestComponent{
			// Log what we received
			f_logApduReceivedAndTStep();

			//Check minumum time and stop timer
			f_checkMinimumTStep(p_timeMin); //t_step is an implicit argument and what we will compare against
			t_step.stop;
								
		}
		
		  
    	function f_checkMinimumTStep(in float p_timeMin) runs on MainTestComponent {	                      
            if (t_step.read <= p_timeMin) {
            	setverdict(fail);
            	f_addLogEntry("Received APDU before minimum wait time at: " & any2unistr(t_step.read));
            	stop
        	};
    	}
    			       	
        // Function which inserts a waiting time - parameter t_wait - and waits in a "do-nothing-loop"
    	function f_wait(in float p_wait){
    		timer t_waitTime;
    		t_waitTime.start(p_wait);
    		while (t_waitTime.running) {
    			// empty loop = do nothing, just wait
    		}
    	}
    	
    	function f_waitTimeA(in float p_minTimeSinceBeginPrevTransaction) runs on MainTestComponent{
    		var float v_elapsedTime:=t_transaction.read;
    		t_transaction.stop;
    		if (v_elapsedTime<p_minTimeSinceBeginPrevTransaction){
    			f_wait(p_minTimeSinceBeginPrevTransaction-v_elapsedTime);
    		}
    		
    		t_transaction.start(PX_TRANSACTION_TIMEOUT);
    	}
    	
    	// Function which returns the corresponding userDetailsParameter with tester data value in response to the
    	// parameter requested in the requestADU
    	//Replaced by the array TD_USER_PARAM_RESP_DETAILS which takes UserParameterRequest as an index
//    	function f_provideUserDetailsParameter(in UserParameterRequest p_userParameterRequest) return UserParameterResponseDetails {
//    		var UserParameterResponseDetails v_userParameterResponseDetails;
//    		select (p_userParameterRequest)	{
//				case (UserParameterRequest_userPostalAddress_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.userPostalAddress;}
//				case (UserParameterRequest_contractSerialNumber_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.contractSerialNumber;}
//				case (UserParameterRequest_contractValidity_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.contractValidity;}
//				case (UserParameterRequest_driverCharacteristics_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.driverCharacteristics;} 
//				case (UserParameterRequest_eFC_ContextMark_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.eFC_ContextMark;} 
//				case (UserParameterRequest_environmentalCharacteristics_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.environmentalCharacteristics;} 
//				case (UserParameterRequest_engineCharacteristics_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.engineCharacteristics;} 
//				case (UserParameterRequest_equipmentOBUId_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.equipmentOBUId;} 
//				case (UserParameterRequest_equipmentStatus_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.equipmentStatus;} 
//				case (UserParameterRequest_paymentMeans_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.paymentMeans;} 
//				case (UserParameterRequest_paymentMeansBalance_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.paymentMeansBalance;} 
//				case (UserParameterRequest_paymentMeansUnit_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.paymentMeansUnit;} 
//				case (UserParameterRequest_personalAccountNumber_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.personalAccountNumber;} 
//				case (UserParameterRequest_provider_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.provider;} 
//				case (UserParameterRequest_receiptContract_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.receiptContract;} 
//				case (UserParameterRequest_validityOfContract_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.validityOfContract;} 
//				case (UserParameterRequest_vehicleAuthenticator_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleAuthenticator;} 
//				case (UserParameterRequest_vehicleClass_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleClass;} 
//				case (UserParameterRequest_vehicleDimensions_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleDimensions;} 
//				case (UserParameterRequest_vehicleLicencePlateNumber_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleLicencePlateNumber;} 
//				case (UserParameterRequest_vehicleIdentificationNumber_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleIdentificationNumber;} 
//				case (UserParameterRequest_vehicleWeightLaden_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleWeightLaden;} 
//				case (UserParameterRequest_vehicleWeightLimits_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleWeightLimits;} 
//				case (UserParameterRequest_vehicleAxles_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.vehicleAxles;} 
//				case (UserParameterRequest_exhaustEmissionValues_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.exhaustEmissionValues;} 
//				case (UserParameterRequest_dieselEmissionValues_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.dieselEmissionValues;} 
//				case (UserParameterRequest_extendedUserPostalAddress_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.extendedUserPostalAddress;} 
//				case (UserParameterRequest_preferredUserLanguage_) {v_userParameterResponseDetails := TD_USER_PARAM_RESP_DETAILS.preferredUserLanguage;} 
//			};
//			return v_userParameterResponseDetails;
//		}

		function f_receiveTollDeclSendBillingDetReceiveAck(in RoUsageList p_roUsageList) runs on MainTestComponent {
			var ChargeReport v_chargeReportFirst;
			var UsageStatement v_usageStatement;
			var Period v_period;
			var ObeId v_obeId;
			var TollDeclarationId v_tollDeclarationId;
			var BillingDetailsADU v_aduGnssBillingDetails;
			
			alt { 
				[] mtcPort.receive(mw_apduNoAuthInitIut(mw_adusTollDeclaration)) -> value v_apduReceived {
					f_logReceivedWaitAndAcknowledge(IS_GNSS_TOLLDECLARATIONS_TIME1_MIN_TSP);
				}
			} // End of first alt statement
			
			//Check formatting of each and everyone of the received TOllDeclaration ADUs 
			for (var integer v_loop:=0; v_loop<lengthof(v_apduReceived.infoExchangeContent.adus.tollDeclarationADUs);v_loop:=v_loop+1){
				if (not (match(v_apduReceived.infoExchangeContent.adus.tollDeclarationADUs[v_loop],mw_aduTollDeclaration))){
					f_addLogEntry("One of the ADUs does not match the ADU restrictions");
					setverdict(fail);
					f_closeDownMtc();   						           				
					stop;
				}
			}					               		
			
			v_chargeReportFirst:=v_apduReceived.infoExchangeContent.adus.tollDeclarationADUs[0].gnssTollDeclaration[0].chargeReport;			
			v_usageStatement:=v_chargeReportFirst.usageStatementList[0].usageStatement;
			v_obeId:=v_chargeReportFirst.obeId;
			
			v_tollDeclarationId:=v_apduReceived.infoExchangeContent.adus.tollDeclarationADUs[0].tollDeclarationId;
						
			v_aduGnssBillingDetails:=m_aduGnssBillingDetails(
				TD_BILLING_DETAILS_NUM_1,
				UserId:{obeID:=v_obeId}, 
				TD_PERIOD_1,
				p_roUsageList,
				c_extPayAmountNothing,
				{v_tollDeclarationId}, // same toll declaration Id as in Toll Declaration in step 0
				ActionCode_send_
			);
	
			v_apduForSending := m_apduNoAuthRespTester(v_apduReceived,Adus:{billingDetailsADUs:={v_aduGnssBillingDetails}});
	
			f_sendAndLogApdu(v_apduForSending);                 
	        
	        // Step 2: Wait for positive Ack within IS_GNSS_BILLINGDETAILS_TC_TIME1_MAX_TSP
			// Set timer
	        t_step.start(IS_GNSS_BILLINGDETAILS_TC_TIME1_MAX_TSP);                 
			alt {
				[] mtcPort.receive(mw_apduDefaultAckIut(v_apduForSending)) -> value v_apduReceived {
					f_logReceivedThenCheckAndStopTime(IS_GNSS_BILLINGDETAILS_TC_TIME1_MIN_TSP);
					setverdict(pass);
				}
			} // End of Alt statement
		} // End of function
		
		function f_initForPaymentClaim() runs on MainTestComponent {
			var float v_timeToWait;                  
            // Step 1: First interaction
            // Send one preset Billing Details according to the implementation choice
			if (ICS_A26_3_implementedDSRCBILLINGDETAILS) {
				v_apduForSending := m_apduNoAuthInitTester(Adus:{billingDetailsADUs:={m_aduDsrcBillingDetails}});
				v_timeToWait := IS_DSRC_BILLINGDETAILS_TIME1_MIN_TSP;                
				f_sendAndLogApdu(v_apduForSending);                 
                 // Wait for positive Ack within DSRC.BILLINGDETAILS.TIME1
				// Set timer
                 t_step.start(IS_DSRC_BILLINGDETAILS_TIME1_MAX_TSP);
				}
			else if (ICS_A52_2_implementedGNSSBILLINGDETAILSTC and ICS_A52_3_implementedGNSSTOLLDECLARATION) {
				v_timeToWait := IS_GNSS_BILLINGDETAILS_TC_TIME1_MIN_TSP;                
				// Trigger IUT with GNSS_TOLLDECLARATION_TR_TSP_1_SEND to send one valid TollDeclarationADU with actionCode = send
				f_sendAndLogTrigger(GNSS_TOLLDECLARATION_TR_TSP_1_SEND);
				// Receive Toll Declaration, send positive Ack
				
				//Setting the Record of UsageList to type sectionsUsed, other possibilities are possible. TollDeclarations does not impose any restrictions on the type of UsageList
				f_receiveTollDeclSendBillingDetReceiveAck({m_sectionedRoadGnssUsageList});
				// Set timer
               	t_step.start(IS_GNSS_BILLINGDETAILS_TC_TIME1_MAX_TSP);
				}
			else {
			  	setverdict(fail);
				f_addLogEntry("Cannot perform PAYMENTCLAIM transaction without supporting either DSRCBILLINGDETAILS or GNSSBILLINGDETAILSTC");			  
			};
			// Receive the Ack for the sent Billing Details              
			alt {
				[] mtcPort.receive(mw_apduDefaultAckIut(v_apduForSending)) -> value v_apduReceived {
					// Log what we received
					f_logReceivedThenCheckAndStopTime(v_timeToWait);
				}
			} 	// End of Alt Statement				
		} // End of function
		
				// Function defionition used in many GNSS_PAYMENTANNOUNCEMENT below
			
		function f_sendTwoTollDeclarationAdusAndTwoBillingDetailsAdus() runs on MainTestComponent {

            // Step 1:
            // Perform a full GNSS.TOLLDECLARATION transaction with two(2) tollDeclarations
                
            // Prepare APDU with two(2) TollDeclaration ADUs 
                
            v_apduForSending := m_apduNoAuthInitTester({tollDeclarationADUs:={
                m_aduTollDeclarationToSendOneObe(
                    {TD_IDENTIFIER, 1}, //tollDeclarationId
                    c_usageStatement_1, // usageStatement
                    1, // chargeReportCounter
                    ActionCode_send_ // actionCode
                ),
                m_aduTollDeclarationToSendOneObe(
                    {TD_IDENTIFIER, 2}, //tollDeclarationId
                    c_usageStatement_2, // usageStatement
                    2, // chargeReportCounter
                    ActionCode_send_ // actionCode
                )
            }});
                                                                                                                                                                        
            f_sendAndLogApdu(v_apduForSending);                	 	 	
            // Start timer
            t_step.start(IS_GNSS_TOLLDECLARATIONS_TIME1_MAX_TC);               

            // Step 2:
            // Wait for Default_Ack_Apdu within GNSS.TOLLDECLARARTION.TIME1             
            // if not received or received outside specification or time constraints set test fail

            alt {				
                [] mtcPort.receive(mw_apduDefaultAckIut(v_apduForSending)) -> value v_apduReceived {					  
                    // Log what we received, check minimum time and stop time
                    f_logReceivedThenCheckAndStopTime(IS_GNSS_TOLLDECLARATIONS_TIME1_MIN_TC);
                }
            }	

            // Step 3:
            // Send valid Initiating_Apdu containing two(2) BillingDetailsADU, with
            //		- the values corresponding the previous TollDeclarationADUs; and
            //		- actionCode=send
    
			v_apduForSending := m_apduNoAuthInitTester({billingDetailsADUs:={
			  	m_aduGnssBillingDetails (
			  		1,
			  		TD_USERID_1,
			  		TD_PERIOD_1,
			  		{m_sectionedRoadGnssUsageList},
			  		TD_BILLINGDETAILS_AMOUNT_1,
			  		{{TD_IDENTIFIER, 1}},
			  		ActionCode_send_
			  	),
			  	m_aduGnssBillingDetails (
			  		2,
			  		TD_USERID_2,
			  		TD_PERIOD_1,
			  		{m_sectionedRoadGnssUsageList},
			  		TD_BILLINGDETAILS_AMOUNT_2,
			  		{{TD_IDENTIFIER, 2}},
			  		ActionCode_send_
			  	)
            }});	
                
            // respect time restriction TIMEA_MIN set by the IuT
			f_waitTimeA(IS_GNSS_BILLINGDETAILS_TSP_TIMEA_MIN_TC);
            f_sendAndLogApdu(v_apduForSending);                	 	 	
            // Start timer
            t_step.start(IS_GNSS_BILLINGDETAILS_TSP_TIME1_MAX_TC);   				
                
            // Step 4:
            // Wait for Default_Ack_Apdu within GNSS.BILLINGDETAILS_TSP.TIME1             
            // if not received or received outside specification or time constraints set test fail

            alt {				
                [] mtcPort.receive(mw_apduDefaultAckIut(v_apduForSending)) -> value v_apduReceived {					  
                    // Log what we received, check minimum time and stop time
                    f_logReceivedThenCheckAndStopTime(IS_GNSS_BILLINGDETAILS_TSP_TIME1_MIN_TC);
                }
            }	
        } // end function definition
		 
		function f_sendTwoPaymentAnnouncementAdus() runs on MainTestComponent {
		
			// Step 1:
            // Send valid Initiating_Apdu containing two(2) PaymentAnnouncementADUs, with
			//		- the values referencing the previous two(2) BillingDetailsADUs; and
			//		- actionCode=send

			v_apduForSending := m_apduNoAuthInitTester({paymentAnnouncementADUs:={
				m_aduPaymentAnnouncement(
					TD_PAYMENTANNOUNCEMENT_ID_1,
					TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_1,
					{{TD_IDENTIFIER, 1}},
					ActionCode_send_
				),
				m_aduPaymentAnnouncement(
					TD_PAYMENTANNOUNCEMENT_ID_2,
					TD_PAYMENTANNOUNCEMENT_TOTAL_AMOUNT_2,
					{{TD_IDENTIFIER, 2}},
					ActionCode_send_
				)
			}});
 			
			// respect time restriction TIMEA_MIN set by the IuT
			f_waitTimeA(IS_GNSS_PAYMENTANNOUNCEMENT_TIMEA_MIN_TC);
			f_sendAndLogApdu(v_apduForSending);                	 	 	
            // Start timer
            t_step.start(IS_GNSS_PAYMENTANNOUNCEMENT_TIME1_MAX_TC);   				
			
            // Step 2: Wait for Default_Ack_Apdu within GNSS.PAYMENTANNOUNCEMENT.TIME1             
            // if not received or received outside specification or time constraints set test fail

			alt {				
				[] mtcPort.receive(mw_apduDefaultAckIut(v_apduForSending)) -> value v_apduReceived {					  
					// Log what we received, check minimum time and stop time
					f_logReceivedThenCheckAndStopTime(IS_GNSS_PAYMENTANNOUNCEMENT_TIME1_MIN_TC);
				}
			}	
		} // end function definition		 
		
		
		
	} //End of group 		
} //End of module
