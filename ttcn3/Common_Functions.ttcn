/**
 * @author  PT28/PT0141 
 * @desc    This module provides the functions signature for:
 * - external functions
 * - communication support
 * - common Context Data support
 * @remark  These functions are used by preamble/postambule function to initialization/deinitialization communication stack
 * @see     Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 2: Communication and connections to the lower layers
 * @version $id$
 */
module Common_Functions language "TTCN-3:2010 Advanced Parameterization" {
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 1: Charging
     * @see     Annex A (normative) EFC data type specifications
     */
    import from EfcAutonomousCharging language "ASN.1:1997" all;
    /**
     * @desc    Electronic fee collection (EFC) — Application interface definition for autonomous systems — Part 3: Context data
     * @see     A.2 Data specifications
     */
    import from EfcAutonomousContextData language "ASN.1:1997" all;
    import from EfcDsrcApplication language "ASN.1:1997" all;
    /**
     * @desc    TTCN-3 does not support ASN.1 parameterization (ETSI ES 201 873-7 V4.5.1 Clause 10)
     *          Common_Parameterised_Asn1_Data TTCN-3 module is a workaround
     */
    import from Common_Parameterised_Asn1_Data all;
    import from Common_TypesAndValues all;
    import from Common_Interfaces all;
    import from Common_LibUpperTester all;

    group Common_External_Functions {
        /**
         * @desc    These function initializes the communication stack
         * @return  ERNoError on success, error code otherwise
         * @see     Clauses 7. EFC communication services (functions)
         * @see     Clauses 8. The use of a communication stack)
         */
        external function fx_com_Initialize() return CommunicationErrorCodes;
        /**
         * @desc    These function de-initializes the communication stack
         * @see     Clauses 7. EFC communication services (functions)
         * @see     Clauses 8. The use of a communication stack)
         * @return  ERNoError on success, error code otherwise
         */
        external function fx_com_DeInitialize() return CommunicationErrorCodes;
        /**
         * @desc    This function provides the current local time when this function is called
         * @return  The current local date/time in DateAndTime format
         */
        external function fx_getCurrentTime() return DateAndTime;
        /**
         * @desc    This function adds the offset to the current local time when this function is called
         * @param   offset The time offset to add in seconds
         * @return  The new period value in DateAndTime format
         */
        external function fx_addCurrentTimeOffset(in integer offset) return DateAndTime;
        /**
         * @desc    This function provides the Date and time when the message is generated by the informationSender
         * @param   p_increment Relative increment value in seconds
         * @return  The current local time in GeneralizedTime format
         * @see     ISO 17575-3:2016(E) Table 1 — Data elements of the ADU Header
         */
        external function fx_getMessageDate(in integer p_increment := 0) return GeneralizedTime;
        
        group Security {
            
            /**
             * @desc Initialise external security module
             * @return true on success, false  otherwise
             */
            external function fx_initialiseSecurity() return boolean;
            
            /**
             * @desc Uninitialise external security module
             * @return true on success, false  otherwise
             */
            external function fx_uninitialiseSecurity() return boolean;
            
            /**
             * @desc Apply security processing on the encoded Iso17575_3Adu
             * @param p_Iso17575_3Adu Encoded Iso17575_3Adu
             * @param p_AuthenticatedIso17575_3Adu Security description
             * @return true on success, false  otherwise
             */
            external function fx_secured_packet(in Iso17575_3Adu p_Iso17575_3Adu, out AuthenticatedIso17575_3Adu p_AuthenticatedIso17575_3Adu) return boolean;
            
            /**
             * @desc Apply security processing on the encoded Iso17575_3Adu
             * @param p_Iso17575_3Adu Encoded Iso17575_3Adu
             * @param p_AuthenticatedIso17575_3Adu Security description
             * @return true on success, false  otherwise
             */
            external function fx_verify_packet(in octetstring p_message, in template (value) MessageAuthenticator p_messageAuthenticator) return boolean;
        }
        
    } // End of group Common_External_Functions

    group Communication_Functions {
        /**
         * @desc Initialize communication stack
         * @verdict inconc on error and the component is stopped
         */
        function f_InitializeCommunication() runs on EutComp {
            var CommunicationErrorCodes v_result := fx_com_Initialize();
            if (v_result != e_ERNoError) {
                setverdict(inconc);
                stop; // Terminate the test case execution
            } else {
                setverdict(pass);
            }
        }

        /**
         * @desc DeInitialize communication stack
         * @verdict inconc on error
         */
        function f_DeInitializeCommunication() runs on EutComp {
            var CommunicationErrorCodes v_result := fx_com_DeInitialize();
            if (v_result != e_ERNoError) {
                setverdict(inconc);
            } else {
                setverdict(pass);
            }
        }
        
    } // End of group Communication_Functions

    group Security {
        
        /**
         * @desc Apply security processing on the encoded Iso17575_3Adu
         * @param p_Iso17575_3Adu Encoded Iso17575_3Adu
         * @param p_AuthenticatedIso17575_3Adu Security description
         * @return true on success, false  otherwise
         * @verdict unchanged
         */
        function f_secured_packet(
                                  in Iso17575_3Adu p_Iso17575_3Adu, 
                                  out AuthenticatedIso17575_3Adu p_AuthenticatedIso17575_3Adu
        ) runs on EutComp return boolean {
            return fx_secured_packet(p_Iso17575_3Adu, p_AuthenticatedIso17575_3Adu); // FIXME To be refined
        }
        
        function f_extract_Iso17575(
                                    in template (value) AuthenticatedIso17575_3Adu p_authenticatedIso17575_3Adu, 
                                    out Iso17575_3Adu p_iso17575_3AduValue
        ) runs on EutComp return boolean {
            if (fx_verify_packet(bit2oct(p_authenticatedIso17575_3Adu.iso17575_3AduPer), p_authenticatedIso17575_3Adu.messageAuthenticator) == true) {
                decvalue(p_authenticatedIso17575_3Adu.iso17575_3AduPer, p_iso17575_3AduValue);
                return true;
            }
            
            return false;
        }
        
        function f_extract_ChargeReport(
                                        in template (value) AuthenticatedChargeReport p_authenticatedChargeReport, 
                                        out ChargeReport p_chargeReportValue
        ) runs on EutComp return boolean {
            if (fx_verify_packet(bit2oct(p_authenticatedChargeReport.chargeReportPer), p_authenticatedChargeReport.messageAuthenticator) == true) {
                decvalue(p_authenticatedChargeReport.chargeReportPer, p_chargeReportValue);
                return true;
            }
            
            return false;
        }
        
        function f_extract_ChargeReportResponse(
                                                in template (value) AuthenticatedChargeReportResponse p_authenticatedChargeReportResponse, 
                                                out ChargeReportResponse p_chargeReportResponseValue
        ) runs on EutComp return boolean {
            if (fx_verify_packet(bit2oct(p_authenticatedChargeReportResponse.chargeReportResponsePer), p_authenticatedChargeReportResponse.messageAuthenticator) == true) {
                decvalue(p_authenticatedChargeReportResponse.chargeReportResponsePer, p_chargeReportResponseValue);
                return true;
            }
            
            return false;
        }
        
     } // End of group Security
     
    /**
     * 
     * @desc    Date and time comparison functions
     */
    group DateTimeComparison {
        /**
         * @desc    This function compares 2 DateCompact values
         * @param   p_beginOfPeriod First value to compare
         * @param   p_endOfPeriod Second value to compare
         * @return  -1 if p_beginOfPeriod < p_endOfPeriod, 0 if p_beginOfPeriod == p_endOfPeriod and +1 if p_beginOfPeriod > p_endOfPeriod
         */
        function f_compareDateCompact(in DateCompact p_beginOfPeriod, in DateCompact p_endOfPeriod) runs on EutComp
        return integer {
            if (p_beginOfPeriod.year < p_endOfPeriod.year) {
                return -1;
            } else if (p_beginOfPeriod.year > p_endOfPeriod.year) {
                return 1;
            } else if (p_beginOfPeriod.month < p_endOfPeriod.month) {
                return -1;
            } else if (p_beginOfPeriod.month > p_endOfPeriod.month) {
                return 1;
            } else if (p_beginOfPeriod.day < p_endOfPeriod.day) {
                return -1;
            } else if (p_beginOfPeriod.day > p_endOfPeriod.day) {
                return 1;
            }
            
            return 0;
        } // End of function f_compareDateCompact
        /**
         * @desc    This function compares 2 TimeCompact values
         * @param   p_beginOfPeriod First value to compare
         * @param   p_endOfPeriod Second value to compare
         * @return  -1 if p_beginOfPeriod < p_endOfPeriod, 0 if p_beginOfPeriod == p_endOfPeriod and +1 if p_beginOfPeriod > p_endOfPeriod
         * @verdict unchanged on success, fail on priocessing error
         */
        function f_compareTimeCompact(in DateAndTime p_beginOfPeriod, in DateAndTime p_endOfPeriod) runs on EutComp
        return integer {
            if (p_beginOfPeriod.timeCompact.hours < p_endOfPeriod.timeCompact.hours) {
                return -1;
            } else if (p_beginOfPeriod.timeCompact.hours > p_endOfPeriod.timeCompact.hours) {
                return 1;
            } else if (p_beginOfPeriod.timeCompact.mins < p_endOfPeriod.timeCompact.mins) {
                return -1;
            } else if (p_beginOfPeriod.timeCompact.mins > p_endOfPeriod.timeCompact.mins) {
                return 1;
            } else if (p_beginOfPeriod.timeCompact.double_secs < p_endOfPeriod.timeCompact.double_secs) {
                return -1;
            } else if (p_beginOfPeriod.timeCompact.double_secs > p_endOfPeriod.timeCompact.double_secs) {
                return 1;
            }

            return 0;
        } // End of function f_compareTimeCompact
        /**
         * @desc    This function compares 2 UTC times in charstring format
         * @param   p_beginOfPeriod First value to compare
         * @param   p_endOfPeriod Second value to compare
         * @return  -1 if p_beginOfPeriod < p_endOfPeriod, 0 if p_beginOfPeriod == p_endOfPeriod and +1 if p_beginOfPeriod > p_endOfPeriod
         * @verdict unchanged on success, fail on priocessing error
         * @remark  The UTC time format is "20100101000001+0100", see DateAndTime declaration
         */
        function f_compareDateAndTime(in DateAndTime p_beginOfPeriod, in DateAndTime p_endOfPeriod) runs on EutComp
        return integer {
            var integer v_result := f_compareDateCompact(p_beginOfPeriod.timeDate, p_endOfPeriod.timeDate);
            if (v_result == 0) {
                return f_compareTimeCompact(p_beginOfPeriod, p_endOfPeriod);
            }
            
            return v_result;
        } // End of function f_compareDateAndTime
    } // End of group DateTimeComparison

    /**
     * @desc    Comparison functions group
     */
    group Comparison {

        /**
         * @desc    Compare the VersionAndValidity data elements
         * @param   v1 The first VersionAndValidity data element to compare
         * @param   v2 The second VersionAndValidity data element to compare
         * @return  1 if v1 is greather that v2, -1 if v2 is greather that v1, 0 if equals
         * @verdict unchanged
         */
        function f_compareVersion(
                                  in VersionAndValidity v1, 
                                  in VersionAndValidity v2
        ) runs on EutComp return integer {
            var integer val1 := oct2int(v1.version.basicVersionId);
            var integer val2 := oct2int(v2.version.basicVersionId);
            if (val1 > val2) {
                return 1;
            } else if (val1 < val2) {
                return -1;
            }
            return 0;
        } // End of function f_compareVersion

    } // End of group Comparison

    group Validation {

        /**
         * @desc    This function checks that regimeID is identicall in each usageStatementList item and match the specified value
         * @param   p_usageStatementList    Usage Statement list
         * @param   p_usageStatementId      UsageStatementId value to match
         * @return  true on success, false otherwise
         * @verdict unchanged
         */
        function f_check_regimeID <in type Container> (
                                                       in UsageStatementList p_usageStatementList, 
                                                       in integer p_usageStatementId
        ) runs on EutComp return boolean {
            // p_usageStatementList shall not be omit

            // Parse UsageStatement list
            for (var integer v_idx := 0; v_idx < sizeof(p_usageStatementList); v_idx := v_idx + 1) {
                // Check if regimeID fiels is present
                if (ispresent(p_usageStatementList[v_idx].usageStatement.usageStatementId) == false) {
                    return false; // Error, not present
                } else {
                    if (p_usageStatementList[v_idx].usageStatement.usageStatementId != p_usageStatementId) {
                        return false; // Error, values mismatch
                    } // else continue
                }
            } // 'for' loop

            return true;
        } // End of function f_check_regimeID

        /**
         * @desc    Verify that TariffClass are defined
         * @param   TariffClass instance
         * @return  true on success, false otherwise
         * @verdict unchanged
         */
        function f_tariffClass(in TariffClass p_tariffClass) runs on EutComp
        return boolean {
            if (
                (ispresent(p_tariffClass.locationClasses) == false) or
                (ispresent(p_tariffClass.timeClasses) == false) or
                (ispresent(p_tariffClass.userClasses) == false)) {
                return false; // One of the 3 conditions doesn't match'
            }

            return true;
        } // End of function f_tariffClass
        /**
         * @desc    Verify the presence of locationClassId in AggregatedSingleClassTariffSession.tariffClass
         * @param   p_usageStatementList Usage Statment list
         * @return  true on success, false otherwise
         * @verdict unchanged
         */
/*        function f_check_AggregatedSingleClassTariffSession_tariffClass(in ChargeReport.usageStatementList p_usageStatementList) runs on EutComp
        return boolean {
            // p_usageStatementList shall not be omit

            // Parse UsageStatement list
            for (var integer idx := 0; idx < sizeof(p_usageStatementList); idx := idx + 1) {
                if (ispresent(p_usageStatementList[idx].usageStatement.aggregatedSingleTariffClassSession) == false) {
                    // Skip this item
                    continue;
                } else if (ispresent(p_usageStatementList[idx].usageStatement.aggregatedSingleTariffClassSession.tariffClass) == false) {
                    // Skip this item
                    continue;
                } else if (f_tariffClass(p_usageStatementList[idx].aggregatedSingleTariffClassSession.tariffClass) == false) {
                    return false; // One of the 3 conditions doesn't match'
                }
            } // 'for' loop

            return true;
        } // End of function f_check_AggregatedSingleClassTariffSession_locationClassId
*/
        /**
         * @desc    Verify the presence of locationClassId in DetectedChargeObjectContent.tariffClass
         * @param   p_usageStatementList Usage Statment list
         * @return  true on success, false otherwise
         * @verdict unchanged
         */
/*        function f_check_DetectedChargeObjectContent_tariffClass(in ChargeReport.usageStatementList p_usageStatementList) runs on EutComp
        return boolean {
            // p_usageStatementList shall not be omit

            // Parse UsageStatement list
            for (var integer idx := 0; idx < sizeof(p_usageStatementList); idx := idx + 1) {
                if (ispresent(p_usageStatementList[idx].listOfChargeObjects) == false) {
                    // Skip this item
                    continue;
                } else {
                    // Parse DetectedChargeObject list
                    for (var integer jdx := 0; jdx < sizeof(p_usageStatementList[idx].usageStatement.listOfChargeObjects); jdx := jdx + 1) {
                        if (ispresent(p_usageStatementList[idx].usageStatement.listOfChargeObjects[jdx].tariffClass) == false) {
                            // Skip this item
                            continue;
                        } else if (f_tariffClass(p_usageStatementList[idx].usageStatement.listOfChargeObjects[jdx].tariffClass) == false) {
                            return false; // One of the 3 conditions doesn't match'
                        }
                    } // 'for' loop
                }
            } // 'for' loop

            return true;
        } // End of function f_check_DetectedChargeObjectContent_tariffClass
*/
        /**
         * @desc    Verify the presence of locationClassId in ListOfRawUsageDataContent.tariffClass
         * @param   p_usageStatementList Usage Statment list
         * @return  true on success, false otherwise
         * @verdict unchanged
         */
/*        function f_check_ListOfRawUsageDataContent_tariffClass(in ChargeReport.usageStatementList p_usageStatementList) runs on EutComp
        return boolean {
            // p_usageStatementList shall not be omit

            // Parse UsageStatement list
            for (var integer idx := 0; idx < sizeof(p_usageStatementList); idx := idx + 1) {
                if (ispresent(p_usageStatementList[idx].listOfRawUsageData) == false) {
                    // Skip this item
                    continue;
                } else if (ispresent(p_usageStatementList[idx].listOfRawUsageData.tariffClass) == false) {
                    // Skip this item
                    continue;
                } else if (f_tariffClass(p_usageStatementList[idx].listOfRawUsageData.tariffClass) == false) {
                    return false; // One of the 3 conditions doesn't match'
                }
            } // 'for' loop

            return true;
        } // End of function f_check_ListOfRawUsageDataContent_tariffClass
*/
    } // End of group Validation

    /**
     * @desc    UpperTester group
     */
    group DUT_Actions {
            /**
             * @desc    Defines UpperTester commands
             */
        group Commands {
            /**
             * @desc    Set command, used to request a specific value for each parameter od the parameter list
             */
            const charstring cmdSet := "Set";
            /**
             * @desc    Inc command, used to increase the value of each parameter od the parameter list
             */
            const charstring cmdInc := "Inc";
            /**
             * @desc    Check command, used to verify a specified value on the DUT part
             */
            const charstring cmdCheck := "Check";
            /**
             * @desc    Raise command, used to raise an event on the DUT part
             */
            const charstring cmdTrigger := "Raise";
        } // End of group Commands
        
        group UserActions {
            /**
             * @desc    Request for DUT actions (configuration, trigger, check...)
             * @verdict pass on success
             */
            function f_userActions(in charstring cmd, in ParameterList params) runs on EutComp {
                t_wait.start;
                eaPort.send(m_EQ_Request(cmd, params));
                alt {
                    [] eaPort.receive(mw_EO_Response(0)) {
                        t_wait.stop;
                        setverdict(pass);
                    }
                }
            } // End of function f_userActions
        } // End of group UserActions
    } // End of group DUT_Actions

} // End of module Common_Functions